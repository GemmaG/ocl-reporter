<?xml version="1.0"?>
<rdf:RDF
	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:foaf="http://xmlns.com/foaf/0.1/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns="http://purl.org/rss/1.0/"
>
<channel rdf:about="http://www.cl.cam.ac.uk/projects/ocamllabs/blogs">
	<title>OCaml Labs updates</title>
	<link>http://www.cl.cam.ac.uk/projects/ocamllabs/blogs</link>
	<description>OCaml Labs updates - http://www.cl.cam.ac.uk/projects/ocamllabs/blogs</description>

	<items>
		<rdf:Seq>
			<rdf:li rdf:resource="http://anil.recoil.org/2013/09/20/opam-1-1-beta" />
			<rdf:li rdf:resource="http://hh360.user.srcf.net/blog/?p=352" />
			<rdf:li rdf:resource="http://ocamllabs.github.com/compiler-hacking/2013/09/17/compiler-hacking-july-2013" />
			<rdf:li rdf:resource="http://anil.recoil.org/2013/09/16/camlpdf-the-end-of-sucky-pdf-tools" />
			<rdf:li rdf:resource="http://pw374.github.io/posts/2013-09-05-21-31-26-about-omd.html" />
			<rdf:li rdf:resource="http://hh360.user.srcf.net/blog/?p=153" />
			<rdf:li rdf:resource="http://anil.recoil.org/2013/09/09/ocamlot-autotriaging" />
			<rdf:li rdf:resource="http://hh360.user.srcf.net/blog/?p=25" />
			<rdf:li rdf:resource="http://openmirage.org/blog/introducing-vchan" />
			<rdf:li rdf:resource="http://hh360.user.srcf.net/blog/?p=86" />
			<rdf:li rdf:resource="http://openmirage.org/blog/oscon13-trip-report" />
			<rdf:li rdf:resource="http://anil.recoil.org/2013/08/06/real-world-ocaml-beta2" />
			<rdf:li rdf:resource="http://hh360.user.srcf.net/blog/?p=99" />
			<rdf:li rdf:resource="http://openmirage.org/blog/xen-block-devices-with-mirage" />
			<rdf:li rdf:resource="http://hh360.user.srcf.net/blog/?p=64" />
			<rdf:li rdf:resource="http://hh360.user.srcf.net/blog/?p=90" />
			<rdf:li rdf:resource="http://anil.recoil.org/2013/06/17/real-world-ocaml-beta-available" />
			<rdf:li rdf:resource="http://www.cl.cam.ac.uk/projects/ocamllabs/news/2013-06-01" />
			<rdf:li rdf:resource="http://openmirage.org/blog/the-road-to-a-dev-release" />
			<rdf:li rdf:resource="http://www.cl.cam.ac.uk/projects/ocamllabs/news/2013-05-01" />
			<rdf:li rdf:resource="http://www.cl.cam.ac.uk/projects/ocamllabs/news/2013-04-01" />
			<rdf:li rdf:resource="http://amirchaudhry.com/wireframe-demos-for-ocamlorg" />
			<rdf:li rdf:resource="http://lpw25.net/2013/03/10/ocaml-namespaces" />
			<rdf:li rdf:resource="http://www.cl.cam.ac.uk/projects/ocamllabs/news/2013-03-01" />
			<rdf:li rdf:resource="http://lpw25.net/2013/02/05/camlp4-alternative-part-2" />
			<rdf:li rdf:resource="http://www.cl.cam.ac.uk/projects/ocamllabs/news/2013-02-01" />
			<rdf:li rdf:resource="http://lpw25.net/2013/01/23/camlp4-alternative-part-1" />
			<rdf:li rdf:resource="http://www.cl.cam.ac.uk/projects/ocamllabs/news/2013-01-01" />
			<rdf:li rdf:resource="http://www.cl.cam.ac.uk/projects/ocamllabs/news/2012-12-01" />
			<rdf:li rdf:resource="http://hh360.user.srcf.net/blog/2012/11/system-programming-in-ocaml-part-2/" />
			<rdf:li rdf:resource="http://hh360.user.srcf.net/blog/2012/11/ocaml-2-html/" />
			<rdf:li rdf:resource="http://hh360.user.srcf.net/blog/2012/11/system-programming-in-ocaml-part-1/" />
			<rdf:li rdf:resource="http://www.cl.cam.ac.uk/projects/ocamllabs/news/2012-11-01" />
			<rdf:li rdf:resource="http://anil.recoil.org/2012/10/19/announcing-ocaml-labs" />
			<rdf:li rdf:resource="http://openmirage.org/blog/breaking-up-is-easy-with-opam" />
			<rdf:li rdf:resource="http://openmirage.org/blog/xenstore-stub-domain" />
			<rdf:li rdf:resource="http://anil.recoil.org/2012/07/31/the-functional-week" />
			<rdf:li rdf:resource="http://openmirage.org/blog/announcing-mirage-openflow" />
			<rdf:li rdf:resource="http://anil.recoil.org/2012/02/25/dreamplug-debian-and-ocaml" />
			<rdf:li rdf:resource="http://openmirage.org/blog/an-outing-to-cufp" />
		</rdf:Seq>
	</items>
</channel>

<item rdf:about="http://anil.recoil.org/2013/09/20/opam-1-1-beta">
	<title>Anil Madhavapeddy: OPAM 1.1 beta available, with pretty colours</title>
	<link>http://anil.recoil.org/2013/09/20/opam-1-1-beta.html</link>
	<content:encoded>&lt;p&gt;&lt;a href=&quot;http://gazagnaire.org&quot;&gt;Thomas&lt;/a&gt; just announced the availability of the &lt;a href=&quot;http://opam.ocamlpro.com&quot;&gt;OPAM&lt;/a&gt; beta release. This has been a huge amount of work for him and &lt;a href=&quot;http://louis.gesbert.fr/&quot;&gt;Louis&lt;/a&gt;, so I&amp;#8217;m excited to see this release! Aside from general stability, the main highlights for me are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A switch to the &lt;a href=&quot;http://creativecommons.org/publicdomain/zero/1.0/&quot;&gt;CC0&lt;/a&gt; public-domain-like license for the repository, and LGPL2+linking exception for OPAM itself. The &lt;a href=&quot;https://github.com/OCamlPro/opam-repository/issues/955&quot;&gt;cutover to the new license&lt;/a&gt; was the first non-gratuitous use of GitHub&amp;#8217;s fancy issue lists I&amp;#8217;ve seen, too! As part of this, we&amp;#8217;re also beginning a transition over to hosting it at &lt;code&gt;opam.ocaml.org&lt;/code&gt;, to underline our committment to maintaining it as an OCaml community resource.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Much-improved support for package pinning and updates. This is the feature that makes OPAM work well with &lt;a href=&quot;http://openmirage.org&quot;&gt;MirageOS&lt;/a&gt;, since we often need to do development work on a low-level library (such as a &lt;a href=&quot;https://github.com/mirage/ocaml-xen-block-driver&quot;&gt;device driver&lt;/a&gt; and recompile all the reverse dependencies.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Support for post-installation messages (e.g. to display &lt;a href=&quot;https://github.com/OCamlPro/opam-repository/pull/1100&quot;&gt;licensing information&lt;/a&gt; or configuration hints) and better support for the external library management issues I explained in an earlier post about &lt;a href=&quot;http://anil.recoil.org/2013/09/09/ocamlot-autotriaging.html&quot;&gt;OCamlot testing&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Better library structuring to let tools like &lt;a href=&quot;http://github.com/OCamlPro/opam2web&quot;&gt;Opam2web&lt;/a&gt; work with the package metadata. For instance, my group&amp;#8217;s &lt;a href=&quot;http://ocaml.io&quot;&gt;OCaml Labs&lt;/a&gt; has a comprehensive list of &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/pkg/index.html&quot;&gt;the software packages that we work on&lt;/a&gt; generated directly from an OPAM remote.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;A growing set of administration tools (via the &lt;code&gt;opam-admin&lt;/code&gt; binary) that run health checks and compute statistics over package repositories. For example, here&amp;#8217;s the result of running &lt;code&gt;opam-admin stats&lt;/code&gt; over the latest package repository to show various growth curves.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table align=&quot;center&quot; width=&quot;90%&quot;&gt;
&lt;tr&gt;
&lt;td width=&quot;30%&quot; class=&quot;bimg&quot;&gt;&lt;a href=&quot;http://anil.recoil.org/images/opam11-beta-contributors.png&quot;&gt;&lt;img border=&quot;0&quot; width=&quot;220&quot; src=&quot;http://anil.recoil.org/images/opam11-beta-contributors.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;Number of unique contributors to the main OPAM package repository.&lt;/td&gt;
&lt;td width=&quot;30%&quot; class=&quot;bimg&quot;&gt;&lt;a href=&quot;http://anil.recoil.org/images/opam11-beta-packages.png&quot;&gt;&lt;img border=&quot;0&quot; width=&quot;220&quot; src=&quot;http://anil.recoil.org/images/opam11-beta-packages.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;Total number of unique packages (including multiple versions of the same package).&lt;/td&gt;
&lt;td width=&quot;30%&quot; class=&quot;bimg&quot;&gt;&lt;a href=&quot;http://anil.recoil.org/images/opam11-beta-unique-packages.png&quot;&gt;&lt;img border=&quot;0&quot; width=&quot;220&quot; src=&quot;http://anil.recoil.org/images/opam11-beta-packages.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;Total packages with multiple versions coalesced so you can see new package growth.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Is it a &lt;a href=&quot;http://www.theatlantic.com/technology/archive/2013/05/the-hockey-stick-the-most-controversial-chart-in-science-explained/275753/&quot;&gt;hockey stick&lt;/a&gt; graph? Only time will tell! See Thomas&amp;#8217; &lt;a href=&quot;https://sympa.inria.fr/sympa/arc/caml-list/2013-09/msg00300.html&quot;&gt;full release announcement&lt;/a&gt; and let us know how you get along with this new release&amp;#8230;&lt;/p&gt;</content:encoded>
	<dc:date>2013-09-19T23:00:00+00:00</dc:date>
</item>
<item rdf:about="http://hh360.user.srcf.net/blog/?p=352">
	<title>Heidi Howard: OCaml Monthly Meeting – Live Blog</title>
	<link>http://hh360.user.srcf.net/blog/2013/09/ocaml-monthly-meeting-live-blog/</link>
	<content:encoded>&lt;p&gt;Today&amp;#8217;s OCaml Labs Monthly Meeting is all about practise talks for OCaml2013 so in that spirit, I&amp;#8217;ll practising a bit of live-blogging too.&lt;/p&gt;
&lt;p&gt;13:53 &amp;#8211; Today&amp;#8217;s SRG Meeting is over and its time for some work before the OCaml Labs meeting at 4:00, see you then &amp;#8230;&lt;/p&gt;
&lt;p&gt;16:02 Techincal difficulties delayed the start&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;16:02 Intro from Anil&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;introducing Gabriel Scherer who is visiting us this week and going we are going to Maypole after this meeting. We had a cash prise from ASPLOS after winning the HiPEAC paper award and the money will go towards SRG wine for XMAS party. Signpost paper was accepted to FOCI and a HotNet paper on Trevi was also just accepted&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OCL Website&lt;/strong&gt; &amp;#8211; Too much manual management at the moment, moving to an &lt;a href=&quot;http://planet.ocamlcore.org/&quot;&gt;ocaml planet&lt;/a&gt; feed of blog posts. David has been busy hacking on &lt;a href=&quot;https://github.com/OCamlPro/opam2web&quot;&gt;OPAM2web&lt;/a&gt;, OPAM has 512 packages, Opam2web takes a subset of the OPAM packages and makes the metadata into a minisite, like on OPAM. Doesn&amp;#8217;t require manual updates, like an ATOM feed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Upcoming events&lt;/strong&gt; &amp;#8211; Tomorrow is the 2nd &lt;a href=&quot;http://www.meetup.com/Makespace/events/138103982/&quot;&gt;compiler hacking event&lt;/a&gt;, at the &lt;a href=&quot;http://makespace.org/&quot;&gt;makespace&lt;/a&gt;. Anil will be talking at QCon on Mirage, Mirage 1.0 release date is October 22nd, so maybe a workshop before. We 3 talks for Ocaml2013 (Platform, OcamlOT and Ctypes) so here we go &amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;16:09 Anil practice talk on OCaml Platform 1.0&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Languages take many difference approaches to platform, but what does platform even mean? As a late mover in this field, we can learn from other languages. A platforms is NOT a group of temporarily motivated hackers to build a replacement standard library. Its hard to adopt a particular approach without a domain specific purpose, there are too many opinions, we need objective way to determine what belongs in the platform, we need a genie community that is sustainable (even if a large party leaves). A platform is a bundle of tools that interoperate, with quantitative metric to judge success, built in agility and supporting developers thought the whole development life cycle. Industrial partners have a range of needs, as each work in different domains.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tooling&lt;/strong&gt; &amp;#8211; Overview of 5 areas: OPAM from OCamlPro, IDE Tools, OPAM-DOC, OCaml compiler itself and Ocaml.org.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OPAM&lt;/strong&gt; &amp;#8211; 1.1 released today (maybe), over 100 contributors to OPAM,  500+ packages, 1500+ unique versions, external dependency solver using CUDF&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IDE Support&lt;/strong&gt; &amp;#8211; OCaml has many intermediate files. In OCaml 4.0 onwards, we have a binary format of an abstract syntax tree with type annotations called cmt (and cmti for interface files), we can now create external tools to query this like opam-doc. ocp-index and ocp-indent from OCamlPro, and Merlin (I thinks this is EPIC) are also now available&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;opam-doc&lt;/strong&gt; &amp;#8211; Now we have cmt files, we need unified documentation across packages, this is much harder than it sounds as it touches every part of the tool stack. Not all packages can be installed at once due to conflicts. Module inclusion is tough to code in static html. (Need to make a demo) bindoc takes the Typed AST (in cmt) and generates cmd, which include the ocamldoc comments, Opamdoc takes the cmt database for opam and output a single website with your universe of packages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ocaml.org&lt;/strong&gt; - Demo of ocaml.org at &lt;a href=&quot;http://hh360.user.srcf.net/blog/category/pl/ocaml/feed/ocaml-redesign.github.io/pkg/index.html&quot;&gt;ocaml-redesign.github.io/pkg/index.html&lt;/a&gt;, feedback is welcome says amir&lt;/p&gt;
&lt;p&gt;Now we have the tools, what metrics can we extract to see how well our tools are doing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Portability&lt;/strong&gt; &amp;#8211; windows compatibility ?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Maintainer&lt;/strong&gt; &amp;#8211; is there a place for docs and will people response to issues/comments/emails, where can issues be submitted ?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tests&lt;/strong&gt; &amp;#8211; code coverage, multi variant benchmarking in &lt;a href=&quot;https://ocaml.janestreet.com/ocaml-core/latest/doc/core_bench/index.html&quot;&gt;core-bench&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stability&lt;/strong&gt; &amp;#8211; OPAM support pining, how stable are the interfaces of libraries ?&lt;/p&gt;
&lt;p&gt;opam tracks compiler constraint, statically analyses the build system from logs (OCamlOT)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Agility&lt;/strong&gt; &amp;#8211; Building a platform is EXHAUSTING. We want to ask &amp;#8220;WANT IF&amp;#8221; questions: &lt;a href=&quot;http://gallium.inria.fr/blog/monomorphic_let/&quot;&gt;what if let was monomophic&lt;/a&gt;? what if we removed &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-camlp4/manual002.html&quot;&gt;camlp4&lt;/a&gt;? what is the syntax precedence changes ?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Distrusted workflow&lt;/strong&gt; &amp;#8211; build on git, distributing tasks between 3 actors: Author (library writers), OCamlOL workers and maintainers. As we become more stable we move from staging to stable to inclusion in the platform.&lt;/p&gt;
&lt;p&gt;We are building a tussle, we want to launch a game in janurary and let people put standard libraries into the ring, running OCamlOT to discover the winner&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;No clear winner&lt;/strong&gt;: Lwt &amp;#8211; portability, Batteries &amp;#8211; free of syntax extensions, core &amp;#8211; comprehensive.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;16:36  Discussion over the battle of the standard libraries and talk feedback&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;C: talk is a bit long, not sure what to cut..&lt;/p&gt;
&lt;p&gt;C: OPAM was dicussed last year at OCaml2013, we want to update everyone and follow on without overlapping too much&lt;/p&gt;
&lt;p&gt;Q: Haven&amp;#8217;t we already decided on JS&amp;#8217;s core ?&lt;/p&gt;
&lt;p&gt;A: No, we use all of them, i.e. Mirage used lwt extensively&lt;/p&gt;
&lt;p&gt;Q: What if we don&amp;#8217;t want any of the new standard libraries ? maybe I just want to use domain specific libraries from OPAM as and when I need them&lt;/p&gt;
&lt;p&gt;A: We are not forcing the new standard libraries on anyone, but they are useful for beginners, nice to have consistent style, interoperability and few open statements e.g. Open Core.Std&lt;/p&gt;
&lt;p&gt;Q: What if I have already decided which standard library I want to use ?&lt;/p&gt;
&lt;p&gt;A: Again we are not forcing standard libraries on anyone, we are just trying to force effort more directly. OCaml tools will always be standard library agnoctic&lt;/p&gt;
&lt;p&gt;C: the diagram of OCamlOT is confustion&lt;/p&gt;
&lt;p&gt;C: how to not overlap with david talks&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;16:41 Davids talk on OCamlOT&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;State for the open source OCaml community&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Outline:&lt;/strong&gt; what is quality software? what is the user experience? what is feedback loop for package authors? How do we represent the thing underneath this all? utopian future ?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quality:&lt;/strong&gt; Work on every core (ANIL: We want multi-core &lt;img src=&quot;http://hh360.user.srcf.net/blog/wp-includes/images/smilies/icon_razz.gif&quot; alt=&quot;:P&quot; class=&quot;wp-smiley&quot; /&gt;  ), consistent results: work or die nicely with obvious solution, not more &amp;#8220;What have I forgotten?&amp;#8221; questions, it should just tell you. We need addictive actions (not sure what they are), consistency, quality functions&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Universal concerns:&lt;/strong&gt; compiler hypothesis &amp;#8220;what if&amp;#8221; questions (anil already said this), build system hypotheses &amp;#8220;what strange assumuptions is the buid system making?&amp;#8221;, package manager hypothesis and environmner hypothesis&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Workflow:&lt;/strong&gt; Make a pull request, curator observes the proposal, predict the future, proposes amendments, feedback loop and finally agreement is reached. Core is release weekly for example, we are trying to work like linux kernal patches&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;New workflow:&lt;/strong&gt; promote health of OCaml community, preaching compatibility, &amp;#8220;observe, orient, decide and act&amp;#8221;, Computer assisted curator will help a human, to run the loop faster, human can pose questions to the computer assisted curator e.g  &amp;#8221;will this run on ARM ?&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Repository Observation:&lt;/strong&gt; github binding with web hooks but we are not tied to github. We merge into the world and we need dependences from each possible users prospective of the world&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dependency Orientation:&lt;/strong&gt; capabilities with environmental dependances, packages with constriant-based dependencies, repositories with revision dependencies and artifact dependencies. example of the android repo&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Triage Decisions:&lt;/strong&gt; taking plain text error and parsing them into categories such as unsatisfiability (can&amp;#8217;t have these two packages), dependencies (if my dependency is broken, then I am broken), transient (network down), system, metadata, external dependences (you forgot to write a dependency), build errors and a combo of many of the above.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;State Action:&lt;/strong&gt; commit intention, build, error analysis and buid results&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Internet res:&lt;/strong&gt; The agents negotiates over REST API on HTTPS, independent metadata layers (not sure about this) ,everythings an s-exp, branch consistent store explained, like git or &lt;a href=&quot;https://github.com/samoht/irminsule&quot;&gt;Irminsule&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Current state:&lt;/strong&gt; github web hooks, we are conservative so one byte changes and we rebuild everything, basic triage heuristics completed, no amendment are proposed by the system atm, we don&amp;#8217;t commit the outcome but the evidence, simple reactions to results, a website with green and red boxes in the large table&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;History:&lt;/strong&gt; we have found lots of metadata issues&lt;span&gt;, many packages bugs, some tool bugs like a non relocatable&lt;/span&gt;&lt;span&gt; compiler and &lt;/span&gt;ocamlbuild&lt;span&gt; PATH &lt;/span&gt;ignorer&lt;span&gt;, we currently have 30+ &lt;/span&gt;x84-64&lt;span&gt; 30+&lt;/span&gt;x84-32&lt;span&gt;, 8 ARMs , many &lt;/span&gt;Linux&lt;span&gt; distros&lt;/span&gt;&lt;span&gt; , &lt;/span&gt;dead &lt;a href=&quot;http://www.raspberrypi.org/&quot;&gt;Raspberry Pi&lt;/a&gt;, panicking&lt;span&gt; *nix &lt;/span&gt;filesystems&lt;span&gt; and lots of people have set warning as error&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Future:&lt;/strong&gt; opamfu for DAG analysis, schema migration overhead, lower overhead for administrating exotic workers contributed to OCamlOT, we need to authenticate machines using ocaml-sodium, we need more advanced automation, proposed amendments, lets have a dialogue, better website integration, benchmarking your upgrades (how much improves cost), run experiments on whole OPAM universe with differential analysis and VM-based test system, to specific the worker finely.&lt;/p&gt;
&lt;p&gt;What I think quantity is, vision of the future, how its represented underneath and what&amp;#8217;s next,&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Discussions&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;C: that was 20mins, feedback to David regarding content to be cut,&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;17:23 Ctypes by Jeremy &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;This is a update not a practice talk&lt;/p&gt;
&lt;p&gt;An examples of puts from C, how we can write no C and link in OCaml,&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NEW things in Ctypes:&lt;/strong&gt;&lt;br /&gt;
prettyprinting &amp;#8211; for C types and C values, making it much eaiser to examine values for debuygging&lt;/p&gt;
&lt;p&gt;biarray &amp;#8211; support for lump of C memory&lt;/p&gt;
&lt;p&gt;More type &amp;#8211; nullable string, complex numbers&lt;/p&gt;
&lt;p&gt;String conversions &amp;#8211; much faster&lt;/p&gt;
&lt;p&gt;Memory management issues &amp;#8211; ctypes now gives the programmer more control over lifetime of OCaml passed to C,&lt;/p&gt;
&lt;p&gt;finaliser &amp;#8211; which you can attach to memory&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Future&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;stub generation &amp;#8211; instead of dynamically binding, it will generate stub code to act to the API&lt;/p&gt;
&lt;p&gt;capability-style memory safty &amp;#8211; one rogue pointer in a C library, can cause hell, loading each C library in a seperate address space so i library can only kill itself, you can then even run on C library on a foreign host or on a virtual machine&lt;/p&gt;
&lt;p&gt;static strcut/union layout &amp;#8211; checking layout of structures and unions against the API&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;17:40 Amir demo of ocaml-resdesign.githuib.io/docs/opam,&lt;/span&gt;&lt;/strong&gt; (its look great &lt;img src=&quot;http://hh360.user.srcf.net/blog/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:)&quot; class=&quot;wp-smiley&quot; /&gt; )&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://hh360.user.srcf.net/blog/wp-content/uploads/2013/09/ocaml.png&quot;&gt;&lt;img class=&quot;size-medium wp-image-363 aligncenter&quot; alt=&quot;ocaml&quot; src=&quot;http://hh360.user.srcf.net/blog/wp-content/uploads/2013/09/ocaml-253x300.png&quot; width=&quot;253&quot; height=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2013-09-17T12:54:53+00:00</dc:date>
</item>
<item rdf:about="http://ocamllabs.github.com/compiler-hacking/2013/09/17/compiler-hacking-july-2013">
	<title>Compiler Hacking: Inaugural compiler hackers meeting</title>
	<link>http://ocamllabs.github.com/compiler-hacking/2013/09/17/compiler-hacking-july-2013.html</link>
	<content:encoded>&lt;p&gt;&lt;img src=&quot;http://ocamllabs.github.io/compiler-hacking/imgs/2013-09-17.jpg&quot; alt=&quot;Compiler Hacking&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first OCaml Labs compiler hacking session brought together around twenty people from &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/&quot;&gt;OCaml Labs&lt;/a&gt;, the wider &lt;a href=&quot;http://www.cl.cam.ac.uk&quot;&gt;Computer Lab&lt;/a&gt;, and &lt;a href=&quot;http://www.citrix.com/&quot;&gt;various&lt;/a&gt; &lt;a href=&quot;http://www.arm.com/&quot;&gt;companies&lt;/a&gt; around Cambridge for an enjoyable few hours learning about and improving the OCaml compiler toolchain, fuelled by &lt;a href=&quot;http://www.cherryboxpizza.co.uk&quot;&gt;pizza&lt;/a&gt; and home-made ice cream (thanks, &lt;a href=&quot;http://philippewang.info/CL/&quot;&gt;Philippe&lt;/a&gt;!).&lt;/p&gt;

&lt;p&gt;We benefited from the presence of a few &lt;a href=&quot;http://www.x9c.fr/&quot;&gt;experienced&lt;/a&gt; &lt;a href=&quot;http://danmey.org/&quot;&gt;compiler&lt;/a&gt; &lt;a href=&quot;http://lpw25.net/&quot;&gt;hackers&lt;/a&gt;, but for most of us it was the first attempt to modify the OCaml compiler internals.&lt;/p&gt;

&lt;p&gt;The first surprise of the day was the discovery that work on the &lt;a href=&quot;https://github.com/ocamllabs/compiler-hacking/wiki/Things-to-work-on&quot;&gt;list of projects&lt;/a&gt; was underway before we even arrived!  Keen collaborators from The Internet had apparently spotted our triaged bug reports and &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=4323&quot;&gt;submitted&lt;/a&gt; &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=4737&quot;&gt;patches&lt;/a&gt; to Mantis.&lt;/p&gt;

&lt;h3&gt;Standard library and runtime&lt;/h3&gt;

&lt;p&gt;There was an exciting moment early on when it emerged that two teams had been working independently on the same issue!  When &lt;a href=&quot;https://github.com/jonludlam&quot;&gt;Jon Ludlam&lt;/a&gt; and &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/people/euan.html&quot;&gt;Euan Harris&lt;/a&gt; submitted a patch to add a &lt;code&gt;get_extension&lt;/code&gt; function to the &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml/libref/Filename.html&quot;&gt;&lt;code&gt;Filename&lt;/code&gt;&lt;/a&gt; module they found that they had been pipped to the post by &lt;a href=&quot;https://github.com/mcclurmc/&quot;&gt;Mike McClurg&lt;/a&gt;.  There's still the judging stage to go, though, as the patches wait &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=5807&quot;&gt;on Mantis&lt;/a&gt; for official pronouncement from the Inria team. &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/vbmithr&quot;&gt;Vincent Bernardoff&lt;/a&gt; also spent some time improving the standard library, &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=4919&quot;&gt;fleshing out the interface for translating between OCaml and C error codes&lt;/a&gt;, starting from a patch by Goswin von Brederlow.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/stedolan&quot;&gt;Stephen Dolan&lt;/a&gt; looked at a &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=1956&quot;&gt;long-standing issue&lt;/a&gt; with names exported by the OCaml runtime that can clash with other libraries, and submitted a patch which hides the sole remaining offender for the runtime library.  As he noted in the comments, there are still a &lt;a href=&quot;https://gist.github.com/stedolan/6115403&quot;&gt;couple of hundred&lt;/a&gt; global names without the &lt;code&gt;caml_&lt;/code&gt; prefix in the &lt;code&gt;otherlibs&lt;/code&gt; section of the standard library.&lt;/p&gt;

&lt;h3&gt;Tools&lt;/h3&gt;

&lt;p&gt;There was a little flurry of work on new command-line options for the standard toolchain.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=6102&quot;&gt;Mantis issue&lt;/a&gt; submitted by &lt;a href=&quot;http://gallium.inria.fr/%7Escherer/&quot;&gt;Gabriel Scherer&lt;/a&gt; suggests adding options to stop the compiler at certain stages, to better support tools such as &lt;a href=&quot;http://projects.camlcity.org/projects/findlib.html&quot;&gt;OCamlfind&lt;/a&gt; and to make it easier to debug the compiler itself.  The Ludlam / Harris team looked at this, and submitted a patch which provoked further thoughts from Gabriel.&lt;/p&gt;

&lt;p&gt;Vincent looked at extending &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml/depend.html&quot;&gt;ocamldep&lt;/a&gt; with support for suffixes other than &lt;code&gt;.ml&lt;/code&gt; and &lt;code&gt;.mli&lt;/code&gt;.  Since &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=3725&quot;&gt;the issue&lt;/a&gt; was originally submitted, &lt;code&gt;ocamldep&lt;/code&gt; has acquired &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml/depend.html#sec288&quot;&gt;&lt;code&gt;-ml-synonym&lt;/code&gt; and &lt;code&gt;-mli-synonym&lt;/code&gt; options&lt;/a&gt; that serve this purpose, so Vincent looked at supporting other suffixes in the compiler, and submitted a patch as a &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=6110&quot;&gt;new issue&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The OCaml top level has a simple feature for setting up the environment —  when it starts up it looks for the file &lt;code&gt;.ocamlinit&lt;/code&gt;, and executes its contents.  It's sometimes useful to skip this stage and run the top level in a vanilla environment, so &lt;a href=&quot;https://github.com/dsheets&quot;&gt;David Sheets&lt;/a&gt; submitted a &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=6071&quot;&gt;patch&lt;/a&gt; that adds a &lt;code&gt;-no-init&lt;/code&gt; option, &lt;a href=&quot;https://github.com/ocaml/ocaml/blob/fadcc73c50b89ca80ecc11131c9a23dbd2c1e67a/Changes#L35&quot;&gt;due for inclusion&lt;/a&gt; in the next release.&lt;/p&gt;

&lt;h3&gt;Error-handling/reporting&lt;/h3&gt;

&lt;p&gt;Error handling issues saw a good deal of activity.  &lt;a href=&quot;http://www.cl.cam.ac.uk/%7Erp452/&quot;&gt;Raphaël Proust&lt;/a&gt; submitted a patch to improve the &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=6112&quot;&gt;reporting of error-enabled warnings&lt;/a&gt;; David investigated &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=3582&quot;&gt;handling out-of-range integer literals&lt;/a&gt; and &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=5350&quot;&gt;return-code checking of C functions in the runtime&lt;/a&gt;, leading to some discussions on Mantis.  Stephen submitted a patch to improve the &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=6182&quot;&gt;diagnostics for misuses of &lt;code&gt;virtual&lt;/code&gt;&lt;/a&gt;.  &lt;a href=&quot;http://www.cl.cam.ac.uk/%7Egk338/&quot;&gt;Gabriel Kerneis&lt;/a&gt; and Wojciech looked at some &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=6109&quot;&gt;typos in ocamlbuild error messages&lt;/a&gt;, and Mike opened an &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=6108&quot;&gt;issue to clarify the appropriate use of the &lt;code&gt;compiler-libs&lt;/code&gt; package&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Language&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;open&lt;/code&gt; operation on modules can make it difficult for readers of a program to see where particular names are introduced, so its use is sometimes discouraged.  The basic feature of making names available without a module prefix is rather useful, though, so various new features (including &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual021.html#toc77&quot;&gt;local opens&lt;/a&gt;, &lt;a href=&quot;https://github.com/ocaml/ocaml/commit/f51bc04b55fbe22533f1075193dd3b2e52721f15&quot;&gt;warnings for shadowing&lt;/a&gt;, and &lt;a href=&quot;https://github.com/ocaml/ocaml/commit/a3b1c67fffd7de640ee9a0791f1fd0fad965b867&quot;&gt;explicit shadowing&lt;/a&gt;) have been introduced to tame its power. Stephen looked at adding a further feature, making it possible to open modules under a particular signature, so that &lt;code&gt;open M : S&lt;/code&gt; will introduce only those names in &lt;code&gt;M&lt;/code&gt; that are specified with &lt;code&gt;S&lt;/code&gt;.  There's an &lt;a href=&quot;https://github.com/lpw25/ocaml/tree/signatured-open&quot;&gt;initial prototype&lt;/a&gt; already, and we're looking forward to seeing the final results.&lt;/p&gt;

&lt;p&gt;The second language feature of the evening was support for infix operators (such as the List constructor, &lt;code&gt;::&lt;/code&gt;) for user-defined types, a feature that is definitely not in any way motivated by envy of Haskell.  Mike's &lt;a href=&quot;https://github.com/mcclurmc/ocaml/tree/infix-constructors&quot;&gt;prototype implementation&lt;/a&gt; is available, and there's an &lt;a href=&quot;https://github.com/mcclurmc/ocaml/pull/1&quot;&gt;additional patch&lt;/a&gt; that brings it closer to completion.&lt;/p&gt;

&lt;h3&gt;Next session&lt;/h3&gt;

&lt;p&gt;The next session is planned for 6pm on Wednesday 18th September 2013 at
&lt;a href=&quot;http://makespace.org/&quot;&gt;Makespace, Cambridge&lt;/a&gt;.  If you're planning to come along it'd be
helpful if you could add yourself to the &lt;a href=&quot;http://doodle.com/k6y2tiihkrb5vuw4&quot;&gt;Doodle Poll&lt;/a&gt;.  Hope to see
you there!&lt;/p&gt;</content:encoded>
	<dc:date>2013-09-17T11:49:04+00:00</dc:date>
	<dc:creator>OCaml Labs</dc:creator>
</item>
<item rdf:about="http://anil.recoil.org/2013/09/16/camlpdf-the-end-of-sucky-pdf-tools">
	<title>Anil Madhavapeddy: Camlpdf, the first good command-line PDF tool I've found</title>
	<link>http://anil.recoil.org/2013/09/16/camlpdf-the-end-of-sucky-pdf-tools.html</link>
	<content:encoded>&lt;p&gt;The fine folks at O&amp;#8217;Reilly have been proof-reading the &lt;a href=&quot;https://realworldocaml.org&quot;&gt;Real World OCaml&lt;/a&gt; book that I&amp;#8217;ve been working on. My heart leapt with joy when the copyeditor commented that she thought it was very well written, but my joy was short-lived when it turns out that all her comments were safely ensconced as PDF comments. A few hundreds comments that required a response from us, too.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;#8220;No problem! MacOS X Preview can handle these!&amp;#8221;&lt;/em&gt; was of course my first response, but it turns out it&amp;#8217;s totally broken with PDF notes. The first note that you select will appear as the content of all the other subsequent notes. Yaron Minsky then experimented with Adobe Acrobat, which I&amp;#8217;ve sworn never to install again after an unfortunate incident involving the uninstaller a couple of years ago. That turned out to be incredibly slow. I tried a few open-source tools such as &lt;a href=&quot;http://en.wikipedia.org/wiki/Skim_(software)&quot;&gt;Skim&lt;/a&gt; which, while otherwise an excellent bit of software, couldn&amp;#8217;t render these particular annotations.&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;&lt;td&gt;
&lt;a href=&quot;http://anil.recoil.org/images/anil-jumping-acropolis.jpg&quot;&gt;&lt;img width=&quot;207&quot; src=&quot;http://anil.recoil.org/images/anil-jumping-acropolis-thumb.jpg&quot; /&gt;&lt;/a&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td width=&quot;210&quot;&gt;&lt;i&gt;&lt;small&gt;I &lt;a href=&quot;http://www.theguardian.com/media/mind-your-language/2012/jan/29/literally-a-much-misused-word&quot;&gt;literally&lt;/a&gt; jumped off my seat upon discovering cpdf.&lt;/small&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Meanwhile, John Whitington just announced the release of the &lt;a href=&quot;http://coherentpdf.com/blog/?p=68&quot;&gt;Coherent PDF&lt;/a&gt; command-line tools. Since these are all written in OCaml (and have been developed over quite a few years now), he also sent in an OPAM &lt;a href=&quot;https://github.com/OCamlPro/opam-repository/pull/977&quot;&gt;pull request&lt;/a&gt; to add it to the database. And most conveniently, this ended up solving my little PDF conundrum in less than an hour of hacking, and has almost cured me of my lifelong fear of dealing with anything in a PDF-like format. Here&amp;#8217;s what I did:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I installed the tools via &lt;code&gt;opam install cpdf&lt;/code&gt;. This installed the library but not the binary (&lt;a href=&quot;https://github.com/OCamlPro/opam-repository/pull/1100&quot;&gt;swiftly fixed&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Reading the license told me that it&amp;#8217;s for non-commercial use only, so I bought a license from the &lt;a href=&quot;http://coherentpdf.com&quot;&gt;Coherent PDF&lt;/a&gt; website (a bargain price, given how much it does!).&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;I ran &lt;code&gt;cpdf -list-annotations&lt;/code&gt; over the PDF, and it dumped out all the comments as a text file to stdout. This wasn&amp;#8217;t quite enough for me, since I needed to match the annotation to a page number. But since John has released it as open-source, I forked the repository and patched the support directly into the command-line tools, and sent a &lt;a href=&quot;https://github.com/johnwhitington/cpdf-source/pull/2&quot;&gt;pull request&lt;/a&gt; back over to John. Since it&amp;#8217;s under a non-standard license, I decided to place my patch in the public domain to make it easier for him to accept it if he chooses.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;My co-authors can just run &lt;code&gt;opam pin cpdf git://github.com/avsm/cpdf-source#annotation-page-numbers&lt;/code&gt; to pin their local copy of CPDF to my forked branch in their own OPAM installations, and easily use my copy until John gets a chance to integrate my changes properly upstream.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Total time including this blog post: 40 minutes. Now, onto fixing the author responses comments for Real World OCaml now. I&amp;#8217;m so happy to have &lt;code&gt;cpdf&lt;/code&gt; as a simple, hackable PDF utility, as it does things like page combining and rotations that have always been a little flaky in other tools for me. It&amp;#8217;s the &lt;a href=&quot;http://johnmacfarlane.net/pandoc/&quot;&gt;Pandoc&lt;/a&gt; of PDFs!&lt;/p&gt;</content:encoded>
	<dc:date>2013-09-15T23:00:00+00:00</dc:date>
</item>
<item rdf:about="http://pw374.github.io/posts/2013-09-05-21-31-26-about-omd.html">
	<title>Philippe Wang: OMD: a Markdown parser in OCaml</title>
	<link>http://pw374.github.io/posts/2013-09-05-21-31-26-about-omd.html</link>
	<content:encoded>&lt;h3 id=&quot;Motivations&quot;&gt; Motivations&lt;/h3&gt;
&lt;p&gt;There  are  so many  existing  implementations  of  Markdown, why  yet
another one?   Well, after asking  the OCaml community  about existing
ways to parse and manipulate  Markdown documents, it seemed that there
were no stand-alone complete Markdown parser written in OCaml, meaning
that they  were incomplete (i.e., not fully  compatible with Markdown)
or  interfaces  to  some  Markdown  parsers  implemented  using  other
languages than OCaml.&lt;/p&gt;
&lt;p&gt;Since in OCaml  Labs we're working a lot with  Github, and Github uses
Markdown a  lot (Github  web pages hosting,  Github issues,  etc.) and
other  sites are also  using Markdown  as well,  and Markdown  is very
popular and  easy to  learn, and  flexible in the  sense that  you can
always  fall back  to HTML  when you  want to  express  something that
doesn't have  a special syntax in  Markdown, blah blah blah,  it was -
somehow - time to have  a Markdown parser implemented using OCaml. And
preferably  OCaml alone,  meaning that  one that  has  OCaml installed
should be able  to use it easily without having to  deal with too many
dependencies. Well, there it is: OMD!&lt;/p&gt;
&lt;h3 id=&quot;IssueswereessentiallywithMarkdownitself&quot;&gt; Issues... were essentially with Markdown itself&lt;/h3&gt;
&lt;p&gt;Every computer  scientist knows how to  write a parser  for a language
that is as simple as Markdown. Well, no, not every computer scientist,
sadly, but at least every programmer should. Ok, sadly it isn't really
the case either. Anyways.&lt;/p&gt;
&lt;p&gt;Markdown is a rather simple language,  if you look at the specs. Well,
that depends on what you actuall call &amp;quot;specs&amp;quot;, of course. According to
&lt;a href=&quot;http://en.wikipedia.org/wiki/Markdow&quot;&gt;Wikipedia&lt;/a&gt;,     Markdown    was
invented by &lt;a href=&quot;http://daringfireball.net&quot;&gt;John Gruber&lt;/a&gt;, and Aaron Swartz
helped  him. Then the  original document  that describes  the Markdown
language          is          available         online          there:
&lt;a href=&quot;http://daringfireball.net/projects/markdown/syntax&quot;&gt;http://daringfireball.net/projects/markdown/syntax&lt;/a&gt;.  And you can see
that         searching        for         &lt;a href=&quot;https://www.google.com/#q=Markdown+syntax&quot;&gt;&amp;quot;Markdown+syntax&amp;quot;        on
Google&lt;/a&gt; makes that page the
top result (and here again, I'm kind  of helping it be and stay on the
top...).&lt;/p&gt;
&lt;p&gt;Actually, Markdown is not that  simple to parse.  Why? Because so many
things are  just left to the  imagination of the  people who implement
parsers  for  this  language,   because  programmes  can't  decide  by
themselves  what's right  to do.   It's  really the  author(s) of  the
programme that  decides what the  programme does. And in  Markdown, so
many  things  are ambiguous  and  Gruber's  document doesn't  actually
describe a  grammar at all.  It just tells  you how to write  this and
that, but if you write it slightly differently, it doesn't tell you
what the outcome would be. 
&lt;em&gt;&lt;strong&gt;In other words, there are no errors in Markdown.&lt;/strong&gt;&lt;/em&gt;
Every text file is a valid Markdown file, it might just be converted 
to some HTML you wouldn't expect. For instance, you may write a link 
using this  syntax:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[blah blah blah](the-url-which-can-be-absolute-or-relative)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and it gets converted to&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;the-url-which-can-be-absolute-or-relative&amp;quot;&amp;gt;blah blah blah&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
But if you forget the closing parenthesis, then it becomes this instead&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;[blah blah blah](the-url-which-can-be-absolute-or-relative&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
precisely because nothing is wrong in Markdown.&lt;/p&gt;
&lt;p&gt;And what if there are parentheses in your URL? What if they are unbalanced?&lt;/p&gt;
&lt;h4 id=&quot;FlagrantAmbiguity&quot;&gt; Flagrant Ambiguity&lt;/h4&gt;
&lt;p&gt;The following is some text that has to mean something in Markdown...&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* Alice is falling in love with Bob.
    * Bob is secretly in love with Alice, but he's seeing Eve.
  * Eve is in-between, she loves both Alice and Bob, she can't help it.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, Pandoc, which a tool that converts a document in language A to a
document in language B, where A and B can be the same or different
languages amongst LaTeX, HTML, Markdown and (many) others, considers
that Eve is on the same level as Bob. So its HTML output is&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Alice is falling in love with Bob.
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Bob is secretly in love with Alice, but he's seeing Eve.&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Eve is in-between, she loves both Alice and Bob, she can't help it.&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But if instead you add Dylan as in&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* Alice is falling in love with Bob.
   * Dylan, a new character, is being conceived here.
    * Bob is secretly in love with Alice, but he's seeing Eve.
  * Eve is in-between, she loves both Alice and Bob, she can't help it.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then &lt;em&gt;of course&lt;/em&gt; Eve is not on the same level as Bob anymore and goes
with Dylan and Alice, Bob is on his own.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Alice is falling in love with Bob.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Dylan, a new character, is being conceived here.
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Bob is secretly in love with Alice, but he's seeing Eve.&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Eve is in-between, she loves both Alice and Bob, she can't help it.&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This doesn't make much sense...&lt;/p&gt;
&lt;p&gt;And Github's embedded Markdown  to HTML converter chooses some similar
broken semantics. If one writes bullets on different levels, it shouldn't
be meaningless.&lt;/p&gt;
&lt;p&gt;Also, on Github, if you write&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* 1
  * 2
    * 3
      * 4
        * 5
          * 6
            * 7
              * 8
                * 9
                  * 10
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then 2 and 3 are on the same level, as for 4 and 5, 6 and 7, and 8 and 9.
1 and 10 are on their own. And if you extract 2 and 3, meaning&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  * 2
    * 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
then 2 and 3 are not on the same level anymore! 
See for yourself:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;raw version: &lt;a href=&quot;https://raw.github.com/pw374/sandbox/master/mad-lists.md&quot;&gt;https://raw.github.com/pw374/sandbox/master/mad-lists.md&lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;rendered-by-Github version: &lt;a href=&quot;https://github.com/pw374/sandbox/blob/master/mad-lists.md&quot;&gt;https://github.com/pw374/sandbox/blob/master/mad-lists.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With OMD, hopefully, there is a deterministic meaning for each level of indentation. The list where there were Alice, Bob and Eve is converted to this to the least insane semantics I could think of.&lt;/p&gt;
&lt;p&gt;The idea  is that, since Eve  is neither on  the same level as  Bob or
Alice, Eve should be in a new list (because, obviously, she's the only
one on that  level anyway). So she  is in a new list.  And since she's
not on a deeper level than Bob, she shouldn't be on a sub-list of his.
But  she is  on a  deeper level  than Alice,  so she  has to  be  on a
sub-list of hers. So, here is the HTML that OMD produces:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
 &amp;lt;li&amp;gt;Alice is falling in love with Bob.
  &amp;lt;ul&amp;gt;
   &amp;lt;li&amp;gt;Bob is secretly in love with Alice, but he&amp;amp;apos;s seeing Eve.
   &amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
  &amp;lt;ul&amp;gt;
   &amp;lt;li&amp;gt;Eve is in-between, she loves both Alice and Bob, she can&amp;amp;apos;t help it.
   &amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
 &amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Oh,  you might  have  noticed  that OMD  converts  quotes to  &lt;code&gt;&amp;amp;apos;&lt;/code&gt;
because otherwise I  would need to differentiate when  they have to be
converted from when it's optional.&lt;/p&gt;
&lt;h3 id=&quot;Implementation&quot;&gt; Implementation&lt;/h3&gt;
&lt;p&gt;Pandoc's documentation says&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
In contrast to most existing tools for converting markdown to HTML,
which use regex substitutions, Pandoc has a modular design: it
consists of a set of readers, which parse text in a given format and
produce a native representation of the document, and a set of writers,
which convert this native representation into a target format.
Thus, adding an input or output format requires only adding a reader
or writer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Come on,  most tools are using regular  expressions substitutions?!  I
can only imagine the nightmare that  it must be to implement and debug
such an implementation  -- no wait, I can't because  I just don't want
to imagine such a nightmare.&lt;/p&gt;
&lt;p&gt;I used functions and function calls, a lot of them are tail recursive,
not  all of  them but  then it  means  I don't  need them  to be  tail
recursive, and  those functions  basically take a  list of  tokens and
return a  new list  with possibly fewer  tokens and the  expression to
which the missing ones were converted into.&lt;/p&gt;
&lt;p&gt;So far, in version 0.4 (which is  not released yet at the time I write
this), there's a little less than  8k lines of pure OCaml code.  (Note
that I didn't write &amp;quot;pure functional&amp;quot;, I wrote &amp;quot;pure OCaml&amp;quot;.)&lt;/p&gt;
&lt;p&gt;OMD is an  open-source free and libre software  library that any OCaml
developer can use  (hopefully quite easily since it  doesn't depend on
anything else  that the standard  OCaml compiler and library).  And of
course, it's also  a tool for any one who write  Markdown and wants it
to be  converted (quickly)  to HTML.  OMD, so far,  is about  10 times
faster than  Pandoc, and  I didn't  even make any  efforts to  make it
fast.&lt;/p&gt;
&lt;h4 id=&quot;Compatibility&quot;&gt; Compatibility&lt;/h4&gt;
&lt;p&gt;OMD has been developed using OCaml 4.0.1, &lt;a href=&quot;https://github.com/pw374/omd/issues/19&quot;&gt;Christophe Troestler made
me make it compatible with OCaml
3.12.1&lt;/a&gt;.  Then I guess it
might work with older version of OCaml but it's not certain (mainly
because OCaml's standard library has slightly changed, as I think I
don't use any language features that were introduced in 3.12 or 4.0).&lt;/p&gt;
&lt;p&gt;By  the way,  thank  you  Christophe for  your  support, interest  and
contributions to OMD :-)&lt;/p&gt;
&lt;h3 id=&quot;FutureofOMD&quot;&gt; Future of OMD&lt;/h3&gt;
&lt;p&gt;OMD  already is  in OPAM.   A  very stable  version of  OMD should  be
released soon.   As a  tool, it takes  Markdown as input  and produces
HTML as output.   A Markdown backend has been  freshly implemented, so
you can output  Markdown as well, which is  quite useful for debugging
or if you  want to know how many iterations you  need before you reach
the fix  point. You  can also  output &amp;quot;text&amp;quot;, in  the sense  that it's
basically the HTML  without the HTML tags, so  it's very non-formatted
text.  There  also are  options to output  HTML table of  contents and
parametrise their depths.&lt;/p&gt;
&lt;h3 id=&quot;OMDandOCamlorg&quot;&gt; OMD and OCaml.org&lt;/h3&gt;
&lt;p&gt;We    are    at   OCaml    Labs    making    a    new   website    for
&lt;a href=&quot;http://ocaml.org&quot;&gt;ocaml.org&lt;/a&gt;.   The  design   is  being  provided  by
&lt;a href=&quot;http://www.onespacemedia.com&quot;&gt;onespacemedia&lt;/a&gt;.    At   the  time   I'm
writing  these  lines, I'm  using  the  HTML/CSS/JS  for the  upcoming
OCaml.org to style my new Github-hosted website, so I can play with it
&lt;em&gt;more&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Most pages will be written in Markdown instead of HTML, so that people
of the OCaml community may contribute to it in a more convenient way.&lt;/p&gt;
&lt;p&gt;And of course, that means that OMD will be used for OCaml.org.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;started on 2013-09-05 22:31:26+01:00, (re)generated on 2013-09-12 16:36:22+01:00
&lt;/em&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2013-09-12T15:36:22+00:00</dc:date>
	<dc:creator>Philippe Wang</dc:creator>
</item>
<item rdf:about="http://hh360.user.srcf.net/blog/?p=153">
	<title>Heidi Howard: OCaml Development in Vim</title>
	<link>http://hh360.user.srcf.net/blog/2013/09/ocaml-development-in-vim/</link>
	<content:encoded>&lt;p&gt;This is a quick run-through of how I set up my development environment in vim:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Install pathogen.vim&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;bash&quot;&gt;&lt;span&gt;mkdir&lt;/span&gt; &lt;span&gt;-p&lt;/span&gt; ~&lt;span&gt;/&lt;/span&gt;.vim&lt;span&gt;/&lt;/span&gt;autoload ~&lt;span&gt;/&lt;/span&gt;.vim&lt;span&gt;/&lt;/span&gt;bundle; \
curl &lt;span&gt;-Sso&lt;/span&gt; ~&lt;span&gt;/&lt;/span&gt;.vim&lt;span&gt;/&lt;/span&gt;autoload&lt;span&gt;/&lt;/span&gt;pathogen.vim \
    https:&lt;span&gt;//&lt;/span&gt;raw.github.com&lt;span&gt;/&lt;/span&gt;tpope&lt;span&gt;/&lt;/span&gt;vim-pathogen&lt;span&gt;/&lt;/span&gt;master&lt;span&gt;/&lt;/span&gt;autoload&lt;span&gt;/&lt;/span&gt;pathogen.vim&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Add the following to ~/.vimrc:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;vim&quot;&gt;&lt;span&gt;execute&lt;/span&gt; pathogen#infect&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;syntax&lt;/span&gt; &lt;span&gt;on&lt;/span&gt;
&lt;span&gt;filetype&lt;/span&gt; &lt;span&gt;plugin&lt;/span&gt; &lt;span&gt;indent&lt;/span&gt; &lt;span&gt;on&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Install Syntastic &lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;bash&quot;&gt;&lt;span&gt;cd&lt;/span&gt; ~&lt;span&gt;/&lt;/span&gt;.vim&lt;span&gt;/&lt;/span&gt;bundle
&lt;span&gt;git clone&lt;/span&gt; https:&lt;span&gt;//&lt;/span&gt;github.com&lt;span&gt;/&lt;/span&gt;scrooloose&lt;span&gt;/&lt;/span&gt;syntastic.git&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Then quit vim and used :Helptags to check installs so far have worked.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Install Merlin&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;bash&quot;&gt;opam switch 4.01.0dev+trunk
opam update
opam upgrade
opam &lt;span&gt;install&lt;/span&gt; merlin&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Add the following to ~/.vimrc&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;vim&quot;&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;set&lt;/span&gt; &lt;span&gt;rtp&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;=&lt;span&gt;~/.&lt;/span&gt;opam&lt;span&gt;/&lt;/span&gt;4&lt;span&gt;.&lt;/span&gt;01&lt;span&gt;.&lt;/span&gt;0dev&lt;span&gt;+&lt;/span&gt;trunk&lt;span&gt;/&lt;/span&gt;share&lt;span&gt;/&lt;/span&gt;ocamlmerlin&lt;span&gt;/&lt;/span&gt;vim
&lt;span&gt;:&lt;/span&gt;&lt;span&gt;set&lt;/span&gt; &lt;span&gt;rtp&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;=&lt;span&gt;~/.&lt;/span&gt;opam&lt;span&gt;/&lt;/span&gt;4&lt;span&gt;.&lt;/span&gt;01&lt;span&gt;.&lt;/span&gt;0dev&lt;span&gt;+&lt;/span&gt;trunk&lt;span&gt;/&lt;/span&gt;share&lt;span&gt;/&lt;/span&gt;ocamlmerlin&lt;span&gt;/&lt;/span&gt;vimbufsync
&lt;span&gt;let&lt;/span&gt; g&lt;span&gt;:&lt;/span&gt;syntastic_ocaml_checkers=&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;'merlin'&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;:SyntasticInfo will return a list of syntax checkers available to Syntastic, check that this now includes merlin&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Install OCP Indent&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;bash&quot;&gt;opam &lt;span&gt;install&lt;/span&gt; ocp-indent&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Add the following to ~/.vimrc&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;vim&quot;&gt;&lt;span&gt;autocmd&lt;/span&gt; &lt;span&gt;FileType&lt;/span&gt; ocaml source &lt;span&gt;/&lt;/span&gt;home&lt;span&gt;/&lt;/span&gt;heidi&lt;span&gt;-&lt;/span&gt;ann&lt;span&gt;/.&lt;/span&gt;opam&lt;span&gt;/&lt;/span&gt;4&lt;span&gt;.&lt;/span&gt;01&lt;span&gt;.&lt;/span&gt;0dev&lt;span&gt;+&lt;/span&gt;trunk&lt;span&gt;/&lt;/span&gt;share&lt;span&gt;/&lt;/span&gt;typerex&lt;span&gt;/&lt;/span&gt;ocp&lt;span&gt;-&lt;/span&gt;&lt;span&gt;indent&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;ocp&lt;span&gt;-&lt;/span&gt;&lt;span&gt;indent&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;vim&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2013-09-09T07:51:03+00:00</dc:date>
</item>
<item rdf:about="http://anil.recoil.org/2013/09/09/ocamlot-autotriaging">
	<title>Anil Madhavapeddy: OCamlot--exploring the edges of OPAM packages</title>
	<link>http://anil.recoil.org/2013/09/09/ocamlot-autotriaging.html</link>
	<content:encoded>&lt;p&gt;The new release of OCaml (4.01.0) was just &lt;a href=&quot;https://sympa.inria.fr/sympa/arc/caml-list/2013-09/msg00173.html&quot;&gt;announced&lt;/a&gt;! The runup to a major release like this is normally a frantic time to test that your favourite applications don&amp;#8217;t break unexpectedly due to some incompatible language feature. This release cycle has a little different though, as we&amp;#8217;ve been working hard on using the &lt;a href=&quot;http://opam.ocamlpro.com&quot;&gt;OPAM&lt;/a&gt; package database to build an online regression testing infrastructure to mechanize much of this process.&lt;/p&gt;

&lt;p&gt;I wanted to share some of what OCamlot does today, some of the results from about 3 months worth of runs that may help OCaml package maintainers, and finally where we&amp;#8217;re going with future developments. This work has been done in collaboration with &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/people/sheets.html&quot;&gt;David Sheets&lt;/a&gt; (who built the OCamlot daemon) and the OPAM team ably led by &lt;a href=&quot;http://gazagnaire.org&quot;&gt;Thomas Gazagnaire&lt;/a&gt; at &lt;a href=&quot;http://ocamlpro.com&quot;&gt;OCamlPro&lt;/a&gt;. We&amp;#8217;ve also had a lot of help from &lt;a href=&quot;https://github.com/diml&quot;&gt;Jeremie Dimino&lt;/a&gt; and &lt;a href=&quot;https://github.com/ysulsky&quot;&gt;Yury Sulsky&lt;/a&gt; from Jane Street and &lt;a href=&quot;http://dave.recoil.org&quot;&gt;Dave Scott&lt;/a&gt; and &lt;a href=&quot;http://jon.recoil.org&quot;&gt;Jon Ludlam&lt;/a&gt; from Citrix acting as guinea pigs for their respective regular releases of the &lt;a href=&quot;https://github.com/janestreet&quot;&gt;Core&lt;/a&gt; and &lt;a href=&quot;https://github.com/xapi-project&quot;&gt;Xen/XAPI&lt;/a&gt; releases to OPAM.&lt;/p&gt;

&lt;h2 id=&quot;towards_a_truely_portable_ocaml&quot;&gt;Towards a truely portable OCaml&lt;/h2&gt;

&lt;p&gt;The upstream OCaml toolchain is built on very UNIX-like principles, with a number of command-line tools that form a build pipeline. This process usually ends with linking the intermediate object files with a &lt;a href=&quot;https://github.com/ocaml/ocaml/tree/trunk/byterun&quot;&gt;runtime library&lt;/a&gt; that provides the garbage collector and other intrinsic OS functions.&lt;/p&gt;

&lt;p&gt;Given these raw compiler tools, it&amp;#8217;s very easy to compile OCaml into all sorts of weird and wonderful architectures. We&amp;#8217;ve seen it run on &lt;a href=&quot;http://www.algo-prog.info/ocaml_for_pic/web/index.php&quot;&gt;8-bit PICs&lt;/a&gt;, several efficient Javascript backends (originally &lt;a href=&quot;http://jaked.github.io/ocamljs/&quot;&gt;ocamljs&lt;/a&gt; and more recently &lt;a href=&quot;http://ocsigen.org/js_of_ocaml&quot;&gt;js_of_ocaml&lt;/a&gt;), and of course my own &lt;a href=&quot;http://openmirage.org&quot;&gt;Mirage&lt;/a&gt; Xen unikernel.&lt;/p&gt;

&lt;p&gt;While the compiler tools themselves are quite portable and work on almost any UNIX-like system, the build system scaffolding around third-party packages is less portable. Some features such as C bindings often contribute to build breakage on some less-used operating systems such as FreeBSD or OpenBSD, as they usually require probing for header file locations or adding custom &lt;code&gt;CFLAGS&lt;/code&gt; before building.&lt;/p&gt;
&lt;table align=&quot;center&quot; width=&quot;90%&quot;&gt;
&lt;tr&gt;
&lt;td width=&quot;30%&quot; class=&quot;bimg&quot;&gt;&lt;a href=&quot;http://anil.recoil.org/images/dreamplug-nest-1.jpg&quot;&gt;&lt;img border=&quot;0&quot; width=&quot;200&quot; src=&quot;http://anil.recoil.org/images/dreamplug-nest-1-thumb.jpg&quot; /&gt;&lt;/a&gt;&lt;br /&gt;Every Internet of Things starts with a tangled pile of ARM Dreamplugs.&lt;/td&gt;
&lt;td width=&quot;30%&quot; class=&quot;bimg&quot;&gt;&lt;a href=&quot;http://anil.recoil.org/images/sparc-macppc-openbsd-1.jpg&quot;&gt;&lt;img border=&quot;0&quot; width=&quot;200&quot; src=&quot;http://anil.recoil.org/images/sparc-macppc-openbsd-1-thumb.jpg&quot; /&gt;&lt;/a&gt;&lt;br /&gt;And in our server room, venerable Sparc and PowerPC G4 OpenBSD boxen still live.&lt;/td&gt;
&lt;td width=&quot;30%&quot; class=&quot;bimg&quot;&gt;&lt;a href=&quot;http://anil.recoil.org/images/macppc-desktop-1.jpg&quot;&gt;&lt;img border=&quot;0&quot; width=&quot;200&quot; src=&quot;http://anil.recoil.org/images/macppc-desktop-1-thumb.jpg&quot; /&gt;&lt;/a&gt;&lt;br /&gt;Finding older machines is getting tough, but here's &lt;a href=&quot;http://dave.recoil.org&quot;&gt;Dave's&lt;/a&gt; old iMac G5 running Linux.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Most OCaml developers use x86-based machines and so foreign architectures also get less day-to-day testing (OCaml has superb support for fast native code compilation on ARM, PowerPC, Sparc32, and we&amp;#8217;re working on MIPS64 here as part of the &lt;a href=&quot;http://www.cl.cam.ac.uk/research/security/ctsrd/cheri.html&quot;&gt;CHERI&lt;/a&gt; project).&lt;/p&gt;

&lt;p&gt;We want to make sure that OCaml and its package ecosystem works just as well in the embedded ecosystem as well as it does on vanilla x86 Linux. This includes running on my Linux iMac G5, my &lt;a href=&quot;https://wiki.freebsd.org/FreeBSD/arm/Raspberry%20Pi&quot;&gt;FreeBSD Raspberry Pi&lt;/a&gt;, my &lt;a href=&quot;http://www.openbsd.org/beagle.html&quot;&gt;OpenBSD Pandaboard&lt;/a&gt;, or even on a bytecode-only architecture like an &lt;a href=&quot;http://www.openbsd.org/sparc64.html&quot;&gt;OpenBSD/Sparc64&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the longer term, this paves the way to reliable cross-compiled packages for Windows, &lt;a href=&quot;https://github.com/vouillon/ocaml-android&quot;&gt;Android&lt;/a&gt; and &lt;a href=&quot;http://psellos.com/ocaml/compile-to-iphone.html&quot;&gt;iPhone&lt;/a&gt; (all of which have OCaml ports, but aren&amp;#8217;t heavily tested with the full package database). The only practical way to get started on this is by building an automated test infrastructure for OCaml that explores the feature matrix (which eerily for me, happened in the early days of Xen too, via &lt;a href=&quot;http://blogs.citrix.com/2013/08/30/xenserver-automated-testing-and-lab-orchestration-introducing-xenrt/&quot;&gt;XenRT&lt;/a&gt; to stabilize the hypervisor).&lt;/p&gt;

&lt;h3 id=&quot;why_not_jenkins_or_travis&quot;&gt;Why not Jenkins or Travis?&lt;/h3&gt;

&lt;p&gt;When we first started hacking on the OPAM testing infrastructure earlier this year, I maintained a local &lt;a href=&quot;http://jenkins-ci.org&quot;&gt;Jenkins&lt;/a&gt; installation that monitored the repository. While Jenkins is a superb tool for many continuous integration tasks, it fell over badly when trying to use it on the non-x86 and non-Linux (or Windows) operating systems. Jenkins requires a full Java runtime stack to be available on each of the client machines, which was taking up more time to get up and running than a simple OCaml-based client and server that could compile to both portable bytecode or fast native code.&lt;/p&gt;

&lt;p&gt;The other difficulty with OPAM is selecting which packages actually need to be tested, as it has a constraint-based package solver that supports expressive forwards and backwards version restrictions. While basic tests of the latest packages worked with Jenkins, we needed to increasingly customize it to automate interfacing directly with the OPAM libraries and calculating test schedules based on incoming change requests.&lt;/p&gt;

&lt;p&gt;Another factor that ruled out depending on hosted services such as &lt;a href=&quot;https://travis-ci.org&quot;&gt;Travis&lt;/a&gt; is that they tend to support x86-only architectures, whereas we really want to test the full spectrum of CPU variants supported by OCaml. This doesn&amp;#8217;t mean that there&amp;#8217;s no place for Travis of course, and in fact Mike Lin has already &lt;a href=&quot;http://blog.mlin.net/2013/02/testing-ocaml-projects-on-travis-ci.html&quot;&gt;made this work&lt;/a&gt; with OPAM.&lt;/p&gt;

&lt;p&gt;For our full testing needs though, &lt;a href=&quot;https://github.com/ocamllabs/ocamlot&quot;&gt;OCamlot&lt;/a&gt; was born: an OCaml client and server system which coordinates different versions of the compiler, architectures and OPAM versions and records the results for triage and fixing issues.&lt;/p&gt;

&lt;h3 id=&quot;running_ocamlot&quot;&gt;Running OCamlot&lt;/h3&gt;

&lt;p&gt;The latest alpha release of OCamlot is pretty straightforward to run locally, if you are so inclined. First start a server process:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone git://github.com/ocamllabs/ocamlot
$ cd ocamlot
$ ./install_deps.sh
$ oasis setup
# (edit lib/config.ml if you need to change ports)
$ make
$ ./_build/lib/ocamlot_cmd.native --help
$ ./_build/lib/ocamlot_cmd.native serve&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The server listens on localhost only by default, and normally an SSL-to-TCP proxy is deployed to listen for external connections (I use &lt;a href=&quot;https://github.com/bumptech/stud&quot;&gt;stud&lt;/a&gt;, which is fast and easy to configure).&lt;/p&gt;

&lt;p&gt;The OCamlot clients require a local compilation of OCaml, and they autodetect their local CPU architecture and operating system. I&amp;#8217;ve put a &lt;a href=&quot;https://gist.github.com/avsm/6393649&quot;&gt;gist script&lt;/a&gt; together that automates this on most Linux and BSD variants. Just customize the top variables (set &lt;code&gt;MAKE&lt;/code&gt; to &lt;code&gt;gmake&lt;/code&gt; under BSD) and set the hostname to your server process.&lt;/p&gt;

&lt;h3 id=&quot;the_results_repository_and_autotriage&quot;&gt;The results repository and auto-triage&lt;/h3&gt;

&lt;p&gt;Once the client is running, the server dispatches tasks from its test matrix, which is calculated from the OPAM package repository. The server maintains a &lt;a href=&quot;https://github.com/ocamlot/ocamlot-state&quot;&gt;results repository&lt;/a&gt;, which is a Git filesystem database that records the build results and logs via an s-expression per task. It also uses &lt;a href=&quot;https://github.com/mirage/ocaml-cohttp&quot;&gt;Cohttp&lt;/a&gt; to serve up the results for a web browser.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s very convenient using Git repositories like this since we can use GitHub (or any other Git host) to coordinate and record results, and restart the server without needing any local state. So convenient, in fact, that Thomas and I have been working on a more formal engine for this called &lt;a href=&quot;https://github.com/samoht/irminsule&quot;&gt;Irminsule&lt;/a&gt; (more on that in a later post, though).&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s almost unheard of to have a full OCamlot run go by without some errors, and so David put together the &lt;code&gt;ocamlot triage&lt;/code&gt; command. This takes the state repository and runs a set of regular expressions over it to classify them into common errors. The full file is &lt;a href=&quot;https://github.com/ocamllabs/ocamlot/blob/master/lib/result.ml&quot;&gt;here&lt;/a&gt;, but an excerpt should give you an idea of what we look for:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;	&lt;span class=&quot;c&quot;&gt;(* ordered minor to severe *)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;analysis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solver&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solver_error&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dep&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;analysis&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Transient&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transient_error&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;system_error&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Meta&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meta_error&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Ext_dep&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ext_dep_error&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Build&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build_error&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Multiple&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;analysis&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sexp&lt;/span&gt;
	
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The errors are ordered by severity to aid in color highlighting. They start with OPAM solver failures and dependency failures (e.g. due to trying to build a package that requires a specific OCaml version that isn&amp;#8217;t available), and move onto missing package dependencies or system libraris.&lt;/p&gt;

&lt;h2 id=&quot;testing_the_run_up_to_ocaml_401&quot;&gt;Testing the run up to OCaml 4.01&lt;/h2&gt;

&lt;p&gt;Of course, running all these tests is useless without taking action on the results. I&amp;#8217;ve been keeping track of them in &lt;a href=&quot;https://github.com/OCamlPro/opam-repository/issues/1029&quot;&gt;issue #1029&lt;/a&gt;. The nice thing about GitHub issues is that when this bug is referenced in commits (even in other repositories) a cross-reference shows up on that webpage and lets everything be tracked nicely.&lt;/p&gt;

&lt;p&gt;So what were the most common failures in the runup to 4.01, and what should you avoid when writing your own code?&lt;/p&gt;

&lt;h3 id=&quot;different_standard_library_module_signatures&quot;&gt;Different standard library module signatures&lt;/h3&gt;

&lt;p&gt;There have been a few changes to some of the functor signatures in the standard library, such as adding a &lt;code&gt;find&lt;/code&gt; function to Set (&lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=5864&quot;&gt;mantis #5864&lt;/a&gt;). A third-party library that tries to match the functor signature will fail to compile with a type error, such as this one below for &lt;a href=&quot;http://anil.recoil.org/feeds/atom-ocaml.xml&quot;&gt;zipperposition.0.2&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Error: The implementation src/ptset.ml
       does not match the interface src/ptset.cmi:
       ...
       In module Big:
       The field `find' is required but not provided&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The relevant code in &lt;code&gt;zipperposition&lt;/code&gt; makes it clear what the problem is:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;	&lt;span class=&quot;c&quot;&gt;(* Big-endian Patricia trees *)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Big&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intersect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This particular bug was &lt;a href=&quot;https://github.com/c-cube/zipperposition/issues/1&quot;&gt;reported upstream&lt;/a&gt;, and the fix requires implementing the &lt;code&gt;find&lt;/code&gt; function for the Patricia-tree-based &lt;code&gt;Set&lt;/code&gt;. Since the OPAM package will always be broken on OCaml 4.01, it was marked with a &lt;a href=&quot;https://github.com/ocamlpro/opam-repository/commit/e45530205987f67d4316a958446d3dcc954b19ec&quot;&gt;compiler version constraint&lt;/a&gt; to prevent it being selected for installation under that compiler. When a new version with the fix is uploaded to OPAM, it will always be selected in preference to this broken one.&lt;/p&gt;

&lt;p&gt;One other 4.01 change that temporarily broke most of the bigger networking libraries such as &lt;a href=&quot;https://github.com/janestreet/core&quot;&gt;Core&lt;/a&gt;, &lt;a href=&quot;https://ocsigen.org/lwt&quot;&gt;Lwt&lt;/a&gt; and &lt;a href=&quot;http://batteries.forge.ocamlcore.org&quot;&gt;Batteries&lt;/a&gt; was the addition of the &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=5568&quot;&gt;close-on-exec&lt;/a&gt; flag to the &lt;code&gt;Unix&lt;/code&gt; module. This change only affects upstream packages that redefine the UNIX module for their own purposes (such as adding an asynchronous I/O monad as Lwt does), hence it affects the standard library replacement packages.&lt;/p&gt;

&lt;p&gt;The fix here was to locally add patches into the relevant OPAM packages to immediately unbreak things when the fix when into the 4.01 branch of the compiler, and notify upstream maintainers to release new versions of their projects. There&amp;#8217;s a subtle problem here: when a patch such as this goes into an unreleased branch of the compiler (such as &lt;code&gt;4.01.0dev&lt;/code&gt;), it&amp;#8217;s hard to reliably detect if the user has got the very latest version of the compiler or not. If you do have problems like this in the future, try recompiling via &lt;code&gt;opam switch reinstall &amp;lt;version&amp;gt;&lt;/code&gt; to the latest branch.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s very useful to be able to drop in bleeding-edge compiler tools into the OPAM repository using compiler constraints like this. For an example, see Alain Frisch&amp;#8217;s &lt;a href=&quot;https://github.com/OCamlPro/opam-repository/blob/master/packages/ppx_tools.0.1/opam&quot;&gt;ppx_tools&lt;/a&gt;, that require the very latest 4.02dev trunk release to compile his new extension-points feature.&lt;/p&gt;

&lt;h3 id=&quot;multiple_object_definitions&quot;&gt;Multiple object definitions&lt;/h3&gt;

&lt;p&gt;OCaml 4.01 also restricts multiple method definitions with the same name in the same object. This leaves only inheritance as the way to override method names, but some packages such as OCamlnet and Mlorg had minor uses of the old mechanism.&lt;/p&gt;

&lt;p&gt;You can see this by using &lt;code&gt;opam switch&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ opam switch 4.00.1
$ eval `opam config env`
$ ocaml
# object method x = 1 method x = 2 end;;
- : &amp;lt; x : int &amp;gt; = &amp;lt;obj&amp;gt;
$ opam switch 4.01.0
$ eval `opam config env`
$ ocaml
# object method x = 1 method x = 2 end;;
Error: The method `x' has multiple definitions in this object&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;new_warnings_and_the_dreaded_warningsaserrors&quot;&gt;New warnings, and the dreaded warnings-as-errors&lt;/h3&gt;

&lt;p&gt;After a decade of being deprecated, the &lt;code&gt;(or)&lt;/code&gt; and &lt;code&gt;(&amp;amp;)&lt;/code&gt; operators finally had a warning turned on by default.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ocaml
# true or false;;
Warning 3: deprecated feature: operator (or); you should use (||) instead
- : bool = true&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This wouldn&amp;#8217;t normally be so bad, except that a surprising number of released packages also turn warnings into fatal errors (by using the &lt;code&gt;-w @&lt;/code&gt; flags explained in the &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml/comp.html&quot;&gt;manual&lt;/a&gt;). Warnings-as-errors is extremely useful when &lt;em&gt;developing&lt;/em&gt; code but is rather harmful in released code, since a future compiler can choose to emit new warnings that aren&amp;#8217;t necessarily fatal bugs.&lt;/p&gt;

&lt;p&gt;Packages that failed like this include ocamlgraph, spotlib, quickcheck, OPA, Lablgtk-extras and many more. Please do make an effort to not leave this option turned on in your packages, or else it makes life more difficult for testing your code on bleeding edge versions of the compiler in the future.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s worth noting here that OCaml 4.01 has introduced a fair number of new and very useful warnings across a number of areas, mainly to do with detecting unexpected ambiguation or shadowing of values. I&amp;#8217;ll cover more on these in a future post about the new 4.01 goodies.&lt;/p&gt;

&lt;h3 id=&quot;external_system_dependencies&quot;&gt;External system dependencies&lt;/h3&gt;

&lt;p&gt;While there any many packages in OPAM that are pure OCaml, there are also a substantial number that require other system tools to be installed. The Lablgtk GUI library obviously requires the C &lt;code&gt;gtk&lt;/code&gt; library to be installed.&lt;/p&gt;

&lt;p&gt;Determining if these libraries are installed on a particular OS is well beyond the scope of OPAM, as there are almost as many package managers as there are operating systems. However, it&amp;#8217;s important for automated testing and user-friendly error messages to have some notion of detecting if the environment is ready for the OCaml package or not.&lt;/p&gt;

&lt;p&gt;We&amp;#8217;re solving this by using a &lt;code&gt;depexts&lt;/code&gt; field in OPAM that consists of a set of tags that identify OS-specific packages that need to be present. A separate script can query these tags from OPAM and do the OS-specific tests or installation.&lt;/p&gt;

&lt;p&gt;For example, here&amp;#8217;s the &lt;code&gt;sqlite3-ocaml&lt;/code&gt; OPAM description:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;opam-version: &amp;quot;1&amp;quot;
maintainer: &amp;quot;markus.mottl@gmail.com&amp;quot;
build: [
  [&amp;quot;ocaml&amp;quot; &amp;quot;setup.ml&amp;quot; &amp;quot;-configure&amp;quot;]
  [&amp;quot;ocaml&amp;quot; &amp;quot;setup.ml&amp;quot; &amp;quot;-build&amp;quot;]
  [&amp;quot;ocaml&amp;quot; &amp;quot;setup.ml&amp;quot; &amp;quot;-install&amp;quot;]
]
remove: [ [&amp;quot;ocamlfind&amp;quot; &amp;quot;remove&amp;quot; &amp;quot;sqlite3&amp;quot;] ]
depends: [&amp;quot;ocamlfind&amp;quot;]
depexts: [
  [ [&amp;quot;debian&amp;quot;  ] [ &amp;quot;libsqlite3-dev&amp;quot;]    ]
  [ [&amp;quot;freebsd&amp;quot; ] [ &amp;quot;database/sqlite3&amp;quot;]  ]
  [ [&amp;quot;openbsd&amp;quot; ] [ &amp;quot;database/sqlite3&amp;quot;]  ]
]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;depexts&lt;/code&gt; field here lists APT package for Debian, and the ports tree locations for FreeBSD and OpenBSD. It could also list more specialised tags for particular versions of an OS. You can query this from OPAM as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ opam install -e debian sqlite3-ocaml
libsqlite3-dev
$ opam install -e openbsd sqlite3-ocaml
database/sqlite3&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OCamlot therefore needs to query the &lt;code&gt;depexts&lt;/code&gt; field from the package and run the right &lt;code&gt;apt&lt;/code&gt; or &lt;code&gt;pkg_add&lt;/code&gt; commands. I&amp;#8217;ll write about this in more detail when it&amp;#8217;s fully baked, as we&amp;#8217;ve modified the semantics of the tag querying between OPAM 1.0 and OPAM 1.1 to make it easier to use in OCamlot.&lt;/p&gt;

&lt;h3 id=&quot;portable_shell_scripts&quot;&gt;Portable shell scripts&lt;/h3&gt;

&lt;p&gt;Once we&amp;#8217;ve gotten past the hurdle of the compiler version causing failures, there is the small matter of testing non-Linux operating systems, as well as non-x86 CPU architectures. The &lt;a href=&quot;https://github.com/OCamlPro/opam-repository/issues/1029&quot;&gt;#1029 overview&lt;/a&gt; lists many of these failures under the Portability section.&lt;/p&gt;
&lt;a href=&quot;http://www.openbsd.org&quot;&gt;&lt;img src=&quot;http://anil.recoil.org/images/ppuf200X181.gif&quot; /&gt;&lt;/a&gt;
&lt;p&gt;Damien Doligez made some excellent points about how to write &lt;a href=&quot;http://gallium.inria.fr/blog/portable-conditionals-in-makefiles/&quot;&gt;portable Makefiles&lt;/a&gt; that works across both GNU and BSD makes. This is why the carefully crafted OCaml Makefiles do not require GNU make to be installed when compiling on FreeBSD or OpenBSD (MacOS X gave up the fight a long time ago and installs GNU make as its default &lt;code&gt;make&lt;/code&gt; command).&lt;/p&gt;

&lt;p&gt;OPAM tries to help out BSD by providing a &lt;code&gt;make&lt;/code&gt; macro in &lt;code&gt;opam&lt;/code&gt; files that is substituted with either &lt;code&gt;&amp;quot;make&amp;quot;&lt;/code&gt; (by default) or &lt;code&gt;&amp;quot;gmake&amp;quot;&lt;/code&gt; (for BSD). While this works for for the toplevel invocation of the Makefile, it fails if the Makefile recursively invokes further targets without using the &lt;code&gt;$(MAKE)&lt;/code&gt; variable instead of directly calling the command. Patching these sorts of things is easy but tedious: see the &lt;a href=&quot;https://github.com/OCamlPro/opam-repository/blob/master/packages/facile.1.1/files/bsdmake.patch&quot;&gt;patchfile&lt;/a&gt; for the Facile constraint programming library for an example.&lt;/p&gt;

&lt;p&gt;The real problem here, of course, is that package maintainers cannot be reasonably expected to test their code on systems that they don&amp;#8217;t normally use&amp;#8211;if we demanded perfect portability to be present in the main OPAM repository, we would&amp;#8217;t get any submissions!&lt;/p&gt;

&lt;p&gt;OCamlot automates this nicely though, by finding lots of portability bugs automatically, and maintainers are by-and-large very responsive when we report the problem upstream.&lt;/p&gt;

&lt;h2 id=&quot;the_emerging_distributed_workflow&quot;&gt;The emerging distributed workflow&lt;/h2&gt;

&lt;p&gt;The big drawback to OCamlot in its current form is the amount of triage effort it puts on the OPAM maintainers. The package database has now exceeded 500 packages in just a short few months, and has over 1500 unique versions that all need build testing and more accurate constraints. The wider community has been &lt;em&gt;really&lt;/em&gt; keen to participate in helping with triage (just look at all the other people that leapt in on &lt;a href=&quot;https://github.com/OCamlPro/opam-repository/issues/1029&quot;&gt;bug #1029&lt;/a&gt;), so its our immediate priority to make OCamlot more transparent for people that want to use it to improve their own packages, and in the future also use it to test various hypotheses about all the available open-source OCaml code (see Jacques&amp;#8217; experiment with &lt;a href=&quot;http://gallium.inria.fr/blog/monomorphic_let/&quot;&gt;monomorphic let&lt;/a&gt; as an example of something that can benefit from wider automated compilation).&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ll talk more about how we&amp;#8217;re solving this in my upcoming &lt;a href=&quot;http://ocaml.org/meetings/ocaml/2013/&quot;&gt;OCaml 2013 Workshop&lt;/a&gt; talk about the Platform. I don&amp;#8217;t want spoil it too much, but it involves a lovely distributed Git workflow, an enhanced &lt;a href=&quot;https://github.com/OCamlPro/opam2web&quot;&gt;opam2web&lt;/a&gt;, and a brand new metadata overlay system for OPAM that lets us enhance the package database with extra information such as statistics, portability and test results, but without polluting the main Git repository with all this extra non-essential data.&lt;/p&gt;

&lt;p&gt;If you&amp;#8217;re really curious to know right now, then you can see the outline of the new system at Amir&amp;#8217;s &lt;a href=&quot;http://amirchaudhry.com/wireframe-demos-for-ocamlorg/&quot;&gt;new ocaml.org wireframes&lt;/a&gt; blog post, where Part III contains the continuous integration workflow. A lot of infrastructure work has gone into building all of this over the summer, and now it&amp;#8217;s all starting to be deployed in a very satisfying way&amp;#8230;&lt;/p&gt;</content:encoded>
	<dc:date>2013-09-08T23:00:00+00:00</dc:date>
</item>
<item rdf:about="http://hh360.user.srcf.net/blog/?p=25">
	<title>Heidi Howard: ICFP, CUFP &amp; OCaml2013</title>
	<link>http://hh360.user.srcf.net/blog/2013/08/icfp-cufp-ocaml2013/</link>
	<content:encoded>&lt;p&gt;I&amp;#8217;m busy planning my first trip across the Atlantic to attend ICFP, CUFP and OCaml 2013. Today, I&amp;#8217;ve been given the duty of &amp;#8220;live blogging&amp;#8221; the event, over at the &lt;a title=&quot;syslog&quot; href=&quot;http://www.syslog.cl.cam.ac.uk/&quot;&gt;syslog&lt;/a&gt;, the Cambridge Systems Research Group blog.&lt;/p&gt;
&lt;p&gt;My other job for the event is to improve the documentation for &lt;a href=&quot;http://janestreet.github.io/guide-async.html&quot;&gt;Janestreet&amp;#8217;s Async&lt;/a&gt; library. if anyone else is keen, I would love to organise a doc-a-thon to populate the .mli files&lt;/p&gt;</content:encoded>
	<dc:date>2013-08-28T20:05:23+00:00</dc:date>
</item>
<item rdf:about="http://openmirage.org/blog/introducing-vchan">
	<title>MirageOS: Introducing vchan</title>
	<link>http://openmirage.org/blog/introducing-vchan</link>
	<content:encoded>&lt;div&gt;
      &lt;p&gt;&lt;b&gt;In Theory&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Unless you are familiar with Xen's source code, there is little chance that you've ever heard of the &lt;b&gt;vchan&lt;/b&gt; library or protocol. Documentation about it is very scarce: a description can be found on vchan's &lt;a href=&quot;http://xenbits.xen.org/gitweb/?p=xen.git;a=blob;f=xen/include/public/io/libxenvchan.h;hb=HEAD&quot;&gt;public header file&lt;/a&gt;, that I quote here for convenience:&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;Originally borrowed from the &lt;a href=&quot;http://www.qubes-os.org&quot;&gt;Qubes OS Project&lt;/a&gt;, this code (i.e. libvchan) has been substantially rewritten [...] This is a library for inter-domain communication.  A standard Xen ring buffer is used, with a datagram-based interface built on top.  The grant reference and event channels are shared in XenStore under a user-specified path.&lt;/p&gt; &lt;/blockquote&gt;&lt;p&gt;This protocol uses shared memory for inter-domain communication, i.e. between two VMs residing in the same Xen host, and uses Xen's mechanisms -- more specifically, &lt;a href=&quot;http://www.informit.com/articles/article.aspx?p=1160234&amp;seqNum=3&quot;&gt;ring buffers&lt;/a&gt; and &lt;a href=&quot;http://xenbits.xen.org/gitweb/?p=xen.git;a=blob;f=tools/libxc/xenctrl.h;h=f2cebafc9ddd4815ffc73fcf9e0d292b1d4c91ff;hb=HEAD#l934&quot;&gt;event channels&lt;/a&gt; -- in order to achieve its aims. &lt;b&gt;Datagram-based interface&lt;/b&gt; simply means that the &lt;a href=&quot;http://xenbits.xen.org/gitweb/?p=xen.git;a=blob;f=tools/libvchan/libxenvchan.h;h=6365d36a06f8c8f56454724cefc4c2f1d39beba2;hb=HEAD&quot;&gt;interface&lt;/a&gt; resembles UDP, although there is support for stream based communication (like TCP) as well.&lt;/p&gt;&lt;p&gt;Over the last two months or so, I worked on a &lt;a href=&quot;http://github.com/mirage/ocaml-vchan&quot;&gt;pure OCaml implementation&lt;/a&gt; of this library, meaning that Mirage-based unikernels can now take full advantage of &lt;b&gt;vchan&lt;/b&gt; to communicate with neighboring VMs! If your endpoint -- a Linux VM or another unikernel -- is on the same host, it is much faster and more efficient to use vchan rather than the network stack (although unfortunately, it is currently incompatible with existing programs written against the &lt;code&gt;socket&lt;/code&gt; library under UNIX or the &lt;code&gt;Flow&lt;/code&gt; module of Mirage, although this will improve). It also provides a higher level of security compared to network sockets as messages will never leave the host's shared memory.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Building the vchan echo domain&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Provided that you have a Xen-enabled machine, do the following from dom0:&lt;/p&gt;&lt;div class=&quot;ocaml&quot;&gt;&lt;pre&gt;&lt;code&gt;opam install mirari mirage-xen mirage vchan
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will install the library and its dependencies. &lt;code&gt;mirari&lt;/code&gt; is necessary to build the &lt;b&gt;echo unikernel&lt;/b&gt;:&lt;/p&gt;&lt;div class=&quot;ocaml&quot;&gt;&lt;pre&gt;&lt;code&gt;git clone git&lt;span class=&quot;keyword2&quot;&gt;:&lt;/span&gt;//github.com/mirage/ocaml-vchan
cd test
mirari configure --xen --no-install
mirari build --xen
sudo mirari run --xen
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will boot a &lt;code&gt;vchan echo domain&lt;/code&gt; for dom0, with connection parameters stored in xenstore at &lt;code&gt;/local/domain/&amp;lt;domid&amp;gt;/data/vchan&lt;/code&gt;, where &lt;code&gt;&amp;lt;domid&amp;gt;&lt;/code&gt; is the domain id of the vchan echo domain. The echo domain is simply an unikernel hosting a vchan server accepting connections from dom0, and echo'ing everything that is sent to it.&lt;/p&gt;&lt;p&gt;The command &lt;code&gt;xl list&lt;/code&gt; will give you the domain id of the echo server.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Building the vchan CLI from Xen's sources&lt;/b&gt;&lt;/p&gt;&lt;p&gt;You can try it using a vchan client that can be found in Xen's sources at &lt;code&gt;tools/libvchan&lt;/code&gt;: Just type &lt;code&gt;make&lt;/code&gt; in this directory. It will compile the executable &lt;code&gt;vchan-node2&lt;/code&gt; that you can use to connect to our freshly created echo domain:&lt;/p&gt;&lt;div class=&quot;ocaml&quot;&gt;&lt;pre&gt;&lt;code&gt;./vchan-node2 client &lt;span class=&quot;keyword2&quot;&gt;&amp;lt;&lt;/span&gt;domid&lt;span class=&quot;keyword2&quot;&gt;&amp;gt;&lt;/span&gt;/local/domain/&lt;span class=&quot;keyword2&quot;&gt;&amp;lt;&lt;/span&gt;domid&lt;span class=&quot;keyword2&quot;&gt;&amp;gt;&lt;/span&gt;/data/vchan
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If everything goes well, what you type in there will be echoed.&lt;/p&gt;&lt;p&gt;You can obtain the full API documentation for &lt;b&gt;ocaml-vchan&lt;/b&gt; by doing a &lt;code&gt;cd ocaml-vchan &amp;amp;&amp;amp; make doc&lt;/code&gt;. If you are doing network programming under UNIX, vchan's interface will not surprise you. If you are already using vchan for a C project, you will see that the OCaml API is nearly identical to what you are used to.&lt;/p&gt;&lt;p&gt;Please let us know if you use or plan to use this library in any way! If you need tremedous speed or more security, this might fit your needs.&lt;/p&gt; 
   &lt;/div&gt;</content:encoded>
	<dc:date>2013-08-23T17:43:00+00:00</dc:date>
	<dc:creator>Vincent Bernardoff</dc:creator>
</item>
<item rdf:about="http://hh360.user.srcf.net/blog/?p=86">
	<title>Heidi Howard: Real World OCaml beta3 release</title>
	<link>http://hh360.user.srcf.net/blog/2013/08/real-world-ocaml-beta3-release/</link>
	<content:encoded>&lt;p&gt;Beta3 of RWO is now available: &lt;a href=&quot;https://realworldocaml.org/&quot;&gt;https://realworldocaml.org/&lt;/a&gt; and anil (one of the co-authors) comments on the release &lt;a href=&quot;http://anil.recoil.org/2013/08/06/real-world-ocaml-beta2.html&quot;&gt;http://anil.recoil.org/2013/08/06/real-world-ocaml-beta2.html&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;wp-caption aligncenter&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://realworldocaml.org/media/img/oreilly-cover.gif&quot; width=&quot;180&quot; height=&quot;236&quot; /&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Cover of RWO&lt;/p&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2013-08-19T10:39:34+00:00</dc:date>
</item>
<item rdf:about="http://openmirage.org/blog/oscon13-trip-report">
	<title>MirageOS: Mirage travels to OSCON'13: a trip report</title>
	<link>http://openmirage.org/blog/oscon13-trip-report</link>
	<content:encoded>&lt;div&gt;
      &lt;p&gt;Now that Mirage OS is rapidly converging on a &lt;a href=&quot;http://github.com/avsm/mirage/issues/102&quot;&gt;Developer Preview Release 1&lt;/a&gt;, we took it for a first public outing at &lt;a href=&quot;http://www.oscon.com/oscon2013/&quot;&gt;OSCON'13&lt;/a&gt;, the O'Reilly Open Source Conference. OSCON is in its 15th year now, and is a meeting place for developers, business people and investors. It was a great opportunity to show MirageOS off to some of the movers and shakers in the OSS world.&lt;/p&gt;&lt;p&gt;Partly because MirageOS is about synthesising extremely specialised guest kernels from high-level code, and partly because both Anil and I are constitutionally incapable of taking the easy way out, we self-hosted the slide deck on Mirage: after some last-minute hacking -- on content not Mirage I should add! -- we built a self-contained microkernel of the talk.&lt;/p&gt;&lt;p&gt;This was what you might call a &quot;full stack&quot; presentation: the custom microkernel (flawlessly!) ran a type-safe &lt;a href=&quot;https://github.com/mirage/mirage-platform/blob/master/xen/lib/netif.ml&quot;&gt;network device driver&lt;/a&gt;, OCaml &lt;a href=&quot;http://github.com/mirage/mirage-net&quot;&gt;TCP/IP stack&lt;/a&gt; supporting an OCaml &lt;a href=&quot;http://github.com/mirage/ocaml-cohttp&quot;&gt;HTTP&lt;/a&gt; framework that served slides rendered using &lt;a href=&quot;http://lab.hakim.se/reveal-js/&quot;&gt;reveal.js&lt;/a&gt;. The slide deck, including the turbo-boosted &lt;a href=&quot;http://www.youtube.com/watch?v=2Mx8Bd5JYyo&quot;&gt;screencast&lt;/a&gt; of the slide deck compilation, is hosted as another MirageOS virtual machine at &lt;a href=&quot;http://decks.openmirage.org/&quot;&gt;decks.openmirage.org&lt;/a&gt;. We hope to add more slide decks there soon, including resurrecting the tutorial! The source code for all this is in the &lt;a href=&quot;http://github.com/mirage/mirage-decks&quot;&gt;mirage-decks&lt;/a&gt; GitHub repo.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;h3-TheTalk&quot; class=&quot;anchor-toc&quot;&gt; The Talk&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The talk went down pretty well -- given we were in a graveyard slot on Friday after many people had left, attendance was fairly high (around 30-40), and the &lt;a href=&quot;http://www.oscon.com/oscon2013/public/schedule/detail/28956&quot;&gt;feedback scores&lt;/a&gt; have been positive (averaging 4.7/5) with comments including &quot;excellent content and well done&quot; and &quot;one of the most excited projects I heard about&quot; (though we are suspicious that just refers to Anil's usual high-energy presentation style...).&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;Probably the most interesting chat after the talk was with the Rust authors at Mozilla (&lt;a href=&quot;http://twitter.com/pcwalton&quot;&gt;@pcwalton&lt;/a&gt; and &lt;a href=&quot;https://github.com/brson&quot;&gt;@brson&lt;/a&gt;) about combining the Mirage &lt;a href=&quot;http://anil.recoil.org/papers/2013-asplos-mirage.pdf&quot;&gt;unikernel&lt;/a&gt; techniques with the &lt;a href=&quot;http://www.rust-lang.org&quot;&gt;Rust&lt;/a&gt; runtime. But perhaps the most surprising feedback was when Anil and I were stopped in the street while walking back from some well-earned sushi, by a cyclist who loudly declared that he'd really enjoyed the talk and thought it was a really exciting project -- never done something that achieved public acclaim from the streets before :)&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;h3-BookSigningandXen.org&quot; class=&quot;anchor-toc&quot;&gt; Book Signing and Xen.org&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Anil also took some time to sit in a book signing for his forthcoming &lt;a href=&quot;http://realworldocaml.org&quot;&gt;Real World OCaml&lt;/a&gt; O'Reilly book.  This is really important to making OCaml easier to learn, especially given that all the Mirage libraries are using it.  Most of the dev team (and especially thanks to &lt;a href=&quot;https://twitter.com/heidiann360&quot;&gt;Heidi Howard&lt;/a&gt; who bravely worked through really early alpha revisions) have been giving us feedback as the book is written, using the online commenting system.&lt;/p&gt;&lt;p&gt;The Xen.org booth was also huge, and we spent quite a while plotting the forthcoming Mirage/Xen/ARM backend. We're pretty much just waiting for the &lt;a href=&quot;http://cubieboard.org&quot;&gt;Cubieboard2&lt;/a&gt; kernel patches to be upstreamed (keep an eye &lt;a href=&quot;http://linux-sunxi.org/Main_Page&quot;&gt;here&lt;/a&gt;) so that we can boot Xen/ARM VMs on tiny ARM devices.  There's a full report about this on the &lt;a href=&quot;http://blog.xen.org/index.php/2013/07/31/the-xen-project-at-oscon/&quot;&gt;xen.org&lt;/a&gt; blog post about OSCon.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;h3-GaloisandHalVM&quot; class=&quot;anchor-toc&quot;&gt; Galois and HalVM&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We also stopped by the &lt;a href=&quot;http://corp.galois.com&quot;&gt;Galois&lt;/a&gt; to chat with &lt;a href=&quot;https://twitter.com/acwpdx&quot;&gt;Adam Wick&lt;/a&gt;, who is the leader of the &lt;a href=&quot;http://corp.galois.com/halvm&quot;&gt;HalVM&lt;/a&gt; project at Galois. This is a similar project to Mirage, but, since it's written in Haskell, has more of a focus on elegant compositional semantics rather than the more brutal performance and predictability that Mirage currently has at its lower levels.&lt;/p&gt;&lt;p&gt;The future of all this ultimately lies in making it easier for these multi-lingual unikernels to be managed and for all of them to communicate more easily, so we chatted about code sharing and common protocols (such as &lt;a href=&quot;https://github.com/vbmithr/ocaml-vchan&quot;&gt;vchan&lt;/a&gt;) to help interoperability. Expect to see more of this once our respective implementations get more stable.&lt;/p&gt;&lt;p&gt;All-in-all OSCON'13 was a fun event and definitely one that we look forward returning to with a more mature version of MirageOS, to build on the momentum begun this year!  Portland was an amazing host city too, but what happens in Portland, stays in Portland...&lt;/p&gt; 
   &lt;/div&gt;</content:encoded>
	<dc:date>2013-08-08T16:00:00+00:00</dc:date>
	<dc:creator>Richard Mortier</dc:creator>
</item>
<item rdf:about="http://anil.recoil.org/2013/08/06/real-world-ocaml-beta2">
	<title>Anil Madhavapeddy: Final Real World OCaml beta; the good, the bad and the ugly</title>
	<link>http://anil.recoil.org/2013/08/06/real-world-ocaml-beta2.html</link>
	<content:encoded>&lt;p&gt;The second and final public beta of Real World OCaml is now available: &lt;a href=&quot;https://realworldocaml.org&quot;&gt;https://realworldocaml.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Release notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Over 2,000 comments from proofreaders have been resolved. We realize that reading early content is hard work, and hugely appreciate the spirited feedback! The book is now a week away from being handed over to the O&amp;#8217;Reilly production team for copyediting, so the window for changes are limited after that. Comments reset between milestones and so beta2 is a clean slate; we&amp;#8217;re still working through some remaining older issues.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;The chapters on first-class modules, parsing with Menhir, and objects and classes have been significantly revised from beta1. Our thanks to Leo White for contributing significantly to the latter two chapters.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;All the code snippets and terminal outputs are now mechanically generated. The source code is as close to public domain as practical, at: &lt;a href=&quot;https://github.com/realworldocaml/examples&quot;&gt;https://github.com/realworldocaml/examples&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;The final version will have the installation chapter moved to be online only, and we intend to publish updates there to elaborate on installation and packaging mechanisms.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Exercises will be available after we go into production, and also only be available online. We really like the collaborative spirit of the commenting system, and will likely extend this to collecting exercises from our readers on an ongoing basis.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There&amp;#8217;s been quite a bit of feedback and conversation about the book, so this also seemed like a good point to checkpoint the process somewhat.&lt;/p&gt;

&lt;h2 id=&quot;crowd_sourcing_community_feedback&quot;&gt;Crowd sourcing community feedback&lt;/h2&gt;
&lt;a href=&quot;http://realworldocaml.org&quot;&gt;&lt;img align=&quot;right&quot; src=&quot;http://anil.recoil.org/images/oreilly-cover.gif&quot; /&gt;&lt;/a&gt;
&lt;p&gt;&lt;em&gt;Good&lt;/em&gt;: The decision to crowdsource feedback has been exhausting but very worthwhile, with over 2,200 &lt;a href=&quot;http://github.com/ocamllabs/rwo-comments&quot;&gt;comments&lt;/a&gt; posted (and over 2,000 resolved by us too!). O&amp;#8217;Reilly has a similar platform called &lt;a href=&quot;http://atlas.labs.oreilly.com&quot;&gt;Atlas&lt;/a&gt; that wasn&amp;#8217;t quite ready when we started our book, but I&amp;#8217;d highly encourage new authors to go down this route and not stick with a traditional editorial scheme.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s simply not possible for a small group of technical reviewers to notice as many errors as the wider community has. Having said this, it&amp;#8217;s interesting how much more focussed and critical the comments of our editor &lt;a href=&quot;http://radar.oreilly.com/andyo&quot;&gt;Andy Oram&lt;/a&gt; were when compared to most of the wider community feedback, so the commenting system is definitely a complement and not a replacement to the editorial process.&lt;/p&gt;

&lt;h3 id=&quot;the_github_requirement&quot;&gt;The GitHub requirement&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Bad&lt;/em&gt;: After the first beta, we got criticized on a &lt;a href=&quot;https://news.ycombinator.com/item?id=5893168&quot;&gt;Hacker News&lt;/a&gt; thread for passing around Github oAuth tokens without SSL. This was entirely my fault, and I corrected the site to be pure-SSL within 24 hours.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ugly&lt;/em&gt;: In my defence though, I &lt;em&gt;dont want&lt;/em&gt; the authority that all the reviewers have granted to me for their Github accounts! We need just two things to enable commenting: an identity service to cut down on spam comments, and the ability to create issues in a &lt;a href=&quot;http://github.com/ocamllabs/rwo-comments&quot;&gt;public repository&lt;/a&gt;. Unfortunately, Github&amp;#8217;s &lt;a href=&quot;http://developer.github.com/v3/oauth/#scopes&quot;&gt;scope&lt;/a&gt; API requires you to also grant us access to commit to public code repositories. Add on the fact that around 6,000 people have clicked through the oAuth API to review RWO, and you start to see just how much code we potentially have access to. I did try to reduce the damage by not actually storing the oAuth tokens on the server-side. Instead, we store it in the client using a secure cookie, so you can easily reset your browser to log out.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s not just about authentication either: another reader &lt;a href=&quot;http://www.reddit.com/r/ocaml/comments/1gil84/public_beta_of_real_world_ocaml/cal811r&quot;&gt;points out&lt;/a&gt; that if they use GitHub during work hours, they have no real way of separating the news streams that result.&lt;/p&gt;

&lt;p&gt;Much of the frustration here is that there&amp;#8217;s nothing I can do to fix this except wait for GitHub to hopefully improve their service. I very much hope that GitHub is listening to this and has internal plans to overhaul their privilege management APIs.&lt;/p&gt;

&lt;h3 id=&quot;infrastructurefree_hosting&quot;&gt;Infrastructure-free hosting&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Good&lt;/em&gt; and &lt;em&gt;Bad&lt;/em&gt;: One of my goals with the commenting infrastructure was to try and eliminate all server-side code, so that we could simply publish the book onto Github Pages and use JavaScript for the comment creation and listing.&lt;/p&gt;

&lt;p&gt;This &lt;em&gt;almost&lt;/em&gt; worked out. We still need a tiny HTTP proxy for comment creation, as we add contextual information such as a milestone to every new comment to make it easier to index. Setting a milestone requires privileged access to the repository and so our server-side proxy creates the issue using the user-supplied oAuth token (so that it originates from the commenter), and then updates it (via the &lt;a href=&quot;http://github.com/bactrian&quot;&gt;bactrian&lt;/a&gt; account) to add the milestone add insert a little contextual comment pointing back to the book paragraph where the comment originated from.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Good&lt;/em&gt;: The other criticism from the &lt;a href=&quot;http://www.reddit.com/r/programming/comments/1gipea/first_public_beta_of_real_world_ocaml_book/cakmeuz&quot;&gt;online feedback&lt;/a&gt; was the &lt;em&gt;requirement&lt;/em&gt; to have a Github login to read the book at all. This is a restriction that we intend to lift for the final release (which will be freely available online under a &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/3.0/us/&quot;&gt;CC-BY-NC-ND&lt;/a&gt; license), but I think it&amp;#8217;s absolutely the right decision to gateway early adopters to get useful feedback. Even if we lost 90% of our potential reviewers through the Github auth wall, I don&amp;#8217;t think we could have coped with another 10,000 comments in any case.&lt;/p&gt;

&lt;p&gt;On the positive side, we didn&amp;#8217;t have a single spam comment or other abuses of the commenting system at all.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve had quite a few queries been open-sourcing the &lt;a href=&quot;http://github.com/realworldocaml/scripts&quot;&gt;scripts&lt;/a&gt; that drive the server-side commenting, and this on my TODO list for after the final book has gone to production.&lt;/p&gt;

&lt;h2 id=&quot;autogenerating_the_examples&quot;&gt;Auto-generating the examples&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Bad&lt;/em&gt;: We tried for far too long during the book writing to stumble through with manual installation instructions and hand-copied code snippets and outputs. Some of our alpha reviewers pointed out &lt;a href=&quot;https://github.com/ocamllabs/rwo-comments/issues/236&quot;&gt;vociferously&lt;/a&gt; that spending time on installation and dealing with code typos was not a good use of their time.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Good&lt;/em&gt;: &lt;a href=&quot;http://bolinfest.com&quot;&gt;Michael Bolin&lt;/a&gt; was entirely correct in his criticism (and incidentally, one of our most superstar reviewers). The latest beta has an entirely mechanically generated toolchain that lets us regenerate the entire book output from a cold start by cloning the &lt;a href=&quot;https://github.com/realworldocaml/examples&quot;&gt;examples&lt;/a&gt; repository. In retrospect, I should have written this infrastructure a year ago, and I&amp;#8217;d recommend any new books of this sort focus hard on automation from the early days.&lt;/p&gt;

&lt;p&gt;Luckily, my automation &lt;a href=&quot;https://github.com/realworldocaml/scripts&quot;&gt;scripts&lt;/a&gt; could crib heavily from existing open-source OCaml projects that had portions of what we needed, such as &lt;a href=&quot;https://github.com/diml/utop&quot;&gt;uTop&lt;/a&gt; and &lt;a href=&quot;https://github.com/ocaml/ocaml.org&quot;&gt;ocaml.org&lt;/a&gt; (and my thanks to &lt;a href=&quot;https://github.com/diml&quot;&gt;Jeremie Dimino&lt;/a&gt; and &lt;a href=&quot;https://github.com/Chris00&quot;&gt;Christophe Troestler&lt;/a&gt; for their help here).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Awesome&lt;/em&gt;: We&amp;#8217;re hacking on a little surprise for the final online version of the book, based on this build infrastructure. Stay &lt;a href=&quot;http://try.ocamlpro.com&quot;&gt;tuned&lt;/a&gt;!&lt;/p&gt;</content:encoded>
	<dc:date>2013-08-05T23:00:00+00:00</dc:date>
</item>
<item rdf:about="http://hh360.user.srcf.net/blog/?p=99">
	<title>Heidi Howard: OCaml Lecture Notes</title>
	<link>http://hh360.user.srcf.net/blog/2013/08/abstractions-and-types-for-concurrent-programming/</link>
	<content:encoded>&lt;p&gt;I just wanted to share these sildes from Yaron Minsky guest lecture at Princeton on &amp;#8220;Abstractions and Types for Concurrent Programming&amp;#8221;: [&lt;a href=&quot;http://www.cs.princeton.edu/~dpw/courses/cos326-12/lec/asynch-and-rpc.pdf&quot;&gt;pdf&lt;/a&gt;]  to the &lt;a href=&quot;http://www.cs.princeton.edu/~dpw/courses/cos326-12/&quot;&gt;COS 326&lt;/a&gt; class and the notes from Cornell&amp;#8217;s OCaml course called &amp;#8220;&lt;a href=&quot;http://www.cs.cornell.edu/Courses/cs3110/2011sp/lecturenotes.asp&quot;&gt;Data Structures and Functional Programming&lt;/a&gt;&amp;#8220;, edit the URL to see notes from different years&lt;/p&gt;</content:encoded>
	<dc:date>2013-08-01T14:40:42+00:00</dc:date>
</item>
<item rdf:about="http://openmirage.org/blog/xen-block-devices-with-mirage">
	<title>MirageOS: Creating Xen block devices with Mirage</title>
	<link>http://openmirage.org/blog/xen-block-devices-with-mirage</link>
	<content:encoded>&lt;div&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.openmirage.org/&quot;&gt;Mirage&lt;/a&gt; is a &lt;a href=&quot;http://anil.recoil.org/papers/2013-asplos-mirage.pdf&quot;&gt;unikernel&lt;/a&gt; or &quot;library operating system&quot; that allows us to build applications which can be compiled to very diverse environments: the same code can be linked to run as a regular Unix app, relinked to run as a &lt;a href=&quot;https://github.com/pgj/mirage-kfreebsd&quot;&gt;FreeBSD kernel module&lt;/a&gt;, and even linked into a self-contained kernel which can run on the &lt;a href=&quot;http://www.xenproject.org/&quot;&gt;Xen hypervisor&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Mirage has access to an extensive suite of pure OCaml &lt;a href=&quot;https://github.com/mirage&quot;&gt;libraries&lt;/a&gt;, covering everything from Xen &lt;a href=&quot;https://github.com/mirage/ocaml-xen-block-driver&quot;&gt;block&lt;/a&gt; and &lt;a href=&quot;https://github.com/mirage/mirage-platform/blob/master/xen/lib/netif.ml&quot;&gt;network&lt;/a&gt; virtual device drivers, a &lt;a href=&quot;https://github.com/mirage/mirage-net&quot;&gt;TCP/IP stack&lt;/a&gt;, OpenFlow learning switches and controllers, to SSH and &lt;a href=&quot;https://github.com/mirage/ocaml-cohttp&quot;&gt;HTTP&lt;/a&gt; server implementations.&lt;/p&gt;&lt;p&gt;I normally use Mirage to deploy applications as kernels on top of a &lt;a href=&quot;http://www.xenserver.org/&quot;&gt;XenServer&lt;/a&gt; hypervisor. I start by first using the Mirage libraries within a normal Unix userspace application -- where I have access to excellent debugging tools -- and then finally link my app as a high-performance Xen kernel for production.&lt;/p&gt;&lt;p&gt;However Mirage is great for more than simply building Xen kernels. In this post I'll describe how I've been using Mirage to create experimental virtual disk devices for existing Xen VMs (which may themselves be Linux, *BSD, Windows or even Mirage kernels). The Mirage libraries let me easily experiment with different backend file formats and protocols, all while writing only type-safe OCaml code thats runs in userspace in a normal Linux domain 0.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Disk devices under Xen&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The protocols used by Xen disk and network devices are designed to permit fast and efficient software implementations, avoiding the inefficiencies inherent in emulating physical hardware in software. The protocols are based on two primitives:&lt;/p&gt;&lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;b&gt;shared memory pages&lt;/b&gt;: used for sharing both data and metadata&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;b&gt;event channels&lt;/b&gt;: similar to interrupts, these allow one side to signal the other&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;&lt;p&gt;In the disk block protocol, the protocol starts with the client (&quot;frontend&quot; in Xen jargon) sharing a page with the server (&quot;backend&quot;). This single page will contain the request/response metadata, arranged as a circular buffer or &quot;ring&quot;. The client (&quot;frontend&quot;) can then start sharing pages containing disk blocks with the backend and pushing request structures to the ring, updating shared pointers as it goes. The client will give the server end a kick via an event channel signal and then both ends start running simultaneously. There are no locks in the protocol so updates to the shared metadata must be handled carefully, using write memory barriers to ensure consistency.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Xen disk devices in Mirage&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Like everything else in Mirage, Xen disk devices are implemented as libraries. The ocamlfind library called &quot;xenctrl&quot; provides support for manipulating blocks of raw memory pages, &quot;granting&quot; access to them to other domains and signalling event channels. There are two implementations of &quot;xenctrl&quot;: &lt;a href=&quot;https://github.com/mirage/mirage-platform/tree/master/xen/lib&quot;&gt;one that invokes Xen &quot;hypercalls&quot; directly&lt;/a&gt; and one which uses the &lt;a href=&quot;https://github.com/xapi-project/ocaml-xen-lowlevel-libs&quot;&gt;Xen userspace library libxc&lt;/a&gt;. Both implementations satisfy a common signature, so it's easy to write code which will work in both userspace and kernelspace.&lt;/p&gt;&lt;p&gt;The ocamlfind library &lt;a href=&quot;https://github.com/mirage/shared-memory-ring&quot;&gt;shared-memory-ring&lt;/a&gt; provides functions to create and manipulate request/response rings in shared memory as used by the disk and network protocols. This library is a mix of 99.9% OCaml and 0.1% asm, where the asm is only needed to invoke memory barrier operations to ensure that metadata writes issued by one CPU core appear in the same order when viewed from another CPU core.&lt;/p&gt;&lt;p&gt;Finally the ocamlfind library &lt;a href=&quot;https://github.com/mirage/ocaml-xen-block-driver&quot;&gt;xenblock&lt;/a&gt; provides functions to hotplug and hotunplug disk devices, together with an implementation of the disk block protocol itself.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Making custom virtual disk servers with Mirage&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Let's experiment with making our own virtual disk server based on the Mirage example program, &lt;a href=&quot;https://github.com/mirage/xen-disk&quot;&gt;xen-disk&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;First, install &lt;a href=&quot;http://www.xen.org/&quot;&gt;Xen&lt;/a&gt;, &lt;a href=&quot;http://www.ocaml.org/&quot;&gt;OCaml&lt;/a&gt; and &lt;a href=&quot;http://opam.ocamlpro.com/&quot;&gt;OPAM&lt;/a&gt;. Second initialise your system:&lt;/p&gt;&lt;div class=&quot;ocaml&quot;&gt;&lt;pre&gt;&lt;code&gt;opam init
eval `opam config env`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At the time of writing, not all the libraries were released as upstream OPAM packages, so it was necessary to add some extra repositories. This should not be necessary after the Mirage developer preview at &lt;a href=&quot;http://www.oscon.com/oscon2013/public/schedule/detail/28956&quot;&gt;OSCON 2013&lt;/a&gt;.&lt;/p&gt;&lt;div class=&quot;ocaml&quot;&gt;&lt;pre&gt;&lt;code&gt;opam remote add mirage-dev git&lt;span class=&quot;keyword2&quot;&gt;:&lt;/span&gt;//github.com/mirage/opam-repo-dev
opam remote add xapi-dev git&lt;span class=&quot;keyword2&quot;&gt;:&lt;/span&gt;//github.com/xapi-project/opam-repo-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Install the unmodified &lt;code&gt;xen-disk&lt;/code&gt; package, this will ensure all the build dependencies are installed:&lt;/p&gt;&lt;div class=&quot;ocaml&quot;&gt;&lt;pre&gt;&lt;code&gt;opam install xen-disk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When this completes it will have installed a command-line tool called &lt;code&gt;xen-disk&lt;/code&gt;. If you start a VM using your Xen toolstack of choice (&quot;xl create ...&quot; or &quot;xe vm-install ...&quot; or &quot;virsh create ...&quot;) then you should be able to run:&lt;/p&gt;&lt;div class=&quot;ocaml&quot;&gt;&lt;pre&gt;&lt;code&gt;xen-disk connect &lt;span class=&quot;keyword2&quot;&gt;&amp;lt;&lt;/span&gt;vmname&lt;span class=&quot;keyword2&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;which will hotplug a fresh block device into the VM &quot;&amp;lt;vmname&amp;gt;&quot; using the &quot;discard&quot; backend, which returns &quot;success&quot; to all read and write requests, but actually throws all data away. Obviously this backend should only be used for basic testing!&lt;/p&gt;&lt;p&gt;Assuming that worked ok, clone and build the source for &lt;code&gt;xen-disk&lt;/code&gt; yourself:&lt;/p&gt;&lt;div class=&quot;ocaml&quot;&gt;&lt;pre&gt;&lt;code&gt;git clone git&lt;span class=&quot;keyword2&quot;&gt;:&lt;/span&gt;//github.com/mirage/xen-disk
cd xen-disk
make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;Making a custom virtual disk implementation&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The &lt;code&gt;xen-disk&lt;/code&gt; program has a set of simple built-in virtual disk implementations. Each one satisifies a simple signature, contained in &lt;a href=&quot;https://github.com/mirage/xen-disk/blob/master/src/storage.mli&quot;&gt;src/storage.mli&lt;/a&gt;:&lt;/p&gt;&lt;div class=&quot;ocaml&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword4&quot;&gt;type&lt;/span&gt; configuration &lt;span class=&quot;keyword2&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword2&quot;&gt;{&lt;/span&gt;
  filename&lt;span class=&quot;keyword2&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;keyword3&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;keyword2&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;comments&quot;&gt;(** path where the data will be stored *)&lt;/span&gt;
  format&lt;span class=&quot;keyword2&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;keyword3&quot;&gt;string&lt;/span&gt; option&lt;span class=&quot;keyword2&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;comments&quot;&gt;(** format of physical data *)&lt;/span&gt;
&lt;span class=&quot;keyword2&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;comments&quot;&gt;(** Information needed to &quot;open&quot; a disk *)&lt;/span&gt;

&lt;span class=&quot;keyword4&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;keyword4&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;keyword6&quot;&gt;S &lt;/span&gt;&lt;span class=&quot;keyword2&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword4&quot;&gt;sig&lt;/span&gt;
  &lt;span class=&quot;comments&quot;&gt;(** A concrete mechanism to access and update a virtual disk. *)&lt;/span&gt;

  &lt;span class=&quot;keyword4&quot;&gt;type&lt;/span&gt; t
  &lt;span class=&quot;comments&quot;&gt;(** An open virtual disk *)&lt;/span&gt;

  &lt;span class=&quot;keyword4&quot;&gt;val&lt;/span&gt; open_disk&lt;span class=&quot;keyword2&quot;&gt;:&lt;/span&gt; configuration -&lt;span class=&quot;keyword2&quot;&gt;&amp;gt;&lt;/span&gt; t option &lt;span class=&quot;keyword5&quot;&gt;Lwt.&lt;/span&gt;t
  &lt;span class=&quot;comments&quot;&gt;(** Given a configuration, attempt to open a virtual disk *)&lt;/span&gt;

  &lt;span class=&quot;keyword4&quot;&gt;val&lt;/span&gt; size&lt;span class=&quot;keyword2&quot;&gt;:&lt;/span&gt; t -&lt;span class=&quot;keyword2&quot;&gt;&amp;gt;&lt;/span&gt; int64
  &lt;span class=&quot;comments&quot;&gt;(** [size t] is the size of the virtual disk in bytes. The actual
      number of bytes stored on media may be different. *)&lt;/span&gt;

  &lt;span class=&quot;keyword4&quot;&gt;val&lt;/span&gt; read&lt;span class=&quot;keyword2&quot;&gt;:&lt;/span&gt; t -&lt;span class=&quot;keyword2&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword5&quot;&gt;Cstruct.&lt;/span&gt;t -&lt;span class=&quot;keyword2&quot;&gt;&amp;gt;&lt;/span&gt; int64 -&lt;span class=&quot;keyword2&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword3&quot;&gt;int&lt;/span&gt; -&lt;span class=&quot;keyword2&quot;&gt;&amp;gt;&lt;/span&gt; unit &lt;span class=&quot;keyword5&quot;&gt;Lwt.&lt;/span&gt;t
  &lt;span class=&quot;comments&quot;&gt;(** [read t buf offset_sectors len_sectors] copies [len_sectors]
      sectors beginning at sector [offset_sectors] from [t] into [buf] *)&lt;/span&gt;

  &lt;span class=&quot;keyword4&quot;&gt;val&lt;/span&gt; write&lt;span class=&quot;keyword2&quot;&gt;:&lt;/span&gt; t -&lt;span class=&quot;keyword2&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword5&quot;&gt;Cstruct.&lt;/span&gt;t -&lt;span class=&quot;keyword2&quot;&gt;&amp;gt;&lt;/span&gt; int64 -&lt;span class=&quot;keyword2&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword3&quot;&gt;int&lt;/span&gt; -&lt;span class=&quot;keyword2&quot;&gt;&amp;gt;&lt;/span&gt; unit &lt;span class=&quot;keyword5&quot;&gt;Lwt.&lt;/span&gt;t
  &lt;span class=&quot;comments&quot;&gt;(** [write t buf offset_sectors len_sectors] copies [len_sectors]
      sectors from [buf] into [t] beginning at sector [offset_sectors]. *)&lt;/span&gt;
&lt;span class=&quot;keyword4&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let's make a virtual disk implementation which uses an existing disk image file as a &quot;gold image&quot;, but uses copy-on-write so that no writes persist. This is a common configuration in Virtual Desktop Infrastructure deployments and is generally handy when you want to test a change quickly, and revert it cleanly afterwards.&lt;/p&gt;&lt;p&gt;A useful Unix technique for file I/O is to &quot;memory map&quot; an existing file: this associates the file contents with a range of virtual memory addresses so that reading and writing within this address range will actually read or write the file contents. The &quot;mmap&quot; C function has a number of flags, which can be used to request &quot;copy on write&quot; behaviour. Reading the &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml/libref/Bigarray.Genarray.html&quot;&gt;OCaml manual Bigarray.map_file&lt;/a&gt; it says:&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;If shared is true, all modifications performed on the array are reflected in the file. This requires that fd be opened with write permissions. If shared is false, modifications performed on the array are done in memory only, using copy-on-write of the modified pages; the underlying file is not affected.&lt;/p&gt; &lt;/blockquote&gt;&lt;p&gt;So we should be able to make a virtual disk implementation which memory maps the image file and achieves copy-on-write by setting &quot;shared&quot; to false. For extra safety we can also open the file read-only.&lt;/p&gt;&lt;p&gt;Luckily there is already an &lt;a href=&quot;https://github.com/mirage/xen-disk/blob/master/src/backend.ml#L63&quot;&gt;&quot;mmap&quot; implementation&lt;/a&gt; in &lt;code&gt;xen-disk&lt;/code&gt;; all we need to do is tweak it slightly. Note that the &lt;code&gt;xen-disk&lt;/code&gt; program uses a co-operative threading library called &lt;a href=&quot;http://ocsigen.org/lwt/&quot;&gt;lwt&lt;/a&gt; which replaces functions from the OCaml standard library which might block with non-blocking variants. In particular &lt;code&gt;lwt&lt;/code&gt; uses &lt;code&gt;Lwt_bytes.map_file&lt;/code&gt; as a wrapper for the &lt;code&gt;Bigarray.Array1.map_file&lt;/code&gt; function. In the &quot;open-disk&quot; function we simply need to set &quot;shared&quot; to &quot;false&quot; to achieve the behaviour we want i.e.&lt;/p&gt;&lt;div class=&quot;ocaml&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword4&quot;&gt;let&lt;/span&gt; open_disk configuration &lt;span class=&quot;keyword2&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;keyword4&quot;&gt;let&lt;/span&gt; fd &lt;span class=&quot;keyword2&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword5&quot;&gt;Unix.&lt;/span&gt;openfile configuration.filename &lt;span class=&quot;keyword2&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;keyword5&quot;&gt;Unix.O_RDONLY &lt;/span&gt;&lt;span class=&quot;keyword2&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;keyword8&quot;&gt;0&lt;/span&gt;o0 &lt;span class=&quot;keyword4&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;keyword4&quot;&gt;let&lt;/span&gt; stats &lt;span class=&quot;keyword2&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword5&quot;&gt;Unix.&lt;/span&gt;&lt;span class=&quot;keyword5&quot;&gt;LargeFile.&lt;/span&gt;fstat fd &lt;span class=&quot;keyword4&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;keyword4&quot;&gt;let&lt;/span&gt; mmap &lt;span class=&quot;keyword2&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword5&quot;&gt;Lwt_bytes.&lt;/span&gt;map_file ~fd ~shared&lt;span class=&quot;keyword2&quot;&gt;:&lt;/span&gt;false &lt;span class=&quot;keyword2&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword2&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword4&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;keyword5&quot;&gt;Unix.&lt;/span&gt;close fd&lt;span class=&quot;keyword2&quot;&gt;;&lt;/span&gt;
  return &lt;span class=&quot;keyword2&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword6&quot;&gt;Some &lt;/span&gt;&lt;span class=&quot;keyword2&quot;&gt;(&lt;/span&gt;stats.&lt;span class=&quot;keyword5&quot;&gt;Unix.&lt;/span&gt;&lt;span class=&quot;keyword5&quot;&gt;LargeFile.&lt;/span&gt;st_size, &lt;span class=&quot;keyword5&quot;&gt;Cstruct.&lt;/span&gt;of_bigarray mmap&lt;span class=&quot;keyword2&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;keyword2&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The read and write functions can be left as they are:&lt;/p&gt;&lt;div class=&quot;ocaml&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword4&quot;&gt;let&lt;/span&gt; read &lt;span class=&quot;keyword2&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword8&quot;&gt;_&lt;/span&gt;, mmap&lt;span class=&quot;keyword2&quot;&gt;)&lt;/span&gt; buf offset_sectors len_sectors &lt;span class=&quot;keyword2&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;keyword4&quot;&gt;let&lt;/span&gt; offset_sectors &lt;span class=&quot;keyword2&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword5&quot;&gt;Int64.&lt;/span&gt;to_int offset_sectors &lt;span class=&quot;keyword4&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;keyword4&quot;&gt;let&lt;/span&gt; len_bytes &lt;span class=&quot;keyword2&quot;&gt;=&lt;/span&gt; len_sectors &lt;span class=&quot;keyword2&quot;&gt;*&lt;/span&gt; sector_size &lt;span class=&quot;keyword4&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;keyword4&quot;&gt;let&lt;/span&gt; offset_bytes &lt;span class=&quot;keyword2&quot;&gt;=&lt;/span&gt; offset_sectors &lt;span class=&quot;keyword2&quot;&gt;*&lt;/span&gt; sector_size &lt;span class=&quot;keyword4&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;keyword5&quot;&gt;Cstruct.&lt;/span&gt;blit mmap offset_bytes buf &lt;span class=&quot;keyword8&quot;&gt;0&lt;/span&gt; len_bytes&lt;span class=&quot;keyword2&quot;&gt;;&lt;/span&gt;
  return &lt;span class=&quot;keyword2&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword2&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;keyword4&quot;&gt;let&lt;/span&gt; write &lt;span class=&quot;keyword2&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword8&quot;&gt;_&lt;/span&gt;, mmap&lt;span class=&quot;keyword2&quot;&gt;)&lt;/span&gt; buf offset_sectors len_sectors &lt;span class=&quot;keyword2&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;keyword4&quot;&gt;let&lt;/span&gt; offset_sectors &lt;span class=&quot;keyword2&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword5&quot;&gt;Int64.&lt;/span&gt;to_int offset_sectors &lt;span class=&quot;keyword4&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;keyword4&quot;&gt;let&lt;/span&gt; offset_bytes &lt;span class=&quot;keyword2&quot;&gt;=&lt;/span&gt; offset_sectors &lt;span class=&quot;keyword2&quot;&gt;*&lt;/span&gt; sector_size &lt;span class=&quot;keyword4&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;keyword4&quot;&gt;let&lt;/span&gt; len_bytes &lt;span class=&quot;keyword2&quot;&gt;=&lt;/span&gt; len_sectors &lt;span class=&quot;keyword2&quot;&gt;*&lt;/span&gt; sector_size &lt;span class=&quot;keyword4&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;keyword5&quot;&gt;Cstruct.&lt;/span&gt;blit buf &lt;span class=&quot;keyword8&quot;&gt;0&lt;/span&gt; mmap offset_bytes len_bytes&lt;span class=&quot;keyword2&quot;&gt;;&lt;/span&gt;
  return &lt;span class=&quot;keyword2&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword2&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now if we rebuild and run something like:&lt;/p&gt;&lt;div class=&quot;ocaml&quot;&gt;&lt;pre&gt;&lt;code&gt;dd &lt;span class=&quot;keyword1&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;keyword2&quot;&gt;=&lt;/span&gt;/dev/zero &lt;span class=&quot;keyword2&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;keyword2&quot;&gt;=&lt;/span&gt;disk.raw bs&lt;span class=&quot;keyword2&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;keyword8&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;keyword6&quot;&gt;M &lt;/span&gt;seek&lt;span class=&quot;keyword2&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;keyword8&quot;&gt;1024&lt;/span&gt; count&lt;span class=&quot;keyword2&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;keyword8&quot;&gt;1&lt;/span&gt;
losetup /dev/loop0 disk.raw
mkfs.ext3 /dev/loop0
losetup -d /dev/loop0

dist/build/xen-disk/xen-disk connect &lt;span class=&quot;keyword2&quot;&gt;&amp;lt;&lt;/span&gt;myvm&lt;span class=&quot;keyword2&quot;&gt;&amp;gt;&lt;/span&gt; --path disk.raw
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Inside the VM we should be able to do some basic speed testing:&lt;/p&gt;&lt;div class=&quot;ocaml&quot;&gt;&lt;pre&gt;&lt;code&gt;# dd &lt;span class=&quot;keyword1&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;keyword2&quot;&gt;=&lt;/span&gt;/dev/xvdb &lt;span class=&quot;keyword2&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;keyword2&quot;&gt;=&lt;/span&gt;/dev/null bs&lt;span class=&quot;keyword2&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;keyword8&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;keyword6&quot;&gt;M &lt;/span&gt;iflag&lt;span class=&quot;keyword2&quot;&gt;=&lt;/span&gt;direct count&lt;span class=&quot;keyword2&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;keyword8&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;keyword8&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;keyword2&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;keyword8&quot;&gt;0&lt;/span&gt; records &lt;span class=&quot;keyword4&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;keyword8&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;keyword2&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;keyword8&quot;&gt;0&lt;/span&gt; records out
&lt;span class=&quot;keyword8&quot;&gt;104857600&lt;/span&gt; bytes &lt;span class=&quot;keyword2&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword8&quot;&gt;105&lt;/span&gt; MB&lt;span class=&quot;keyword2&quot;&gt;)&lt;/span&gt; copied, &lt;span class=&quot;keyword8&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;keyword8&quot;&gt;125296&lt;/span&gt; s, &lt;span class=&quot;keyword8&quot;&gt;837&lt;/span&gt; MB/s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Plus we should be able to mount the filesystem inside the VM, make changes and then disconnect (send SIGINT to xen-disk by hitting Control+C on your terminal) without disturbing the underlying disk contents.&lt;/p&gt;&lt;p&gt;&lt;b&gt;So what else can we do?&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Thanks to Mirage it's now really easy to experiment with custom storage types for your existing VMs. If you have a cunning scheme where you want to hash block contents, and use the hashes as keys in some distributed datastructure -- go ahead, it's all easy to do. If you have ideas for improving the low-level block access protocol then Mirage makes those experiments very easy too.&lt;/p&gt;&lt;p&gt;If you come up with a cool example with Mirage, then send us a &lt;a href=&quot;https://github.com/mirage&quot;&gt;pull request&lt;/a&gt; or send us an email to the &lt;a href=&quot;http://www.openmirage.org/about/&quot;&gt;Mirage mailing list&lt;/a&gt; -- we'd love to hear about it!&lt;/p&gt; 
   &lt;/div&gt;</content:encoded>
	<dc:date>2013-07-18T11:20:00+00:00</dc:date>
	<dc:creator>Dave Scott</dc:creator>
</item>
<item rdf:about="http://hh360.user.srcf.net/blog/?p=64">
	<title>Heidi Howard: Profiling OCaml – Getting Started Guide</title>
	<link>http://hh360.user.srcf.net/blog/2013/07/profiling-ocaml-getting-started-guide/</link>
	<content:encoded>&lt;p&gt;&amp;#8220;Perf&amp;#8221; is a common command line linux tool used for code profiling, (&lt;a href=&quot;https://perf.wiki.kernel.org/index.php/Tutorial&quot;&gt;perf wiki&lt;/a&gt;). A alpha version of a OCaml native code compiler that output code, that can be analysis by perf is now avalaible in OPAM&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Installing the perf compatible OCaml compiler is straight forward with OPAM, though quite time-consuming due to the need to re-install many packages&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;bash&quot;&gt;$ opam remote add perf git:&lt;span&gt;//&lt;/span&gt;github.com&lt;span&gt;/&lt;/span&gt;mshinwell&lt;span&gt;/&lt;/span&gt;opam-repo-dev
$ opam switch &lt;span&gt;4.01&lt;/span&gt;-perf-annotate
$ &lt;span&gt;eval&lt;/span&gt; &lt;span&gt;`&lt;/span&gt;opam config &lt;span&gt;env&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;
$ opam &lt;span&gt;install&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Installing perf was also straight forward, in fact I already had it via the linux-tools package in apt-get for Ubuntu.&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;bash&quot;&gt;&lt;span&gt;sudo&lt;/span&gt; &lt;span&gt;apt-get install&lt;/span&gt; linux-tools&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;br /&gt;
Compiling with the new perf-compatable Ocaml compiler was beautifully simple, running make within an existing project working first time without any further changes necessary.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Basics&lt;/strong&gt;&lt;br /&gt;
Basic reporting is collected and viewed using:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;bash&quot;&gt;&lt;span&gt;sudo&lt;/span&gt; perf record .&lt;span&gt;/&lt;/span&gt;myprogram.native &lt;span&gt;-o&lt;/span&gt; myreport.data
&lt;span&gt;sudo&lt;/span&gt; perf report &lt;span&gt;-i&lt;/span&gt; myreport.data
&lt;span&gt;sudo&lt;/span&gt; perf script &lt;span&gt;-i&lt;/span&gt; myreport.data&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Similarly basic stats can be collected using:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;bash&quot;&gt;&lt;span&gt;sudo&lt;/span&gt; perf &lt;span&gt;stat&lt;/span&gt; .&lt;span&gt;/&lt;/span&gt;myprogram.native &lt;span&gt;-o&lt;/span&gt; myreport.data
&lt;span&gt;sudo&lt;/span&gt; &lt;span&gt;cat&lt;/span&gt; myreport.data&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;When finished you can switch back to your normal compiler version, i.e.&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;bash&quot;&gt;$ opam switch 4.00.1
$ &lt;span&gt;eval&lt;/span&gt; &lt;span&gt;`&lt;/span&gt;opam config &lt;span&gt;env&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2013-07-10T07:10:37+00:00</dc:date>
</item>
<item rdf:about="http://hh360.user.srcf.net/blog/?p=90">
	<title>Heidi Howard: Learning Async</title>
	<link>http://hh360.user.srcf.net/blog/2013/07/learning-async/</link>
	<content:encoded>&lt;p&gt;If your taking your first steps in Janestreet&amp;#8217;s Async library, here&amp;#8217;s some sources of help &amp;amp; support:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;My top 5 sources of Async Documentation&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Official Janestreet Docs for Async/Core: &lt;a href=&quot;https://ocaml.janestreet.com/ocaml-core/latest/doc/&quot;&gt;https://ocaml.janestreet.com/ocaml-core/latest/doc/&lt;/a&gt; These are generated from the .mli&amp;#8217;s in the Async source and you will quickly find places where ocamldoc has failed to cope with Core/Async complex module structure. In this case, I recommend the source code: &lt;a href=&quot;https://github.com/janestreet/async&quot;&gt;https://github.com/janestreet/async&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dummy&amp;#8217;s guide to Async, a useful intro to bind, upon and map (the 3 fundemental functions): &lt;a href=&quot;http://janestreet.github.io/guide-async.html&quot;&gt;http://janestreet.github.io/guide-async.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Real World OCaml chapter on Async, covers Deferred basics, Ivars, Reader/Writer, TCP server, running the scheduler, Command, Pipes, Monitors, Delays, Choose and System Threads: &lt;a href=&quot;https://realworldocaml.org/beta3/en/html/concurrent-programming-with-async.html&quot;&gt;https://realworldocaml.org/beta3/en/html/concurrent-programming-with-async.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Yaron Minsky (one of co-authors of RWO) provides a nice little example of Async&amp;#8217;s RPC libraries: &lt;a href=&quot;https://bitbucket.org/yminsky/core-hello-world&quot;&gt;https://bitbucket.org/yminsky/core-hello-world&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;My favourite project for example Async and Lwt code is cohttp: &lt;a href=&quot;https://github.com/mirage/ocaml-cohttp&quot;&gt;https://github.com/mirage/ocaml-cohttp&lt;/a&gt;, otherwise there&amp;#8217;s OPAM&amp;#8217;s list of Async dependent project, useful for finding more example code: &lt;a href=&quot;http://opam.ocamlpro.com/pkg/async.109.38.00.html&quot;&gt;http://opam.ocamlpro.com/pkg/async.109.38.00.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Community&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Google group for Janestreet&amp;#8217;s Core &amp;amp; Async, the JS team are really helpful &lt;img src=&quot;http://hh360.user.srcf.net/blog/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:)&quot; class=&quot;wp-smiley&quot; /&gt;  : &lt;a href=&quot;https://groups.google.com/forum/#!forum/ocaml-core&quot;&gt;https://groups.google.com/forum/#!forum/ocaml-core&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Async issue tracker on Github is quiet but still a good point to start a conversation: &lt;a href=&quot;https://github.com/janestreet/async/issues?state=open&quot;&gt;https://github.com/janestreet/async/issues?state=open&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I recommend the installation chapter of Real World Ocaml: &lt;a href=&quot;https://realworldocaml.org/beta3/en/html/installation.html&quot;&gt;https://realworldocaml.org/beta3/en/html/installation.html&lt;/a&gt; and install instructions for OPAM: &lt;a href=&quot;http://opam.ocamlpro.com/doc/Quick_Install.html&quot;&gt;http://opam.ocamlpro.com/doc/Quick_Install.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Janestreet provide some installation hints, though this is covered for comprehensively in RWO (linked above): &lt;a href=&quot;http://janestreet.github.io/installation.html&quot;&gt;http://janestreet.github.io/installation.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Very light background reading: &lt;a href=&quot;https://ocaml.janestreet.com/?q=node/100&quot;&gt;https://ocaml.janestreet.com/?q=node/100&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</content:encoded>
	<dc:date>2013-07-03T12:00:38+00:00</dc:date>
</item>
<item rdf:about="http://anil.recoil.org/2013/06/17/real-world-ocaml-beta-available">
	<title>Anil Madhavapeddy: Phew, Real World OCaml beta now available.</title>
	<link>http://anil.recoil.org/2013/06/17/real-world-ocaml-beta-available.html</link>
	<content:encoded>&lt;p&gt;When I finished writing my PhD, I swore (as most recent graduates do) to never write a thesis again. Instead, life would be a series of pleasantly short papers, interspersed with the occasional journal article, and lots of not-writing-huge-book-activity in general.&lt;/p&gt;
&lt;a href=&quot;http://realworldocaml.org&quot;&gt;&lt;img align=&quot;right&quot; src=&quot;http://anil.recoil.org/images/oreilly-cover.gif&quot; /&gt;&lt;/a&gt;
&lt;p&gt;Then &lt;a href=&quot;http://cufp.org/conference/2011&quot;&gt;CUFP 2011&lt;/a&gt; happened, and I find myself in a bar in Tokyo with &lt;a href=&quot;https://twitter.com/yminsky&quot;&gt;Yaron Minsky&lt;/a&gt; and &lt;a href=&quot;http://monkey.org/~marius&quot;&gt;Marius Eriksen&lt;/a&gt;, and a dangerous bet ensued. A few short weeks after that, and Yaron and I are chatting with &lt;a href=&quot;https://plus.google.com/111219778721183890368&quot;&gt;Jason Hickey&lt;/a&gt; in California about writing a book about the language we love. I&amp;#8217;m still telling myself that this will never actually happen, but then everyone&amp;#8217;s favourite Californirishman &lt;a href=&quot;http://www.serpentine.com/blog/&quot;&gt;Bryan O&amp;#8217;Sullivan&lt;/a&gt; puts us in touch with O&amp;#8217;Reilly, who published his excellent &lt;a href=&quot;http://realworldhaskell.org&quot;&gt;Haskell&lt;/a&gt; tome.&lt;/p&gt;

&lt;p&gt;O&amp;#8217;Reilly arranged everything incredibly fast, with our editor &lt;a href=&quot;http://radar.oreilly.com/andyo&quot;&gt;Andy Oram&lt;/a&gt; driving us through the process. We decided early on that we wanted to write a book that had opinions based our personal experience: about how OCaml code should be written, about the standard library involved, and generally making functional programming more accessible. Along the way, we&amp;#8217;ve been working incredibly hard on the underlying software platform too, with &lt;a href=&quot;http://ocaml.janestreet.com&quot;&gt;Jane Street&lt;/a&gt;, &lt;a href=&quot;http://ocamlpro.com&quot;&gt;OCamlPro&lt;/a&gt; and my own group &lt;a href=&quot;http://ocaml.io&quot;&gt;OCaml Labs&lt;/a&gt; working together on all the pieces. There&amp;#8217;s still a lot of work left to do, of course, but we&amp;#8217;re right on track to get all this released very soon now.&lt;/p&gt;

&lt;p&gt;So, without further ado, I was very pleased to send this e-mail this morning. (and once again reaffirm my committment to never writing another book ever again. Until next time!)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Yaron Minsky, Jason Hickey and I are pleased to announce the beta release of our forthcoming O&amp;#8217;Reilly book, called &amp;#8220;Real World OCaml&amp;#8221;, available online at &lt;a href=&quot;http://realworldocaml.org&quot;&gt;http://realworldocaml.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The book is split into three parts: language concepts, tools and techniques, and understanding the runtime. As promised last year, we are making a public beta available for community review and to help us hunt down inaccuracies and find areas that need more clarification.&lt;/p&gt;

&lt;p&gt;We&amp;#8217;ve had the book in closed alpha for six months or so and have developed a feedback system that uses Github to record your comments. This lets us follow up to each review with clarifications and keep track of our progress in fixing issues. During alpha, we&amp;#8217;ve received over 1400 comments in this fashion (and addressed the vast majority of them!). However, since we anticipate more comments coming in from a public beta, we would request that you read the FAQ to avoid drowning us in repeat comments: &lt;a href=&quot;http://www.realworldocaml.org/#faq&quot;&gt;http://www.realworldocaml.org/#faq&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;(TL;DR followup another comment on Github directly if you can instead of creating a new issue via the web interface)&lt;/p&gt;

&lt;p&gt;This release is available in HTML format online at: &lt;a href=&quot;http://realworldocaml.org&quot;&gt;http://www.realworldocaml.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O&amp;#8217;Reilly is currently preparing a Rough Cuts release that will make the beta available as PDF and in popular eBook formats. We anticipate that this will be available later this week, and I&amp;#8217;ll send a followup when that happens.&lt;/p&gt;

&lt;p&gt;Finally, we would especially like to thank our alpha reviewers. Their &lt;a href=&quot;https://github.com/ocamllabs/rwo-comments/issues&quot;&gt;feedback&lt;/a&gt; has been invaluable to the beta release. The book also includes substantial contributions to individual chapters from Jeremy Yallop (FFI), Stephen Weeks (GC) and Leo White (objects).&lt;/p&gt;

&lt;p&gt;If you have any comments that you&amp;#8217;d like to send directly by e-mail, please contact us at &lt;a href=&quot;mailto:rwo-authors@recoil.org&quot;&gt;rwo-authors@recoil.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Release notes for beta1:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first-class modules chapter is incomplete, pending some portability improvements to the ocaml-plugins Core library.&lt;/li&gt;

&lt;li&gt;The binary serialization chapter is also incomplete, but has just enough to teach you about the Async RPC library.&lt;/li&gt;

&lt;li&gt;The installation chapter will be revised in anticipation of the OCaml 4.1 release, and is currently quite source-based.&lt;/li&gt;

&lt;li&gt;The packaging and build systems chapter hasn&amp;#8217;t been started yet. We&amp;#8217;re still deciding whether or not to make this an online pointer rather than a print chapter, since it&amp;#8217;s likely to change quite fast.&lt;/li&gt;

&lt;li&gt;We are preparing exercises per chapter that are not included in this particular beta release, but will be available online as soon as possible.&lt;/li&gt;

&lt;li&gt;The code examples will all be clonable as a separate repository in beta2.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;best, Yaron, Jason and Anil&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded>
	<dc:date>2013-06-16T23:00:00+00:00</dc:date>
</item>
<item rdf:about="http://www.cl.cam.ac.uk/projects/ocamllabs/news/2013-06-01">
	<title>Monthly News: Jun 2013 news update</title>
	<link>http://www.cl.cam.ac.uk/projects/ocamllabs/news/index.html#Jun%202013</link>
	<content:encoded>&lt;div&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/rwo-celebration.jpg&quot;&gt;&lt;img src=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/rwo-celebration-thumb.jpg&quot; class=&quot;left&quot; /&gt;&lt;/a&gt;
The rain continues to plummet down relentlessly as &quot;summer&quot; starts in OCaml
Labs. The most exciting news has been the public release of the &lt;a href=&quot;https://realworldocaml.org&quot;&gt;Real World
OCaml&lt;/a&gt;, which hit the front page of the usual news
aggregators and generated huge interest!  This (reminiscent of the Xen 1.0
release) promptly took down servers for a couple of hours, but we managed to
minimise downtime in time for the Californians waking up.&lt;/p&gt;
&lt;p&gt;O'Reilly has also started selling PDF copies of the book under their &lt;a href=&quot;http://shop.oreilly.com/product/0636920024743.do&quot;&gt;Rough
Cuts&lt;/a&gt; program.  This gives you
a copy of the final book when it's released too.  Commenting is still open
on the &lt;a href=&quot;http://realworldocaml.org&quot;&gt;online version&lt;/a&gt;, so please do feel free to
participate there if you have time.&lt;/p&gt;
&lt;h3 id=&quot;SystemsProjects&quot;&gt; Systems Projects&lt;/h3&gt;
&lt;p&gt;&lt;b&gt;Mirage&lt;/b&gt;: Anil and Dave did the last of the sweeping build changes to make
Mirage friendlier to use for beginners.  Previously, we required a custom OPAM
switch to build kernels, but now we use &lt;a href=&quot;http://www.openmirage.org/wiki/weekly-2013-06-11&quot;&gt;virtual
packages&lt;/a&gt; to separate the
choice of compiler and packages.  This of course breaks all our documentation,
but we're going to do a big sweep in July before
&lt;a href=&quot;http://www.oscon.com/oscon2013/public/schedule/speaker/109140&quot;&gt;OSCON&lt;/a&gt; with the
new scheme.  Vincent has also been burning through the core platform libraries,
cleaning them up and adding documentation strings.  He is also building a
shared memory &lt;a href=&quot;http://github.com/vbmithr/ocaml-vchan&quot;&gt;vchan&lt;/a&gt; driver that will
make parallel-Mirage unikernels very easy to coordinate on the same host.&lt;/p&gt;
&lt;p&gt;The huge news from our friends at Citrix is the open-sourcing of
&lt;a href=&quot;http://www.xenserver.org&quot;&gt;XenServer&lt;/a&gt;, which is the popular Citrix product that
embeds the &lt;a href=&quot;https://github.com/xapi-project&quot;&gt;OCaml XAPI&lt;/a&gt; cloud management
stack.  There are almost 100 major components
&lt;a href=&quot;http://github.com/xenserver&quot;&gt;released&lt;/a&gt; as part of this, several of which can
be directly reused with Mirage.  Mirage was always an ambitious project, but
it's all coming together now thanks to bold moves such as this from Citrix!&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Signpost:&lt;/b&gt; We woke up to the excellent but slightly scary news that
our &lt;a href=&quot;https://www.usenix.org/conference/foci13&quot;&gt;USENIX FOCI&lt;/a&gt; paper was accepted.
This now means that we get to present it in August at USENIX Security, but
the team is now racing to pull together the prototypes into a complete system
before the conference.  Nothing like a deadline to focus the mind!  We're
also working on the camera-ready version of the paper, which we will share
here when it's ready.&lt;/p&gt;
&lt;h3 id=&quot;PlatformProjects&quot;&gt; Platform Projects&lt;/h3&gt;
&lt;p&gt;&lt;b&gt;OCamlot:&lt;/b&gt; David Sheets did an astounding job at pulling together a
working continuous build system in a very short amount of time, and promptly
managed to melt some of the older &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/platform.html#Machine%20Pool&quot;&gt;non-x86
machines&lt;/a&gt; in Anil's office.  Once Anil
sadly replaced them, the builder churned through a matrix of different compiler
versions (4.0,4.1dev,4.2dev), architectures (x86, x86_64, ARM, PowerPC), and
operating systems (Debian, Ubuntu, FreeBSD, OpenBSD to start with).  There's
a &lt;a href=&quot;https://ocaml-www3.ocamllabs.cl.cam.ac.uk/github/OCamlPro/opam-repository&quot;&gt;development URL&lt;/a&gt;, but
the next step is to retire this and move it to a proper home at &lt;a href=&quot;http://ocaml.org&quot;&gt;ocaml.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Having continuous build for OPAM is really, really useful though, as it lets us
vet pull requests on several architectures before merging them. It also let
Anil repair OCaml on &lt;a href=&quot;https://github.com/avsm/ocaml/commit/c1da5f35cda0ee85e576197b88f503333ed9e9a1&quot;&gt;OpenBSD/macppc&lt;/a&gt;
too, which is possibly the most obscure fix he's done in a while.&lt;/p&gt;
&lt;p&gt;The next steps with OCamlot are to take a shot at porting the core to
&lt;a href=&quot;http://github.com/janestreet/jenga&quot;&gt;Jenga&lt;/a&gt;, which is Jane Street's next-generation
distributed build system.  This should let us improve the fault-tolerance and
logging aspects of it before putting it properly into production later in the summer.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Ctypes:&lt;/b&gt; The May &lt;a href=&quot;http://github.com/ocamllabs/ocaml-ctypes&quot;&gt;release&lt;/a&gt;
brought with it a good chunk of feedback, so Jeremy spent time incorporating
that and contributing to the Real World OCaml ctypes chapter.  He also added
support for garbage-collecting closures passed to C, and also very cool support
for &lt;a href=&quot;https://github.com/ocamllabs/ocaml-ctypes/pull/27&quot;&gt;printing C types and values&lt;/a&gt;.
Our friends at Citrix have started looking at ctypes, and Rob Hoes has already
used it to write &lt;a href=&quot;https://github.com/robhoes/ocaml-libnl&quot;&gt;bindings&lt;/a&gt; to the
Netlink Protocol Library Suite.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/daniel-presentation-vg.jpg&quot;&gt;&lt;img src=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/daniel-presentation-vg-thumb.jpg&quot; class=&quot;right&quot; /&gt;&lt;/a&gt;
&lt;b&gt;OPAM-doc&lt;/b&gt;: Vincent Botbol got the documentation generator stable enough
to pass the Core library through.  This is particularly challenging since Core
exercises pretty much every trick in the book when it comes to the use of the
module system.  However, Vincent successfully demonstrated the workflow of
OPAM-doc at the end-of-month meeting, and is aiming to have a public release
via OPAM in July (hopefully in time for the next beta release of Real World OCaml,
which uses Core heavily).&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Visualisation libraries:&lt;/b&gt; &lt;a href=&quot;http://erratique.ch/contact.en&quot;&gt;Daniel Bünzli&lt;/a&gt; has
been spending a few months based in Citrix, working on a foundational new
declarative drawing library written in pure OCaml.  The &lt;a href=&quot;http://erratique.ch/software/vg&quot;&gt;Vg&lt;/a&gt; is already quite functional despite
still being in beta, and features a &lt;a href=&quot;http://erratique.ch/software/vg/demos/rhtmlc.html#arrowhead&quot;&gt;Javascript backend&lt;/a&gt;
that renders to both SVG and Canvas in HTML5.  That's not all though!  He's
also developing the &lt;a href=&quot;http://erratique.ch/software/vz&quot;&gt;Vz&lt;/a&gt; visualization library
that uses Vg to assemble more complex scenes and graphs.  Daniel's going to
join us in OCaml Labs for the remainder of the summer, so we're looking
forward to developing this more and using it on our various Platform projects
such as OCamlot.&lt;/p&gt;
&lt;h3 id=&quot;Outreach&quot;&gt; Outreach&lt;/h3&gt;
&lt;p&gt;&lt;b&gt;Real World OCaml:&lt;/b&gt; As mentioned earlier, the beta release of RWO went
splendidly, with a pleasing vibe that the book is what people expected.  There
were some interesting criticisms of the choice of Github authentication, but
we've had over 6000 registered commentators despite this (and of course, we
have plans &lt;a href=&quot;http://nymote.org&quot;&gt;brewing&lt;/a&gt; to tackle the identity problem).&lt;/p&gt;
&lt;p&gt;No beta release is perfect, of course, and our now-public commenting system has
resulted in &lt;a href=&quot;https://github.com/ocamllabs/rwo-comments/issues&quot;&gt;over 1500&lt;/a&gt;
issues being raised.  Well, that's all of Yaron, Anil and Jason's free time
gone for some time!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/amir-shisha.jpg&quot;&gt;&lt;img src=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/amir-shisha-thumb.jpg&quot; class=&quot;right&quot; /&gt;&lt;/a&gt;
&lt;b&gt;OCaml.org&lt;/b&gt;: We're in the process of looking at the site as a whole and
designing the workflow we'd like to have for growing and maintaining it.  Some
discussions have taken place about using Markdown in place of the current HTML
snippets, which would make it easier for external contributors to get involved.
In the meantime, Amir has converted the current site to Markdown format to see
how this process would work in practice.  You can see his experimenting and
scripts in the &lt;a href=&quot;https://github.com/ocamllabs/ocaml.org-temp&quot;&gt;temporary repo&lt;/a&gt; in
the &lt;code&gt;markdown-site/&lt;/code&gt; folder.
Philippe also showed off &lt;a href=&quot;https://github.com/pw374/MPP-language-blender&quot;&gt;MPP&lt;/a&gt;
at the internal meetings, and is stabilising it for a public release this
summer (once it has been integrated into the ocaml.org workflow).&lt;/p&gt;
&lt;p&gt;This month also had a number of programming language gurus show up at the Lab
for the &lt;em&gt;Algebraic Effects and Handlers&lt;/em&gt; workshop organised by &lt;a href=&quot;http://www.cl.cam.ac.uk/~ss368/&quot;&gt;Sam
Staton&lt;/a&gt;.  Most of the group attended this, as
we're all interested in how to encode effects for several of our projects (most
notably &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/t2.html#Irminsule&quot;&gt;Irminsule&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;We also enjoyed a visit by &lt;a href=&quot;https://github.com/bvaugon&quot;&gt;Benoît Vaugon&lt;/a&gt;, who gave a talk on his
&lt;a href=&quot;http://oud.ocaml.org/2012/slides/oud2012-paper10-slides.pdf&quot;&gt;OCamlCC&lt;/a&gt;
OCaml-to-C compiler, and also participated in a talk on
&lt;a href=&quot;http://www.algo-prog.info/ocaml_for_pic/web/index.php?id=ocapic&quot;&gt;OCAPIC&lt;/a&gt;. He
also chatted with us about his alternative &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=6017&quot;&gt;GADT-based implementation of
Printf&lt;/a&gt;, which promises to both
speed up and simplify the printer support in OCaml (and also relieve Mirage of
another dependency on &lt;code&gt;libc&lt;/code&gt;).&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;Link roundup:&lt;/i&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;a href=&quot;http://blog.xen.org/index.php/2013/06/25/xenserver-org-and-the-xen-project/&quot; class=&quot;icon-community&quot;&gt;XenServer open-sourced!&lt;/a&gt; &lt;em&gt;(Jun 25th)&lt;/em&gt;
 &lt;/li&gt;
 &lt;li&gt;&lt;a href=&quot;http://realworldocaml.org&quot; class=&quot;icon-quick-links&quot;&gt;Real World OCaml public beta now available.&lt;/a&gt; &lt;em&gt;(Jun 17th)&lt;/em&gt;
 &lt;/li&gt;
&lt;/ul&gt;

   &lt;/div&gt;</content:encoded>
	<dc:date>2013-06-01T12:00:00+00:00</dc:date>
	<dc:creator>Anil Madhavapeddy</dc:creator>
</item>
<item rdf:about="http://openmirage.org/blog/the-road-to-a-dev-release">
	<title>MirageOS: The road to a developer preview at OSCON 2013</title>
	<link>http://openmirage.org/blog/the-road-to-a-dev-release</link>
	<content:encoded>&lt;div&gt;
      &lt;p&gt;There's been a crazy stream of activity since the start of the year, but the most important news is that we have a release target for an integrated developer preview of the Mirage stack: a talk at &lt;a href=&quot;http://www.oscon.com/oscon2013/public/schedule/detail/28956&quot;&gt;O'Reilly OSCon&lt;/a&gt; in July!  Do turn up there and find &lt;a href=&quot;http://dave.recoil.org&quot;&gt;Dave Scott&lt;/a&gt; and &lt;a href=&quot;http://anil.recoil.org&quot;&gt;Anil Madhavapeddy&lt;/a&gt; showing off interactive demonstrations.&lt;/p&gt;&lt;p&gt;Meanwhile, another significant announcement has been that Xen is &lt;a href=&quot;http://www.linuxfoundation.org/news-media/announcements/2013/04/xen-become-linux-foundation-collaborative-project&quot;&gt;joining the Linux Foundation&lt;/a&gt; as a collaborative project.  This is great news for Mirage: as a library operating system, we can operate just as easily under other hypervisors, and even on bare-metal devices such as the &lt;a href=&quot;http://raspberrypi.org&quot;&gt;Raspberry Pi&lt;/a&gt;.  We're very much looking forward to getting the Xen-based developer release done, and interacting with the wider Linux community (and FreeBSD, for that matter, thanks to Gabor Pali's &lt;a href=&quot;https://github.com/pgj/mirage-kfreebsd&quot;&gt;kFreeBSD&lt;/a&gt; backend).&lt;/p&gt;&lt;p&gt;Here's some other significant news from the past few months:&lt;/p&gt;&lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;http://www.ocamlpro.com/blog/2013/03/14/opam-1.0.0.html&quot;&gt;OPAM 1.0 was released&lt;/a&gt;, giving Mirage a solid package manager for handling the many libraries required to glue an application together.  &lt;a href=&quot;https://github.com/vbmithr&quot;&gt;Vincent Bernardoff&lt;/a&gt; joined the team at Citrix and has been building a Mirage build-frontend called &lt;a href=&quot;https://github.com/mirage/mirari&quot;&gt;Mirari&lt;/a&gt; to hide much of the system complexity from a user who isn't too familiar with either Xen or OCaml.&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;A new group called the &lt;a href=&quot;http://ocaml.io&quot;&gt;OCaml Labs&lt;/a&gt; has started up in the &lt;a href=&quot;http://www.cl.cam.ac.uk&quot;&gt;Cambridge Computer Laboratory&lt;/a&gt;, and is working on improving the OCaml toolchain and platform.  This gives Mirage a big boost, as we can re-use several of the documentation, build and test improvements in our own releases.  You can read up on the group's activities via the &lt;a href=&quot;http://ocaml.io/news&quot;&gt;monthly updates&lt;/a&gt;, or browse through the various &lt;a href=&quot;http://ocaml.io/tasks&quot;&gt;projects&lt;/a&gt;.  One of the more important projects is the &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/platform.html#OCamlot&quot;&gt;OCamlot&lt;/a&gt; continuous build infrastructure, which will also be testing Mirage kernels as one of the supported backends.&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;As we head into release mode, we've started &lt;a href=&quot;http://openmirage.org/wiki/tag/overview/meetings&quot;&gt;weekly meetings&lt;/a&gt; to coordinate all the activities.  We're keeping notes as we go along, so you should be able to skim the notes and &lt;a href=&quot;https://lists.cam.ac.uk/pipermail/cl-mirage/&quot;&gt;mailing list archives&lt;/a&gt; to get a feel for the overall activities.  Anil is maintaining a &lt;a href=&quot;http://openmirage.org/wiki/dev-preview-checklist&quot;&gt;release checklist&lt;/a&gt; for the summer developer preview.&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;Anil (along with Yaron Minsky and Jason Hickey) is finishing up an O'Reilly book on &lt;a href=&quot;http://realworldocaml.org&quot;&gt;Real World OCaml&lt;/a&gt;, which will be a useful guide to using OCaml for systems and network programming. If you'd like to review an early copy, please get in touch.  The final book is anticipated to be released towards the end of the year, with a &lt;a href=&quot;http://shop.oreilly.com/category/roughcuts.do&quot;&gt;Rough Cut&lt;/a&gt; at the end of the summer.&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;The core system was described in an &lt;a href=&quot;http://anil.recoil.org/papers/2013-asplos-mirage.pdf&quot;&gt;ASPLOS 2013&lt;/a&gt; paper, which should help you understand the background behind library operating systems. Some of the Mirage libraries are also currently being integrated into the next-generation &lt;a href=&quot;http://blogs.citrix.com/2012/05/17/introducing-windsor-a-new-xen-based-virtualization-architecture/&quot;&gt;Windsor&lt;/a&gt; release of the Xen Cloud Platform, which means that several of the libraries will be used in production and hence move beyond research-quality code.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;&lt;p&gt;In the next few months, the installation notes and getting started guides will all be revamped to match the reality of the new tooling, so expect some flux there.   If you want to take an early try of Mirage beforehand, don't forget to hop on the &lt;code&gt;#mirage&lt;/code&gt; IRC channel on Freenode and ping us with questions directly.  We will also be migrating some of the project infrastructure to be fully self-hosted on Mirage and Xen, and placing some of the services onto the new &lt;a href=&quot;http://xenproject.org&quot;&gt;xenproject.org&lt;/a&gt; infrastructure.&lt;/p&gt; 
   &lt;/div&gt;</content:encoded>
	<dc:date>2013-05-20T16:20:00+00:00</dc:date>
	<dc:creator>Anil Madhavapeddy</dc:creator>
</item>
<item rdf:about="http://www.cl.cam.ac.uk/projects/ocamllabs/news/2013-05-01">
	<title>Monthly News: May 2013 news update</title>
	<link>http://www.cl.cam.ac.uk/projects/ocamllabs/news/index.html#May%202013</link>
	<content:encoded>&lt;div&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/thomas-nycoug-2013.jpg&quot;&gt;&lt;img src=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/thomas-nycoug-2013-thumb.jpg&quot; class=&quot;left&quot; /&gt;&lt;/a&gt;
May is exam time in Cambridge, and the corridors of the OCaml Labs resounded
with the wailing of frantic students finishing their dissertations and
preparing for exams.  We welcomed &lt;a href=&quot;https://github.com/vincent-botbol&quot;&gt;Vincent Botbol&lt;/a&gt; to join us for a summer internship,
and he started hacking on the new &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/platform.html#OPAM%20Doc&quot;&gt;opam-doc&lt;/a&gt;
right away.&lt;/p&gt;
&lt;p&gt;Anil, Thomas, Leo and Amir also visited &lt;a href=&quot;http://janestreet.com&quot;&gt;Jane
Street&lt;/a&gt; HQ in New York City, where we had a productive
couple of days reviewing our projects and getting feedback from them about
approaches to multicore and type system enhancements. &lt;a href=&quot;http://ashishagarwal.org&quot;&gt;Ashish
Agarwal&lt;/a&gt; also organised a fun evening with the &lt;a href=&quot;http://www.meetup.com/NYC-OCaml/events/117222022/&quot;&gt;New
York OCaml Users Group&lt;/a&gt;,
where Anil and Thomas presented our plans for the nascent OCaml Platform.&lt;/p&gt;
&lt;h3 id=&quot;SystemsProjects&quot;&gt; Systems Projects&lt;/h3&gt;
&lt;p&gt;&lt;b&gt;Mirage:&lt;/b&gt; This was a month of consolidation and bugfixing in Mirage.  We've
been settling into weekly meetings to coordinate the hacking between us and
Citrix, and the minutes (&lt;a href=&quot;http://www.openmirage.org/wiki/weekly-2013-05-14&quot;&gt;1&lt;/a&gt;
&lt;a href=&quot;http://www.openmirage.org/wiki/weekly-2013-05-21&quot;&gt;2&lt;/a&gt;
&lt;a href=&quot;http://www.openmirage.org/wiki/weekly-2013-05-28&quot;&gt;3&lt;/a&gt;) may be useful if you
want to catch up.  The biggest bugbear is always the build system, and we've
been exploring the use of &lt;a href=&quot;http://github.com/janestreet/jenga&quot;&gt;Jenga&lt;/a&gt; as the
eventual async-aware coordination and build system for running Mirage kernels.
Dave made great progress with a
&lt;a href=&quot;http://github.com/djs55/message-switch&quot;&gt;message-switch&lt;/a&gt; that coordinates
multiple kernels, and Balraj fixed several performance regressions in the
TCP/IP stack by building unit tests that spawn millions of parallel TCP
connections.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Signpost:&lt;/b&gt; We took a break from building prototypes to submit a paper on the
basic design to the USENIX Free and Open Communications (&lt;a href=&quot;https://www.usenix.org/conference/foci13&quot;&gt;FOCI
2013&lt;/a&gt;) workshop.  Haris and Heidi
blazed a path on writing this paper, and we've got even more ideas rolling
around about how to use DNSSEC to break the cloud deadlock.  The
&lt;a href=&quot;http://github.com/mirage/ocaml-dns&quot;&gt;ocaml-dns&lt;/a&gt; continues to grow features too.&lt;/p&gt;
&lt;h3 id=&quot;PlatformProjects&quot;&gt; Platform Projects&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/nycoug-drinkup-2013.jpg&quot;&gt;&lt;img src=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/nycoug-drinkup-2013-thumb.jpg&quot; class=&quot;right&quot; /&gt;&lt;/a&gt;
&lt;b&gt;Ctypes:&lt;/b&gt; Jeremy
&lt;a href=&quot;https://sympa.inria.fr/sympa/arc/caml-list/2013-06/msg00046.html&quot;&gt;announced&lt;/a&gt;
the first release of a new foreign-function mechanism for OCaml that doesn't
require you to write any C stubs at all!  You can browse the &lt;a href=&quot;https://github.com/ocamllabs/ocaml-ctypes&quot;&gt;source
code&lt;/a&gt; and
&lt;a href=&quot;https://github.com/ocamllabs/ocaml-ctypes/wiki/ctypes-tutorial&quot;&gt;tutorial&lt;/a&gt;, and
install it via OPAM.  This is very much the first 0.1 release, and we have
exciting future developments to turn this into a full-fledged replacement for
the fast-but-rather-difficult-to-use-right OCaml FFI.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;OPAM-doc:&lt;/b&gt; Vincent Botbol started building on Leo's work on the new
&lt;a href=&quot;http://github.com/vincent-botbol/opam-doc&quot;&gt;opam-doc&lt;/a&gt; tool. This is intended to
replace the venerable &lt;code&gt;ocamldoc&lt;/code&gt; with one that uses all the latest features of
the compiler.  In particular, it can use the new typed AST &lt;code&gt;cmt&lt;/code&gt; output to
avoid duplicating the compiler functionality, and can also build up a global
package table to generate complete cross-references across an entire OPAM 
collection.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;OCamlot:&lt;/b&gt; David has been building up the libraries and tools needed for
the &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/platform.html#OCamlot%200.2.0&quot;&gt;continuous build&lt;/a&gt; infrastructure.
This includes much-improved
&lt;a href=&quot;http://github.com/avsm/ocaml-github&quot;&gt;ocaml-github&lt;/a&gt;, bindings, which are now
being used to power the &lt;a href=&quot;https://realworldocaml.org&quot;&gt;Real World OCaml&lt;/a&gt; site as
well as well as OCamlot.  In addition, he's got an interesting collection of
regular expressions to automatically triage common failures from OPAM
(such as missing external dependencies), that should help reduce the manual
burden of getting thousands of tests results dumped on the small OPAM team.&lt;/p&gt;
&lt;h3 id=&quot;CompilerProjects&quot;&gt; Compiler Projects&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/janestreet-hq-2013.jpg&quot;&gt;&lt;img src=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/janestreet-hq-2013-thumb.jpg&quot; class=&quot;left&quot; /&gt;&lt;/a&gt;
&lt;b&gt;OCaml-Java&lt;/b&gt;: Xavier Clerc has been hacking away at his next-generation
OCaml-Java backend (using many new features in JDK7). He's released a
&lt;a href=&quot;http://ocamljava.x9c.fr/preview/concurrency.html&quot;&gt;preview&lt;/a&gt; of the bindings to
Java concurrency, and is looking for feedback on it.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Performance profiling&lt;/b&gt;: Mark Shinwell has been hacking on improving the
integration of the runtime with &lt;code&gt;perf&lt;/code&gt;.  This should give us the hooks to
reliably track where memory was allocated.  His branch isn't going to land in
OCaml 4.1, but should be available as an OPAM switch for people to easily
try out when it's more stable.&lt;/p&gt;
&lt;h3 id=&quot;Outreach&quot;&gt; Outreach&lt;/h3&gt;
&lt;p&gt;&lt;b&gt;OCaml.org:&lt;/b&gt; Philippe and Amir have been putting their heads together with
Christophe and Ashish to turn the &lt;a href=&quot;http://ocaml.org&quot;&gt;ocaml.org&lt;/a&gt; build pipeline
into something a little more structured.  Philippe is building a &lt;a href=&quot;https://github.com/pw374/MPP-language-blender&quot;&gt;template
processor&lt;/a&gt; for this purpose.
The OCaml site is a more complicated than the average site due to our desire to
embed &lt;a href=&quot;http://ocsigen.org/js_of_ocaml&quot;&gt;js_of_ocaml&lt;/a&gt; interactive toplevels
throughout the tutorials, and also to have active OPAM integration throughout
the site to make it easier for newcomers to sample the language.&lt;/p&gt;
&lt;p&gt;The design of a handful of pages are also now available to preview, if you
don't mind some manual git cloning. The best way to do this is to clone the
&lt;a href=&quot;https://github.com/ocamllabs/ocaml.org-temp&quot;&gt;temporary repo&lt;/a&gt; onto your local
machine and look in the &lt;code&gt;new-design/_site&lt;/code&gt; directory.  There are examples of
the home page, 100 lines of OCaml page and several others.  Since we're just
getting started with applying these changes the site isn't clicky (yet).  For
some extra fun, try resizing your browser window and see how the pages reflow
to suit smaller (mobile) screens!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/nyc-trip-balcony-view-2013.jpg&quot;&gt;&lt;img src=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/nyc-trip-balcony-view-2013-thumb.jpg&quot; class=&quot;right&quot; /&gt;&lt;/a&gt;
&lt;b&gt;Real World OCaml:&lt;/b&gt; Anil, Yaron and Jason continue to work hard on getting
a release out of the door.  We shipped a final alpha6 this month that is 
chapter-complete, and have been preparing for a big public June release of
the book.  Thousands of comments have been received and closed already,
making this an unusually active (but incredibly useful) ongoing review
process.  Leo and Jeremy also contributed portions of text for the Objects
and FFI chapters in alpha6, and join Stephen Weeks as external contributors
to the book.&lt;/p&gt;
&lt;p&gt;Meanwhile, Leo himself has recovered from the elation of being granted his PhD,
to the harsh reality of having to finish corrections.  He has been forced by
his colleagues to stop hacking on OCaml and submit his final thesis.  Rumours
are that he will reemerge in June after delivering his &lt;a href=&quot;http://staticanalysis.org/SAS13/papers.html&quot;&gt;SAS
2013&lt;/a&gt; talk on using an
implication-algebra generalisation of logic programming to concisely analyse
OpenMP programs for parallisation opportunities.&lt;/p&gt;
&lt;p&gt;This month's talk was courtesy of &lt;a href=&quot;http://www.lip6.fr/actualite/personnes-fiche.php?ident=D1161&amp;LANG=en&quot;&gt;Mathias Bourgoin&lt;/a&gt;,
who visited from France and gave a talk on his PhD work on GPU processing.  His
tool, &lt;a href=&quot;http://www.algo-prog.info/spoc/web/index.php?id=spoc&quot;&gt;SPOC&lt;/a&gt; has been
released onto OPAM and is a set of easy-to-use tools for generating CUDA and
OpenCL code, and also a camlp4 extension to write external kernels directly in
OCaml.  Thanks for visiting, Mathias!&lt;/p&gt;

   &lt;/div&gt;</content:encoded>
	<dc:date>2013-05-01T12:00:00+00:00</dc:date>
	<dc:creator>Anil Madhavapeddy</dc:creator>
</item>
<item rdf:about="http://www.cl.cam.ac.uk/projects/ocamllabs/news/2013-04-01">
	<title>Monthly News: Apr 2013 news update</title>
	<link>http://www.cl.cam.ac.uk/projects/ocamllabs/news/index.html#Apr%202013</link>
	<content:encoded>&lt;div&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/leo-oculus.jpg&quot;&gt;&lt;img src=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/leo-oculus-thumb.jpg&quot; width=&quot;150px&quot; class=&quot;left&quot; /&gt;&lt;/a&gt;
It's been a heads-down month of hacking at the Labs for April, as the
group have settled into their projects and are concentrating on getting code
out.  We did take the opportunity to redesign the &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/index.html&quot;&gt;project pages&lt;/a&gt; as the active projects grew.&lt;/p&gt;
&lt;p&gt;We welcomed &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/people/euan.html&quot;&gt;Euan Harris&lt;/a&gt; as a new visitor, and he has
begun work on a distributed actor library in the vein of Erlang's
&lt;a href=&quot;https://github.com/erlang/otp&quot;&gt;OTP&lt;/a&gt;.  The prolific &lt;a href=&quot;http://erratique.ch&quot;&gt;Daniel Bünzli&lt;/a&gt; also joined us for the summer to work on his &lt;a href=&quot;http://erratique.ch/software/vg/&quot;&gt;Vg&lt;/a&gt; visualisation library.  He's based out of the Citrix offices, and is also contributing to the Xen project.&lt;/p&gt;
&lt;h3 id=&quot;Platformprojects&quot;&gt; Platform projects&lt;/h3&gt;
&lt;p&gt;&lt;b&gt;OPAM: &lt;/b&gt; The project has entered a bug fixing stage after its release, and
the package set has steadily grown via external contributors. David Sheets has
been hacking away on the automated &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/platform.html#OCamlot&quot;&gt;OCamlot&lt;/a&gt;
bot, and we released improved &lt;a href=&quot;https://github.com/avsm/ocaml-github&quot;&gt;Github&lt;/a&gt;
API bindings.  We're aiming to get OCamlot live and running in May, so stay
tuned!  There is a &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/platform.html#Machine%20Pool&quot;&gt;steadily growing
collection&lt;/a&gt; of odd ARM and PowerPC
devices in Anil's desk that will generally make it easier to test your OCaml
code in unusual environments.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;OCaml.org redesign:&lt;/b&gt; Progress on the website continues and we're now
working on the actual HTML/CSS from the earlier
&lt;a href=&quot;https://github.com/ocaml/ocaml.org/wiki/Site-Redesign&quot;&gt;mockups&lt;/a&gt;.  We'll be
publishing these in a fork of the website
&lt;a href=&quot;https://github.com/ocamllabs/ocaml.org&quot;&gt;repository&lt;/a&gt;, so do feel free to create
issues there with your comments.  Philippe has begun the
&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/outreach.html#Meta%20preprocessor&quot;&gt;MPP&lt;/a&gt; templating tool to glue together
all the website scripts more coherently. Discussions about this take place on
the &lt;a href=&quot;http://lists.ocaml.org/listinfo/infrastructure&quot;&gt;infrastructure&lt;/a&gt; mailing
list, which is open to all.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/makespace-apr-2013.jpg&quot;&gt;&lt;img src=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/makespace-apr-2013-thumb.jpg&quot; width=&quot;150px&quot; class=&quot;left&quot; /&gt;&lt;/a&gt;
The monthly OCaml get togethers in the &lt;a href=&quot;http://makespace.org&quot;&gt;Cambridge
Makespace&lt;/a&gt; are also really fun.  This month saw around 30
people wander through the doors, and work through the latest excerpts of
&lt;a href=&quot;http://realworldocaml.org&quot;&gt;Real World OCaml&lt;/a&gt;. And around midnight, Jeremy and
Leo competed to find more and more obscure
&lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=5992&quot;&gt;bugs&lt;/a&gt; in the corners of the
OCaml type system...  You can track the subsequent meetups via the &lt;a href=&quot;http://www.meetup.com/Cambridge-NonDysFunctional-Programmers/events/114286762/&quot;&gt;NonDysFunctional Meetup group&lt;/a&gt;, which includes functional programmers from around the Cambridgeshire area.  Jon and Anil also attended the &lt;a href=&quot;http://developer.yahoo.com/events/hack_europe_london/&quot;&gt;Yahoo Hackday&lt;/a&gt; in London, where Jon met a giant robot and started &lt;a href=&quot;https://github.com/jonludlam/mssl&quot;&gt;SSL bindings&lt;/a&gt;, and Anil experimented with &lt;a href=&quot;http://github.com/avsm/ocaml-js-localstorage&quot;&gt;js_of_ocaml LocalStorage&lt;/a&gt; for Irminsule.&lt;/p&gt;
&lt;h3 id=&quot;Systemsprojects&quot;&gt; Systems projects&lt;/h3&gt;
&lt;p&gt;&lt;b&gt;Mirage&lt;/b&gt;: We've finally got a release date for the first preview of
Mirage, which will be at &lt;a href=&quot;http://www.oscon.com/oscon2013/public/schedule/detail/28956&quot;&gt;O'Reilly OSCON&lt;/a&gt; this July!  Pulling together the release is a big endeavour, and the
&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/mirage.html&quot;&gt;team&lt;/a&gt; has started weekly calls to work through the
project.  The minutes for these are online, so you can
&lt;a href=&quot;http://www.openmirage.org/wiki/tag/overview/meetings&quot;&gt;browse&lt;/a&gt; them to catch
up. There's also a slightly scary
&lt;a href=&quot;http://www.openmirage.org/wiki/dev-preview-checklist&quot;&gt;checklist&lt;/a&gt; of all the
libraries that need to be released before July, so the team has its work cut
out for it!  The Xen group also announced that it is joining the Linux Foundation,
and the &lt;a href=&quot;http://www.linuxfoundation.org/news-media/announcements/2013/04/xen-become-linux-foundation-collaborative-project&quot;&gt;press release&lt;/a&gt; gave Mirage a prominent mention as one of the key recent developments in Xen.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/jon-robot-yahoo.jpg&quot;&gt;&lt;img src=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/jon-robot-yahoo-thumb.jpg&quot; width=&quot;120px&quot; class=&quot;right&quot; /&gt;&lt;/a&gt;
&lt;b&gt;Irminsule&lt;/b&gt;: Thomas now has a full implementation of the git file format
in his &lt;a href=&quot;http://github.com/samoht/cagit&quot;&gt;cagit&lt;/a&gt; repository, and the interfaces
for Irminsule's branch-consistent model are coming together.  He gave a demo to
the Mirage team, with &lt;a href=&quot;http://www.openmirage.org/wiki/weekly-2013-04-23&quot;&gt;discussion
notes&lt;/a&gt; available.&lt;/p&gt;
&lt;h3 id=&quot;Compilerprojects&quot;&gt; Compiler projects&lt;/h3&gt;
&lt;p&gt;&lt;b&gt;Multicore and Concurrency&lt;/b&gt;: Stephen Dolan's made great progress on bringing up a multicore
runtime using &lt;a href=&quot;https://github.com/stedolan/ocaml&quot;&gt;thread-local storage&lt;/a&gt;, which results
in a surprisingly compact diff to the OCaml runtime.  We're now moving onto the
higher-level bindings to use the parallel runtimes effectively from within OCaml.
We also began a &lt;a href=&quot;http://lists.ocaml.org/listinfo/wg-parallel&quot;&gt;wg-parallel&lt;/a&gt; working
group in order to start figuring out the evolution of the &lt;a href=&quot;http://ocsigen.org/lwt&quot;&gt;Lwt&lt;/a&gt; and 
&lt;a href=&quot;https://github.com/janestreet/async&quot;&gt;Async&lt;/a&gt; concurrency libraries.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;libffi&lt;/b&gt;: Jeremy got frustrated by the difficulty of writing safe C bindings,
and started the &lt;a href=&quot;http://github.com/ocamllabs/ocaml-ctypes&quot;&gt;ctypes&lt;/a&gt; library, which
offers a pure OCaml solution. This even includes managing callbacks across the
OCaml/C divide, and uses &lt;a href=&quot;https://github.com/atgreen/libffi&quot;&gt;libffi&lt;/a&gt; under the hood
to remain efficient and platform-independent.  There is the exciting possibility
about hooking this library with the &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/compiler.html#Compile-time%20meta%20programming&quot;&gt;compile-time metaprogramming&lt;/a&gt; to eliminate all performance cost, so we're going to spend some time
on this project to make it a well-documented alternative to the existing C FFI.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/mezzo-talk.jpg&quot;&gt;&lt;img src=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/mezzo-talk.jpg&quot; width=&quot;120px&quot; class=&quot;right&quot; /&gt;&lt;/a&gt;
The OCaml Labs talk series continued with a visit from &lt;a href=&quot;http://gallium.inria.fr/~fpottier/&quot;&gt;Francois
Pottier&lt;/a&gt; ad &lt;a href=&quot;http://www.xulforum.org&quot;&gt;Jonathan
Protzenko&lt;/a&gt; from the INRIA
&lt;a href=&quot;http://gallium.inria.fr&quot;&gt;Gallium&lt;/a&gt; research team.  Jonathan presented their
&lt;a href=&quot;http://gallium.inria.fr/~protzenk/mezzo-lang&quot;&gt;Mezzo&lt;/a&gt; language, which places
emphasis on aliasing and controlled access to mutation.  This is of particular
interest to several of our systems projects that do not require the full power of
OCaml to build low-level systems components, and Raphael, Alan, Leo and Anil
had productive discussions about how we could try Mezzo out when it's released.&lt;/p&gt;
&lt;p&gt;&lt;i&gt;Link roundup:&lt;/i&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;a href=&quot;http://www.linuxfoundation.org/news-media/announcements/2013/04/xen-become-linux-foundation-collaborative-project&quot; class=&quot;icon-rss&quot;&gt;Xen and MirageOS to join Linux Foundation&lt;/a&gt; &lt;em&gt;(Apr 14th)&lt;/em&gt;
 &lt;/li&gt;
 &lt;li&gt;&lt;a href=&quot;http://www.meetup.com/Cambridge-NonDysFunctional-Programmers/events/114286762/&quot; class=&quot;icon-community&quot;&gt;OCaml Hacking/Meetup Session&lt;/a&gt; &lt;em&gt;(Apr 18th)&lt;/em&gt;
 &lt;/li&gt;
 &lt;li&gt;&lt;a href=&quot;http://www.oscon.com/oscon2013/public/schedule/detail/28956&quot; class=&quot;icon-quick-links&quot;&gt;OSCon Mirage talk selected.&lt;/a&gt; &lt;em&gt;(Apr 21st)&lt;/em&gt;
 &lt;/li&gt;
&lt;/ul&gt;

   &lt;/div&gt;</content:encoded>
	<dc:date>2013-04-01T12:00:00+00:00</dc:date>
	<dc:creator>Anil Madhavapeddy</dc:creator>
</item>
<item rdf:about="http://amirchaudhry.com/wireframe-demos-for-ocamlorg">
	<title>Amir Chaudhry: Wireframe demos for OCaml.org</title>
	<link>http://amirchaudhry.com/wireframe-demos-for-ocamlorg</link>
	<content:encoded>&lt;h3 id=&quot;making_mockups&quot;&gt;Making mockups&lt;/h3&gt;

&lt;p&gt;Over the last few months, I&amp;#8217;ve been working on various aspects of the &lt;a href=&quot;http://ocaml.org&quot;&gt;OCaml.org&lt;/a&gt; design project. This covers things like the design, information architecture and how to incorporate new functionality. One of the methods for thinking through these was to put together a bunch of wireframes using &lt;a href=&quot;http://www.balsamiq.com&quot;&gt;Balsamiq&lt;/a&gt; and use these to express (and generate) ideas as well as get feedback quickly.&lt;/p&gt;

&lt;p&gt;If you haven&amp;#8217;t used wireframes before, think of them as a slightly more advanced form of sketching things out on a whiteboard. The best aspect is that it&amp;#8217;s far quicker, easier and &lt;em&gt;cheaper&lt;/em&gt; to iterate using wireframes than on an actual website. As you&amp;#8217;ll see below, you can also convey a lot of information about how a site might work by showing people a clickable demo.&lt;/p&gt;

&lt;p&gt;I want to make this work public and I thought the best way would be to show you some screencasts of how the upcoming &lt;a href=&quot;http://ocaml.org&quot;&gt;OCaml.org&lt;/a&gt; website might work and also make the demo available to all of you. The three videos below cover three aspects of the site and I&amp;#8217;d encourage you to go through them in order (about 16 minutes in total). Apologies if my screen isn&amp;#8217;t particularly clear in the videos but you can visit the demo for yourself and see things in more detail (link and info on feedback at the end of this post).&lt;/p&gt;

&lt;h3 id=&quot;video_walkthroughs&quot;&gt;Video walkthroughs&lt;/h3&gt;

&lt;p&gt;For those who&amp;#8217;d like to watch the videos back-to-back and scaled to fit your browser window, you can &lt;a href=&quot;http://vimeo.com/couchmode/album/2301640&quot;&gt;view the Vimeo album in &amp;#8216;couchmode&amp;#8217;&lt;/a&gt;. Otherwise, individual videos are embedded below (total time 16m17s).&lt;/p&gt;

&lt;p&gt;&amp;#32; Video Part 1 - Overview - http://player.vimeo.com/video/61768157&lt;/p&gt;

&lt;p&gt;&amp;#32; Video Part 2 - Documentation - http://player.vimeo.com/video/61768235&lt;/p&gt;

&lt;p&gt;&amp;#32; Video Part 3 - Continuous Integration - http://player.vimeo.com/video/61768273&lt;/p&gt;

&lt;h3 id=&quot;public_wireframe_demo&quot;&gt;Public wireframe demo&lt;/h3&gt;

&lt;p&gt;A demo you can interact with can be found at &lt;a href=&quot;https://ocaml.mybalsamiq.com/projects/public-demo/naked/0_home?key=b897ea86d8a8199c6e46b3295ddf630dfa33e5e1&quot;&gt;OCaml.org wireframe demo&lt;/a&gt; and image files for each page are available on the &lt;a href=&quot;https://github.com/ocaml/ocaml.org/wiki/Wireframes&quot;&gt;github ocaml.org wiki&lt;/a&gt;. Please bear in mind the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Not everything that looks like it might be clickable actually is (and vice versa). There&amp;#8217;ll be a toggle on the bottom right of the browser window that will highlight what can be clicked.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;There are parts of the site which are &amp;#8216;work in progress&amp;#8217; and are marked as such.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;The designs you see aren&amp;#8217;t necessarily final. Your feedback will help shape our decisions and the best way to provide it is via the &lt;a href=&quot;http://lists.ocaml.org/listinfo/infrastructure&quot;&gt;infrastructure mailing list&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded>
	<dc:date>2013-03-14T07:00:00+00:00</dc:date>
</item>
<item rdf:about="http://lpw25.net/2013/03/10/ocaml-namespaces">
	<title>Leo White: Adding namespaces to OCaml</title>
	<link>http://lpw25.net/2013/03/10/ocaml-namespaces.html</link>
	<content:encoded>&lt;div class=&quot;well well-small&quot;&gt;
  &lt;h4&gt;
Contents
&lt;/h4&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.lpw25.net/atom.xml#problems-with-pack&quot;&gt;Problems with pack&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.lpw25.net/atom.xml#formal-semantics&quot;&gt;Formal semantics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.lpw25.net/atom.xml#design-goals&quot;&gt;Design goals&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.lpw25.net/atom.xml#design-choices&quot;&gt;Design choices&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.lpw25.net/atom.xml#flat-or-hierarchical&quot;&gt;Flat or hierarchical?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.lpw25.net/atom.xml#should-namespaces-be-opened-explicitly-in-source-code&quot;&gt;Should namespaces be opened explicitly in source code?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.lpw25.net/atom.xml#how-should-the-compiler-find-modules-in-the-presence-of-namespaces&quot;&gt;How should the compiler find modules in the presence of namespaces?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.lpw25.net/atom.xml#how-should-namespaces-specified&quot;&gt;How should namespaces specified?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.lpw25.net/atom.xml#how-rich-should-a-description-language-be&quot;&gt;How rich should a description language be?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.lpw25.net/atom.xml#should-namespaces-support-automatically-opened-members&quot;&gt;Should namespaces support automatically opened members?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.lpw25.net/atom.xml#proposal&quot;&gt;Proposal&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.lpw25.net/atom.xml#simple-namespaces-through-filenames&quot;&gt;Simple namespaces through filenames&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.lpw25.net/atom.xml#an-alternative-to-search-paths&quot;&gt;An alternative to search paths&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.lpw25.net/atom.xml#the--name-argument&quot;&gt;The “-name” argument&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.lpw25.net/atom.xml#the--open-argument&quot;&gt;The “-open” argument&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;

&lt;p&gt;Recently there has been a lot of discussion on
&lt;a href=&quot;http://lists.ocaml.org/listinfo/platform&quot;&gt;platform@lists.ocaml.org&lt;/a&gt; about
proposals for adding namespaces to OCaml. I’ve written this post to summarise
the design decisions for such a proposal and to make my own proposal.&lt;/p&gt;

&lt;p&gt;Before discussing what namespaces are and the issues surrounding their
implementation, it is important to explain why they are needed in the first
place. &lt;/p&gt;

&lt;p&gt;The most important reason for adding namespaces is to provide some means for
grouping the components of a library together. Up to now this has been
achieved using the OCaml module system. Since the components of an OCaml
library are modules, a module can be created that contains all the components
of the library as sub-modules. The “-pack” option for the compiler was created
to allow this module to be created while still keeping each component of the
library in its own file.&lt;/p&gt;

&lt;h3 id=&quot;problems-with-pack&quot;&gt;Problems with pack&lt;/h3&gt;

&lt;p&gt;There are some critical problems with using “-pack” to create a single module
containing the whole library:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The packed module is a single unit that has to be linked or not as a
unit. This means that any program using part of the library must include the
entire library.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The packed module is a choke-point in the dependency graph.  If a file
depends on one thing in the packed module then it needs to be recompiled if
anything in the packed module changes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Opening a large packed module is very slow and can seriously affect build
performance.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These problems are all caused by the fact that pack creates an OCaml
module. To understand this consider the run-time semantics of the module
system.&lt;/p&gt;

&lt;p&gt;At run-time a module is a record. Initialising a module involves initialising
every component of the module and placing them in this record.  Initialising
these components can involve executing arbitrary code; in fact the execution
of an OCaml program is simply the initialisation of all its modules.&lt;/p&gt;

&lt;p&gt;The problems with pack are related to these dynamic semantics. In order to
be a module pack must create a record to represent this module. This means
that it must initialise all of its components. It is this (rather than any
detail of pack’s implementation) that causes the problems identified above.&lt;/p&gt;

&lt;p&gt;Access to the components of a top-level module could proceed without the
existence of this record. However, the record is required in order to “alias”
the module, use the module as a first-class value or use it as the argument to
a functor.&lt;/p&gt;

&lt;p&gt;Any attempt to overcome the problems with pack, whilst still maintaining
the illusion that the “pack” is a normal module, would result (at the very
least) in one of the following unhealthy situations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The module type of the “packed module” would depend on which of its
components were accessed by the program.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Any use of the “packed module” other than as a simple container
(e.g.
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;CS&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;Core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Std&lt;/span&gt;&lt;/code&gt;&lt;/span&gt; 
) could have a dramatic effect on what was
linked into the program and potentially on the semantics of the program.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Namespaces are basically modules that can only be used as a simple
container. This means that they do not need a corresponding record at
run-time (or any other run-time representation). This avoids the problems
with pack as well as enabling other useful features.&lt;/p&gt;

&lt;h3 id=&quot;formal-semantics&quot;&gt;Formal semantics&lt;/h3&gt;

&lt;p&gt;Following the semantics and description language for namespaces described by
&lt;a href=&quot;http://gallium.inria.fr/~scherer/namespaces/spec.pdf&quot;&gt;Gabriel Scherer et al&lt;/a&gt;,
I will consider namespaces to be name-labelled trees whose leaves are
compilation units. I will use 
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;/code&gt;&lt;/span&gt; 
to represent projection on namespaces, so the 
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
member of the 
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
namespace will be referred to as 
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;.&lt;/p&gt;

&lt;h3 id=&quot;design-goals&quot;&gt;Design goals&lt;/h3&gt;

&lt;p&gt;Some design goals that we might want from a proposal for adding namespaces to
OCaml include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Allow library components to be grouped together without creating a module
containing them.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Allow users to group together modules from different libraries as they see
fit.&lt;/strong&gt; This means letting people change which namespace a library module is
in.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Allow library components to be given multiple names.&lt;/strong&gt; For example
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
and 
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Stable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
, where 
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Stable&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
is a namespace containing only those components whose interfaces are stable.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Be simple and easy to explain to beginners.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Allow multiple source files to share the same filename.&lt;/strong&gt; Each module that
is linked into an OCaml program must have a unique name. Currently, a
module’s name is completely determined by its filename. This forces library
developers to either use pack (which gives its components new long names) or
give their source files long names like “libName_Foo.ml”. A namespaces
proposal may be able to alleviate this problem.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Allow libraries to control which modules are open by default.&lt;/strong&gt; By default
OCaml opens the standard library’s 
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Pervasives&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
module. Libraries that wish to replace the standard library may also wish to
provide their own
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Pervasives&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
module and have it opened by default.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Support libraries that wish to remain compatible with versions of OCaml
without namespaces.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Require minimal changes to existing build systems.&lt;/strong&gt; Since a namespace
proposal changes how a library’s components are named, it may require
changes to some build systems. If these changes are too invasive then users
of some build systems will probably be unable to use namespaces in the near
future.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;design-choices&quot;&gt;Design choices&lt;/h3&gt;

&lt;h4 id=&quot;flat-or-hierarchical&quot;&gt;Flat or hierarchical?&lt;/h4&gt;

&lt;p&gt;In order to replace pack, namespaces must be able to contain modules. It is
not clear, however, whether they need to be able to contain other
namespaces. We call namespaces that can contain other namespaces
&lt;em&gt;hierarchical&lt;/em&gt;, as opposed to &lt;em&gt;flat&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In favour of flat namespaces:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Hierarchical namespaces might lead to arbitrary categorising of components
(e.g.&lt;br /&gt;
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Array&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
). These add syntactic clutter and do not bring any real benefit.  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Hierarchical namespaces might lead to deep java-style hierarchies
(e.g.&lt;br /&gt;
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Janestreet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Std&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
). These add syntactic clutter without adding any actual information.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In favour of hierarchical namespaces:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
A library may wish to provide multiple versions of some of its components. For
example:

&lt;ul&gt;
&lt;li&gt;    
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IO&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
 and 
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IO&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Windows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Directories&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
and 
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Unix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Directories&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Mutex&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
and 
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Testing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Mutex&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;/ul&gt;

In such situations it is useful to be able to write both


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Core&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[...]&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Testing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


and


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Testing&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[...]&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;Mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
None of the systems of namespaces that have been proposed have any
additional cost for supporting hierarchical namespaces.
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;should-namespaces-be-opened-explicitly-in-source-code&quot;&gt;Should namespaces be opened explicitly in source code?&lt;/h4&gt;

&lt;p&gt;There was some debate on the platform mailing list about whether to support
opening namespaces explicitly in source code. This means allowing a syntax
like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;that allows the members of namespace 
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
to be referenced directly (i.e.
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
can be referred to as 
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;).&lt;/p&gt;

&lt;p&gt;The alternative would be to only support opening namespaces through a
command-line argument.&lt;/p&gt;

&lt;p&gt;In favour of supporting explicit opens:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If you open two namespaces with commonly named sub-components then the order
of those opens matters. If the opens are command-line arguments then the
order of those command-line arguments (often determined by build systems and
other tools) matters. This is potentially very fragile.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Explicit opens in a source file give valuable information about which
libraries are being used by that source file. If a file contains “open
namespace Core” then you know it uses the Core library.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Local namespace opens provide users more precise control over their naming
environment.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Against supporting explicit opens:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;They require a new syntactic construct.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;how-should-the-compiler-find-modules-in-the-presence-of-namespaces&quot;&gt;How should the compiler find modules in the presence of namespaces?&lt;/h4&gt;

&lt;p&gt;Currently, when looking for a module 
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
that is not in the current environment, the OCaml compiler will search the
directories in its search path for a file called “bar.cmi”.&lt;/p&gt;

&lt;p&gt;In the presence of namespaces this becomes more complicated: how does the
compiler find the module 
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
?&lt;/p&gt;

&lt;p&gt;The suggested possible methods for finding modules in the presence of
namespaces fall into four categories.&lt;/p&gt;

&lt;h5 id=&quot;using-filenames&quot;&gt;Using filenames&lt;/h5&gt;

&lt;p&gt;By storing the interface for 
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
in a file named “foo-bar.cmi” the compiler can continue to simply look-up
modules in its search path.&lt;/p&gt;

&lt;p&gt;Note that “-“ is an illegal character in module names so there is no risk of
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
being confused with a module called 
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Foo-bar&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;This simple scheme does not support placing a module within multiple
namespaces or allowing users to put existing modules in a new namespace.&lt;/p&gt;

&lt;h5 id=&quot;checking-multiple-cmi-files&quot;&gt;Checking multiple “.cmi” files&lt;/h5&gt;

&lt;p&gt;The name of the namespace containing a compilation unit could be included in
the “.cmi” file of that unit. Then, when looking for a module 
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
, the compiler would try every “bar.cmi” file in its search path until it
found one that was part of the “Foo” namespace. This may require the compiler
to open all the “bar.cmi” files on its search path, which could be expensive
on certain operating systems.&lt;/p&gt;

&lt;p&gt;This scheme does not support allowing users to put existing modules in a new
namespace, but can support placing a module in multiple namespaces.&lt;/p&gt;

&lt;p&gt;It is difficult to detect typos in namespace open statements using this
scheme. For example, detecting that
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;open&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Sdt&lt;/span&gt;&lt;/code&gt;&lt;/span&gt; 
should have been
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;open&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Std&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
would require the compiler to check every file in its search path for one that
was part of namespace
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Sdt&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;.&lt;/p&gt;

&lt;h5 id=&quot;using-namespace-description-files&quot;&gt;Using namespace description files&lt;/h5&gt;

&lt;p&gt;The compiler could find a member of a namespace by consulting a file that
describes the members of that namespace.&lt;/p&gt;

&lt;p&gt;For example, if namespace 
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
was described by a file “foo.ns” that was on the compiler’s search path then
the compiler could find
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
by locating “foo.ns” and using it to look-up the location of the “.cmi” file
for
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;These namespace description files could be created automatically by some
tool. However, they must be produced before detecting dependencies with
OCamlDep, which could complicate the build process.&lt;/p&gt;

&lt;h5 id=&quot;using-environment-description-files&quot;&gt;Using environment description files&lt;/h5&gt;

&lt;p&gt;The compiler could find a member of a namespace by consulting a file that
describes a mapping between module names and “.cmi” files.&lt;/p&gt;

&lt;p&gt;For example, if a file “foo.mlpath” included the mapping “Foo#Bar:
foo/bar.cmi” then that file could be passed as a command-line argument to the
compiler and used to look up the “bar.cmi” file directly.&lt;/p&gt;

&lt;p&gt;Looking up modules using this scheme may speed up compilation by avoiding the
need to scan directories for files.&lt;/p&gt;

&lt;h4 id=&quot;how-should-namespaces-specified&quot;&gt;How should namespaces specified?&lt;/h4&gt;

&lt;p&gt;Perhaps the most important question for any namespaces proposal is how
namespaces are specified. It is closely related to the above question of how
the compiler finds modules in the presence of namespaces.&lt;/p&gt;

&lt;p&gt;The suggested possible methods for specifying namespaces fall into five
categories.&lt;/p&gt;

&lt;h5 id=&quot;explicitly-in-the-source-files&quot;&gt;Explicitly in the source files&lt;/h5&gt;

&lt;p&gt;Namespaces could be specified by adding a line like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;to the beginning of each compilation unit that is part of the 
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;/code&gt;&lt;/span&gt; 
namespace. &lt;/p&gt;

&lt;p&gt;This has the benefit of making namespaces explicitly part of the language
itself, however it does mean that the full name of a module is specified in
two locations: partly in the filename and partly within the file itself.&lt;/p&gt;

&lt;h5 id=&quot;through-command-line-arguments&quot;&gt;Through command-line arguments&lt;/h5&gt;

&lt;p&gt;Namespaces could be specified by passing a command-line argument to the
compiler. For example, 
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;&lt;/code&gt;&lt;/span&gt; 
could be compiled with the command-line:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;ocamlc -c -namespace Foo bar.ml 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This scheme also means that the full name of a module is specified in two
locations: partly in the build system and partly in the filename.&lt;/p&gt;

&lt;h5 id=&quot;through-filenames&quot;&gt;Through filenames&lt;/h5&gt;

&lt;p&gt;Namespaces could be specified using the filenames of source files. For
example, 
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;&lt;/code&gt;&lt;/span&gt; 
would be created by compiling a file “foo-bar.ml”&lt;/p&gt;

&lt;p&gt;This scheme is simple and very similar to how modules are currently named, but
it would require all source files to have long unique names.&lt;/p&gt;

&lt;h5 id=&quot;through-namespace-description-files&quot;&gt;Through namespace description files&lt;/h5&gt;

&lt;p&gt;Namespaces could be specified using namespace description files. The 
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
namespace would be specified by a file “foo.ns” that described the members of
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module Bar = &quot;foo_bar.cmi&quot;
namespace Testing = &quot;testing.ns&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;through-environment-description-files&quot;&gt;Through environment description files&lt;/h5&gt;

&lt;p&gt;Namespaces could be specified using environment description files. A namespace
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
would be defined by passing an environment description file to the compiler
that included mappings for each of the members of
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Foo#Bar: &quot;foo_bar.cmi&quot;
Foo#Testing#Bar: &quot;foo_testing_bar.cmi&quot;
Baz: &quot;baz.cmi&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition to specifying namespaces, this system allows users (or a tool like
OCamlFind) to have complete control the naming environment of a program.&lt;/p&gt;

&lt;h4 id=&quot;how-rich-should-a-description-language-be&quot;&gt;How rich should a description language be?&lt;/h4&gt;

&lt;p&gt;For namespace proposals that use namespace or environment description files,
they must decide how rich their description language should be.&lt;/p&gt;

&lt;p&gt;For example, &lt;a href=&quot;http://gallium.inria.fr/~scherer/namespaces/spec.pdf&quot;&gt;Gabriel Scherer et
al&lt;/a&gt; describe a very rich
environment description language including many different operations that can
be performed on namespaces.&lt;/p&gt;

&lt;p&gt;A rich description language can produce shorter descriptions. However, the
more operations a language supports the more syntax that users must understand
in order to read description files. The majority of description files are
unlikely to require complex operations.&lt;/p&gt;

&lt;h4 id=&quot;should-namespaces-support-automatically-opened-members&quot;&gt;Should namespaces support automatically opened members?&lt;/h4&gt;

&lt;p&gt;A feature of namespaces that has been proposed on the mailing list is to allow
some modules within a namespace to be automatically opened when the namespace
is also opened. This makes it seem that the namespace has values and types as
members.&lt;/p&gt;

&lt;p&gt;This feature is based on the current design of Jane Street’s Core
library. Users of the Core library are expected to open the
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Core&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;Std&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
 module before using the library. Opening this module provides access to all
the other modules of the library (much like opening a namespace), but it also
provides types and values similar to those provided by the standard library’s
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Pervasives&lt;/span&gt;&lt;/code&gt;&lt;/span&gt; module.&lt;/p&gt;

&lt;p&gt;Supporting auto-opened modules would allow 
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Core&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;Std&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
to be directly replaced by a namespace. However, the semantics of this feature
could be awkward due to potential conflicts between members of the namespace
and sub-modules of the auto-opened modules. It also increases the overlap
between namespaces and modules.&lt;/p&gt;

&lt;h3 id=&quot;proposal&quot;&gt;Proposal&lt;/h3&gt;

&lt;p&gt;In the last section of this post I will outline a namespaces proposal that I
think satisfies the design goals set out earlier.&lt;/p&gt;

&lt;p&gt;I think that satisfying these design goals requires a combination of
extensions to OCaml. My proposal is made up of four such extensions. To keep
things simple for users to understand, I have tried to keep each of these
extensions completely independent of the others and with a clearly defined
goal.&lt;/p&gt;

&lt;h4 id=&quot;simple-namespaces-through-filenames&quot;&gt;Simple namespaces through filenames&lt;/h4&gt;

&lt;p&gt;Currently, the name of a module is completely defined by its filename, and
modules are looked up using a simple search path. While it has some problems,
this simple paradigm has served OCaml well and I think that it is important to
provide some support for namespaces within this paradigm.&lt;/p&gt;

&lt;p&gt;This means allowing simple namespaces to be specified using source file
names. For example, to create a module 
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
within the namespace 
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
developers can simply create an implementation file “foo-bar.ml” and an
interface file “foo-bar.mli”. This interface file would be compiled to a
“foo-bar.cmi” file. Hierarchical namespaces would be created by files with
names like “foo-bar-baz.ml”.&lt;/p&gt;

&lt;p&gt;These namespaced modules can be referred to using the syntax 
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;. 
This syntax simply causes the compiler to look in its search path for a
“foo-bar.cmi” file.&lt;/p&gt;

&lt;p&gt;I also propose supporting a namespace opening syntax like:
&amp;lt;div class=&quot;highlight&quot;&amp;gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;
[...]
&lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;/div&amp;gt;&lt;/p&gt;

&lt;h4 id=&quot;an-alternative-to-search-paths&quot;&gt;An alternative to search paths&lt;/h4&gt;

&lt;p&gt;Forcing the name of a module to be completely defined by its (compiled)
filename makes it easy to look-up modules in a search path. However, it
prevents modules from being given multiple names or being renamed by users. So
I propose supporting an alternative look-up mechanism.&lt;/p&gt;

&lt;p&gt;I propose supporting environment description files called &lt;em&gt;search path
files&lt;/em&gt;. These files would have a syntax like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Foo#Bar : &quot;other_bar.cmi&quot;
Foo#Baz : Foo#Bar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This file can be given to the “-I” command-line argument instead of a
directory and used to look-up the locations of “.cmi” files for given module
names.&lt;/p&gt;

&lt;p&gt;These search path files can be used to alias modules and to create new
namespaces. They also allow a module to be available under multiple namespaces.&lt;/p&gt;

&lt;p&gt;I envisage two particular modes of use:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Library authors can write “.mlpath” files and tell OCamlFind to use that
file as its search path instead of a list of directories.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A user (or potentially OCamlFind) can create search path files to define
their entire naming environment as they see fit.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;the--name-argument&quot;&gt;The “-name” argument&lt;/h4&gt;

&lt;p&gt;While the hard link between a module’s name and the name of its source file
makes life easier for build systems (“list.cmi” can only be produced by
compiling “list.ml”), it forces library authors to give their source files long
unique names.&lt;/p&gt;

&lt;p&gt;I propose adding a “-name” command-line argument to the OCaml compiler. This
would be used as follows:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;ocamlc -c -name Foo#Bar other.ml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This command would produce a “foo-bar.cmi” file defining a module named
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
. This means that “.cmi” files would still be expected to be unique, but
source files could be named however the developer wants.&lt;/p&gt;

&lt;p&gt;Obviously, any tools that assume that a module 
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
must be compiled from a file called “bar.ml” will not work in this
situation. However, the only OCaml tool that absolutely relies on this
assumption is “OCamlDep” when it is producing makefile formatted output.&lt;/p&gt;

&lt;p&gt;Build systems would not be required to support the “-name” argument, however
it would make it easy for them to provide features such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Creating namespaces to reflect a directory structure (e.g. “foo/bar.mli” becomes “foo-bar.cmi”).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Placing all the modules of a library under a common namespace (e.g. “bar.mli” becomes “foo-bar.cmi”)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This would mean that the names of source files could be kept conveniently
short.&lt;/p&gt;

&lt;h4 id=&quot;the--open-argument&quot;&gt;The “-open” argument&lt;/h4&gt;

&lt;p&gt;My proposals do not include support for automatically opened modules within
namespaces. I feel that this feature conflates two separate issues and it
would be better to solve the problem of automatically opened modules elsewhere. &lt;/p&gt;

&lt;p&gt;Auto-opened modules are meant to allow libraries to provide their own
equivalent of the standard library’s 
&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Pervasives&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
module. I think that it would be more appropriate to have these “pervasive”
modules opened by default in any program compiled using one of these
libraries.&lt;/p&gt;

&lt;p&gt;I propose adding a command-line argument “-open” that could be used to open a
module by default:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;ocamlc -c -open core-pervasives.cmi foo.ml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;By adding support for this feature to OCamlFind, libraries could add this
argument to every program compiled using them. This amounts to having
automatically opened modules as part of the package system rather than part of
the namespace system.&lt;/p&gt;</content:encoded>
	<dc:date>2013-03-10T08:00:00+00:00</dc:date>
	<dc:creator>Leo White</dc:creator>
</item>
<item rdf:about="http://www.cl.cam.ac.uk/projects/ocamllabs/news/2013-03-01">
	<title>Monthly News: Mar 2013 news update</title>
	<link>http://www.cl.cam.ac.uk/projects/ocamllabs/news/index.html#Mar%202013</link>
	<content:encoded>&lt;div&gt;
      &lt;p&gt;The OCaml Labs hackers continue to arrive, with &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/people/sheets.html&quot;&gt;David
Sheets&lt;/a&gt; arriving from sunny San Francisco, and &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/people/xclerc.html&quot;&gt;Xavier Clerc&lt;/a&gt; visiting from the less-sunny
&lt;a href=&quot;http://www.inria.fr&quot;&gt;INRIA&lt;/a&gt; in France.  David's done great work on several
OCaml libraries such as &lt;a href=&quot;http://github.com/avsm/ocaml-cohttp&quot;&gt;Cohttp&lt;/a&gt; and on
&lt;a href=&quot;http://www.youtube.com/watch?v=ll9z1ULtgqo&amp;feature=plcp&quot;&gt;WebGL&lt;/a&gt;, and he's diving
straight into a first release of &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/platform.html&quot;&gt;OCamlot&lt;/a&gt; before
starting his PhD later in the year. Xavier will
work on releasing his &lt;a href=&quot;http://ocamljava.x9c.fr/preview/&quot;&gt;OCaml Java
2.0&lt;/a&gt; rewrite this summer, which takes
advantage of all the latest JDK features for non-Java languages.&lt;/p&gt;
&lt;p&gt;A new research grant has also been awarded to &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/people/crowcroft.html&quot;&gt;Jon Crowcroft&lt;/a&gt;.
The &lt;a href=&quot;http://hubofallthings.wordpress.com&quot;&gt;Hub of All Things&lt;/a&gt; is a £1.2m multi-disciplinary
project funded by the &lt;a href=&quot;http://www.rcuk.ac.uk/research/xrcprogrammes/Digital/Pages/home.aspx&quot;&gt;RCUK Digital Economy Programme&lt;/a&gt; and led by 
&lt;a href=&quot;http://www2.warwick.ac.uk/fac/sci/wmg/people/profile/?wmgid=849&quot;&gt;Irene Ng&lt;/a&gt; 
in Warwick.  HAT aims to create a home platform, under the user's control, 
where a market to exchange their personal data for new products and 
personalised services could exist.  The Cambridge piece of this work will use
&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/mirage.html&quot;&gt;Mirage&lt;/a&gt; for embedded systems programming, and
&lt;a href=&quot;http://signpost.io&quot;&gt;Signpost&lt;/a&gt;, to enable devices to connect and communicate
with each-other across the edge network.&lt;/p&gt;
&lt;h3 id=&quot;Platformprojects&quot;&gt; Platform projects&lt;/h3&gt;
&lt;p&gt;&lt;b&gt;OPAM: &lt;/b&gt; &lt;a href=&quot;http://opam.ocamlpro.com&quot;&gt;OPAM&lt;/a&gt;, the popular OCaml Package Manager, recently had its &lt;a href=&quot;http://www.ocamlpro.com/blog/2013/03/14/opam-1.0.0.html&quot;&gt;1.0
release&lt;/a&gt;!  OPAM has
been in development for just over a year, and this is a significant milestone
for the project.  The OPAM &lt;a href=&quot;https://github.com/OCamlPro/opam-repository/issues&quot;&gt;package repository&lt;/a&gt; has had over 500 issues, closed over 400 pull requests and now contains over 450 packages
(and more than twice that number if you consider that multiple versions are
available).  This kind of user adoption is a fantastic sign for the OCaml
community.  We're very happy to be using OPAM as a key piece of the upcoming
OCaml Platform and the continuous integration and test system.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml.org/wiki/Site-Redesign&quot;&gt;&lt;img src=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/ocaml_home_v2-2-thumb.jpg&quot; class=&quot;right&quot; width=&quot;220px&quot; /&gt;&lt;/a&gt;
&lt;b&gt;OCaml.org redesign:&lt;/b&gt; Amir extended the Balsamiq mockups into more
realistic static site designs that can be &lt;a href=&quot;https://github.com/ocaml/ocaml.org/wiki/Site-Redesign&quot;&gt;found on the
wiki&lt;/a&gt;.  We're building
on the theme we began with the &lt;a href=&quot;https://github.com/ocaml/ocaml.org/wiki/Draft-OCaml-Logos&quot;&gt;OCaml Logo&lt;/a&gt;, but also
including the full functionality we want for the revamped site.  The samples
should give people an idea of the colour schemes and images we'll be using, and
feedback is &lt;em&gt;very&lt;/em&gt; welcome.  Next, we're creating the HTML/CSS templates we
need to make these mockups a reality.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;OCamlot&lt;/b&gt;: Within hours of getting off the plane, David was already 
getting well into the OCaml-based test tool and working on the pieces we 
need to get to a usable first version.  The OCamlot workflow was last 
described in Amir's
&lt;a href=&quot;http://amirchaudhry.com/wireframe-demos-for-ocamlorg/&quot;&gt;Balsamiq mockups&lt;/a&gt;
in case you want to catch up.  This work is made all the more important as 
Jane Street continues to demonstrate their strong commitment to open-source 
by sending in OPAM pull requests 
&lt;a href=&quot;https://github.com/OCamlPro/opam-repository/pull/644&quot;&gt;every week&lt;/a&gt; 
for new releases of their &lt;a href=&quot;http://janestreet.github.io&quot;&gt;libraries&lt;/a&gt;.  The 
testing for these releases is currently handled manually and we're really 
looking forward to having them dealt with automatically!&lt;/p&gt;
&lt;h3 id=&quot;Systemsprojects&quot;&gt; Systems projects&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/asplos-mort.jpg&quot;&gt;&lt;img src=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/asplos-mort-thumb.jpg&quot; width=&quot;120px&quot; class=&quot;right&quot; /&gt;&lt;/a&gt;
&lt;b&gt;Mirage&lt;/b&gt;: There is much preparation ongoing for the big 
&lt;a href=&quot;http://wiki.xen.org/wiki/Mirage_Incubation_Project_Proposal&quot;&gt;xen.org incubation&lt;/a&gt;, 
which has now been approved by the Xen community board. Vincent's work on 
&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/mirage.html&quot;&gt;Mirari&lt;/a&gt; is going very well, and he's updated the 
&lt;a href=&quot;http://www.openmirage.org/wiki/install&quot;&gt;Mirage installation&lt;/a&gt; instructions 
to use Mirari instead of the manual process required before. 
&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/people/avsm.html&quot;&gt;Anil&lt;/a&gt; and &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/people/mort.html&quot;&gt;Mort&lt;/a&gt; also attended 
and presented the 
&lt;a href=&quot;http://anil.recoil.org/papers/2013-asplos-mirage.pdf&quot;&gt;ASPLOS 2013&lt;/a&gt; paper in 
Houston.  For the curious, 
&lt;a href=&quot;http://www.yelp.co.uk/biz/bens-beans-houston&quot;&gt;Ben's Beans&lt;/a&gt; is the only good 
coffee we could find suitable for a European in Texas.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Irminsule&lt;/b&gt;: Now that the core of Mirage is heading for release, the 
team is turning their attention to the storage and distributed programming 
challenge. &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/people/tg.html&quot;&gt;Thomas&lt;/a&gt; and Anil have been working on a new 
policy-free, branch-consistent storage layer that exposed a raw git-like 
universe to Mirage applications. We're working on as part of the 
&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/t2.html&quot;&gt;Trilogy2&lt;/a&gt; that's investigating how to improve the 
reliability of congested datacenters.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/heidi-signposts.jpg&quot;&gt;&lt;img src=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/heidi-signposts-thumb.jpg&quot; class=&quot;right&quot; width=&quot;130px&quot; /&gt;&lt;/a&gt;
&lt;b&gt;Signposts&lt;/b&gt;: &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/people/heidi.html&quot;&gt;Heidi&lt;/a&gt; gave an &lt;em&gt;excellent&lt;/em&gt; talk 
about Signpost and the benefits it can offer internet users today
&lt;i&gt;(see right)&lt;/i&gt;. This was one of a set of talks that took place in the 
Computer Lab, organised by &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/people/mycroft.html&quot;&gt;Alan Mycroft&lt;/a&gt;, on open 
software and open hardware with speakers such as
&lt;a href=&quot;http://en.wikipedia.org/wiki/Jon_Hall_(programmer)&quot;&gt;Jon 'maddog' Hall&lt;/a&gt; of
Linux International. There was fairly unanimous agreement that Heidi's 
slides were better than Anil's.&lt;/p&gt;
&lt;h3 id=&quot;Compilerprojects&quot;&gt; Compiler projects&lt;/h3&gt;
&lt;p&gt;&lt;b&gt;Multicore&lt;/b&gt;: Once the dreaded ICFP deadline was out of the way, 
Stephen, Leo, Raphael and Anil put their heads together to start 
architecting the support for parallel multicore support in the OCaml runtime.
A key part of the design space is to maintain the sequential performance and 
simplicity of the existing runtime, but still make it easy to extend shared 
memory onto different cores.  We'll have more details on this shortly when 
early prototypes are done and some benchmarks run.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Namespaces:&lt;/b&gt; Leo's also been extremely busy in the 
&lt;a href=&quot;http://lists.ocaml.org/listinfo/platform&quot;&gt;platform mailing list&lt;/a&gt;, which has 
been the location for the discussion of namespaces.  A few hundred emails 
have been exchanged on this topic and Leo has summarised the discussion and 
made proposals in his blog post about 
&lt;a href=&quot;http://www.lpw25.net/2013/03/10/ocaml-namespaces.html&quot;&gt;OCaml namespaces&lt;/a&gt;.  Although this is a complex issue, aspects of namespaces will be important to 
the work on the OCaml Platform so we look forward to the outcome of these 
discussions.&lt;/p&gt;
&lt;p&gt;&lt;i&gt;Link roundup:&lt;/i&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;a href=&quot;http://lists.ocaml.org/pipermail/platform/2013-March/000291.html&quot; class=&quot;icon-email&quot;&gt;OPAM 1.0 Released!&lt;/a&gt; &lt;em&gt;(Mar 14th)&lt;/em&gt;
 &lt;/li&gt;
 &lt;li&gt;&lt;a href=&quot;http://amirchaudhry.com/wireframe-demos-for-ocamlorg/&quot; class=&quot;icon-rss&quot;&gt;Wireframe demos for OCaml.org&lt;/a&gt; &lt;em&gt;(Mar 14th)&lt;/em&gt;
 &lt;/li&gt;
 &lt;li&gt;&lt;a href=&quot;http://www.lpw25.net/2013/03/10/ocaml-namespaces.html&quot; class=&quot;icon-rss&quot;&gt;Adding namespaces to OCaml&lt;/a&gt; &lt;em&gt;(Mar 10th)&lt;/em&gt;
 &lt;/li&gt;
&lt;/ul&gt;

   &lt;/div&gt;</content:encoded>
	<dc:date>2013-03-01T12:00:00+00:00</dc:date>
	<dc:creator>Anil Madhavapeddy</dc:creator>
</item>
<item rdf:about="http://lpw25.net/2013/02/05/camlp4-alternative-part-2">
	<title>Leo White: An alternative to camlp4 - Part 2</title>
	<link>http://lpw25.net/2013/02/05/camlp4-alternative-part-2.html</link>
	<content:encoded>&lt;p&gt;In my &lt;a href=&quot;http://www.lpw25.net/2013/01/23/camlp4-alternative-part-1.html&quot;&gt;previous blog post&lt;/a&gt; I
discussed how we might use AST transformers, attributes and quotations as a
simpler alternative to camlp4. While AST transformers are much simpler to use
than camlp4 they still require knowledge of the OCaml syntax tree, and they are
still implemented outside of the language as preprocessors.&lt;/p&gt;

&lt;p&gt;In this post I’ll explore how to implement extensions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;within the language itself without external preprocessors&lt;/li&gt;
  &lt;li&gt;without the need for detailed knowledge of the OCaml syntax tree&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By including these extensions in the language itself the increasing number of
tools being built to support OCaml (e.g. typerex) can handle them directly. For
instance, IDEs could show the expansions of quotations by using the information
in “.cmt” files.&lt;/p&gt;

&lt;p&gt;I will start with quotations, which can be implemented without any knowledge of
the OCaml syntax tree, and then expand my proposal to include other kinds of
extension.&lt;/p&gt;

&lt;p&gt;Since my previous post, there has been a lot of discussion on
&lt;a href=&quot;http://lists.ocaml.org/listinfo/wg-camlp4&quot;&gt;wg-camlp4@lists.ocaml.org&lt;/a&gt; about
possible syntaxes for quotations and attributes and other kinds of extension. In
keeping with those ongoing discussions, I will use &lt;code&gt;{:id { string }}&lt;/code&gt; as the
syntax for quotations (which transform a string into an AST node) and &lt;code&gt;(:id
expr)&lt;/code&gt; as the syntax for extensions that transform an OCaml expression into an
AST node.&lt;/p&gt;

&lt;p&gt;Note that the proposals in this post are more long-term than the “ppx” solution
discussed in the previous post. Moving an extension from ppx to the mechanism
described in this post would require only minimal work. So in the short/medium
term extension authors should implement their extensions using ppx.&lt;/p&gt;

&lt;h4 id=&quot;quotations&quot;&gt;Quotations&lt;/h4&gt;

&lt;p&gt;A quotation is simply a function which takes a string and returns an AST
node. To provide built-in support we need to, for every quotation &lt;code&gt;{:foo { bar
}}&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;find a function that corresponds to &lt;code&gt;foo&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;apply it to the string “ bar “ &lt;/li&gt;
  &lt;li&gt;copy the resulting AST node in place of the original quotation&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;quotations-in-modules&quot;&gt;Quotations in modules&lt;/h5&gt;

&lt;p&gt;We might want to find the function corresponding to quotation &lt;code&gt;foo&lt;/code&gt; by simply
looking in the current module, or one of the other modules in our environment,
for a function called &lt;code&gt;foo&lt;/code&gt;. However there are a few problems with this simple
scheme:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The function we call must exist and be compiled before we can use it.&lt;/li&gt;
  &lt;li&gt;There is no clear separation between what is being executed at compile-time
and what is being executed and run-time.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first problem basically means that we can only use functions defined in
other files. The other problem is more subtle.&lt;/p&gt;

&lt;p&gt;OCaml modules do not really exist at compile time. They are created at run-time,
and their creation encompasses the entire execution of the program. For example,
consider this simple module:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* main.ml *)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello, world!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To create the &lt;code&gt;Main&lt;/code&gt; module, we must create its member &lt;code&gt;x&lt;/code&gt;. Once the creation of
&lt;code&gt;Main&lt;/code&gt; is finished the &lt;code&gt;printf&lt;/code&gt; has been executed and the whole program has
completed. Now if we add a quotation function &lt;code&gt;foo&lt;/code&gt; to this module:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* main.ml *)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello, world!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keywords&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Hashtbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* Some expression using keywords *)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;How do we distinguish between data such as &lt;code&gt;keywords&lt;/code&gt; which are needed at
compile-time when the quotation is run, and data like &lt;code&gt;x&lt;/code&gt; whose creation is
meant to drive the program at run-time? There is nothing explicit in the
definitions of &lt;code&gt;foo&lt;/code&gt; or &lt;code&gt;keywords&lt;/code&gt; that indicates that they are intended for
compile-time execution.&lt;/p&gt;

&lt;p&gt;These problems are related to the fact that OCaml is an impure language. Any
expression (including module definitions) can have side-effects, and the
run-time behaviour of the program is simply the combination of all these
side-effects. This makes it difficult to separate the side-effects that are
related to a quotation from the side-effects that are part of the program’s
execution.&lt;/p&gt;

&lt;p&gt;Despite appearing alongside other functions in the program, &lt;code&gt;foo&lt;/code&gt; must be
executed in a completely separate environment. Any side-effects (e.g. mutable
state, I/O) that are produced while creating and executing &lt;code&gt;foo&lt;/code&gt; will be
completely separate from the side-effects of the other functions in its module.&lt;/p&gt;

&lt;h5 id=&quot;where-can-we-put-them&quot;&gt;Where can we put them?&lt;/h5&gt;

&lt;p&gt;If we don’t want to put quotation functions in our modules, where should we put
them? The module system provides the only mechanism for referring to functions in
other files, how can we refer to functions which are not included in a module?&lt;/p&gt;

&lt;p&gt;The answer to these questions comes from the idea of &lt;em&gt;namespaces&lt;/em&gt;. Namespaces
are a way to give longer names to top-level modules without changing the
module’s filename. They also allow these top-level modules to be grouped
together.&lt;/p&gt;

&lt;p&gt;The details of proposals for namespaces vary on their details, but they
basically allow you to take the module defined by a file “baz.ml” and refer to
it as “Bar.Baz”. Here “Bar” is not a module (it cannot be used as the argument
to a functor) but a namespace.&lt;/p&gt;

&lt;p&gt;Namespaces seem likely to be included in OCaml in the near future,
and they provide a convenient way to refer to quotations without putting
quotations within modules.&lt;/p&gt;

&lt;p&gt;The idea is to write quotations in a “bar.mlq” file (compiled to
“bar.cmq”). These quotations would then be placed in the namespace “Bar”.&lt;/p&gt;

&lt;p&gt;Quotations would be defined with a syntax like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* bar.mlq *)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;quotation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This could then be used with the syntax:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;o&quot;&gt;{:&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will make it easy for quotations to be provided by libraries. So that the
following code would perfectly possible:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;o&quot;&gt;{:&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Web&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h5 id=&quot;quotations-in-different-contexts&quot;&gt;Quotations in different contexts&lt;/h5&gt;

&lt;p&gt;So far, we have ignored the question of what type is used to represent an AST
node. The standard library would need to provide such a type so that quotations
could be written without linking to compiler-libs. There would also need to be
different types for different kinds of AST nodes. We do not want a quotation
used as an expression returning an AST node that represents a pattern&lt;/p&gt;

&lt;p&gt;However, we also might want to create quotations that can be used as both
expressions and patterns. This means that the quotation must return a different
type depending on where it is used.&lt;/p&gt;

&lt;p&gt;The solution to this issue is to give quotations the type &lt;code&gt;'a ctx -&amp;gt; string -&amp;gt;
'a&lt;/code&gt;.  The &lt;code&gt;ctx&lt;/code&gt; type would be a GADT that described what context a quotation was
being used from. It could also contain other information about the context, such
as its location in the source file.&lt;/p&gt;

&lt;h5 id=&quot;building-quotations&quot;&gt;Building Quotations&lt;/h5&gt;

&lt;p&gt;Creating the quotation functions requires some facility for creating AST
nodes. For this purpose, the standard library would include special quotations,
for example: &lt;code&gt;{:Ast.expr{ x + 3 }}&lt;/code&gt;. These quotations would be implemented
directly using the compiler’s lexer and parser.&lt;/p&gt;

&lt;p&gt;It would also be useful (especially for handling anti-quotations) to allow
quotations to be built from other quotations. For this we could provide another
syntax: &lt;code&gt;{:foo}&lt;/code&gt; that would refer directly to the quotation function
&lt;code&gt;foo&lt;/code&gt;. Obviously, this syntax would only be allowed within “.mlq” files.&lt;/p&gt;

&lt;h4 id=&quot;other-extensions&quot;&gt;Other extensions&lt;/h4&gt;

&lt;p&gt;This system could easily be extended to other kinds of extension. Rather than
declaring “quotations” with type &lt;code&gt;'a ctx -&amp;gt; string -&amp;gt; 'a&lt;/code&gt;, we could declare
&lt;em&gt;templates&lt;/em&gt; with type &lt;code&gt;'a ctx -&amp;gt; 'a&lt;/code&gt;. The context would contain the arguments to
the template (a string for quotations, an AST node for other templates).&lt;/p&gt;

&lt;p&gt;So a template declared as:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* bar.mlq *)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;could be used with the syntax:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;o&quot;&gt;(:&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Unlike quotations, more general templates must be able to interpret AST nodes
themselves. This means we must provide mechanisms for handling AST nodes. For
this purpose, the standard library would include a simpler version of the
&lt;code&gt;AstMapper&lt;/code&gt; module that is in compiler-libs.&lt;/p&gt;

&lt;p&gt;We could also allow the AST quotations (e.g. `Ast.expr) to be used as
patterns. This approach can be a bit fragile because syntactic sugar can cause a
pattern to match ASTs that it was not expected to match. However, for matching
simple AST nodes it is probably fairly robust.&lt;/p&gt;

&lt;h4 id=&quot;summary&quot;&gt;Summary&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Allow extensions to be written as OCaml functions within “.mlq” files.&lt;/li&gt;
  &lt;li&gt;Refer to these functions by attaching them directly to namespaces.&lt;/li&gt;
  &lt;li&gt;Require these functions to have type &lt;code&gt;'a ctx -&amp;gt; 'a&lt;/code&gt;, where &lt;code&gt;ctx&lt;/code&gt; includes a
GADT describing the context that the extension has been used in.&lt;/li&gt;
  &lt;li&gt;Provide AST quotations in the standard library (e.g. &lt;code&gt;{:Ast.expr{ x + 3 }}&lt;/code&gt;)
which use the compiler’s own lexer and parser.&lt;/li&gt;
&lt;/ol&gt;</content:encoded>
	<dc:date>2013-02-05T08:00:00+00:00</dc:date>
	<dc:creator>Leo White</dc:creator>
</item>
<item rdf:about="http://www.cl.cam.ac.uk/projects/ocamllabs/news/2013-02-01">
	<title>Monthly News: Feb 2013 news update</title>
	<link>http://www.cl.cam.ac.uk/projects/ocamllabs/news/index.html#Feb%202013</link>
	<content:encoded>&lt;div&gt;
      &lt;p&gt;Two new people joined the core team at Cambridge: &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/people/yallop.html&quot;&gt;Jeremy Yallop&lt;/a&gt; and &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/people/pwang.html&quot;&gt;Philippe Wang&lt;/a&gt;!
Jeremy has extensive expertise with meta-programming and generic programming,
and is initially looking at the &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/compiler.html#Camlp4%20redesign&quot;&gt;camlp4 redesign&lt;/a&gt;.
Philippe has been taking on the challenge of running OCaml well on restricted embedded systems, which
will also have knock-on benefits to x86 compilation with the same optimisations.
&lt;a href=&quot;http://www.x9c.fr&quot;&gt;Xavier Clerc&lt;/a&gt; also joined us for a day in advance of his
visit in April, with much interest in his &lt;a href=&quot;http://argot.x9c.fr&quot;&gt;Argot&lt;/a&gt; project
and the upcoming &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/outreach.html#OCaml.org%20redesign&quot;&gt;redesign of OCaml.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Two new research grants have been awarded that are relevant to the OCaml Labs mission:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;a href=&quot;http://gow.epsrc.ac.uk/NGBOViewGrant.aspx?GrantRef=EP/K032968/1&quot;&gt;Network-as-a-Service&lt;/a&gt; is a 3-year grant to solve pressing problems in &quot;Big Data&quot; processing, and will enable us to continue to develop &lt;a href=&quot;http://openmirage.org&quot;&gt;MirageOS&lt;/a&gt; and the use of OCaml and functional programming in this space.  We're going to be collaborating with Imperial and Nottingham on this, with the Cambridge efforts led by &lt;a href=&quot;http://www.cl.cam.ac.uk/~awm22/&quot;&gt;Andrew Moore&lt;/a&gt;, &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/people/crowcroft.html&quot;&gt;Jon Crowcroft&lt;/a&gt; and &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/people/avsm.html&quot;&gt;Anil Madhavapeddy&lt;/a&gt;.
 &lt;/li&gt;
 &lt;li&gt;&lt;a href=&quot;http://rems.io&quot;&gt;Rigorous Engineering of Mainstream Systems&lt;/a&gt; asks how we can use rigorous maths to improve the quality of mainstream computer systems.  It is led by &lt;a href=&quot;http://www.cl.cam.ac.uk/~pes20&quot;&gt;Peter Sewell&lt;/a&gt; at Cambridge, and most of the tools (including &lt;a href=&quot;http://www.cl.cam.ac.uk/~pes20/ott/&quot;&gt;Ott&lt;/a&gt; and &lt;a href=&quot;http://www.cs.kent.ac.uk/people/staff/sao/lem/&quot;&gt;Lem&lt;/a&gt;) are written in OCaml and will benefit from the ongoing work at OCaml Labs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;Platformprojects&quot;&gt; Platform projects&lt;/h3&gt;
&lt;p&gt;&lt;b&gt;OPAM&lt;/b&gt;: &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/rdc-talk.jpg&quot;&gt;&lt;img src=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/rdc-talk-thumb.jpg&quot; class=&quot;right&quot; width=&quot;130px&quot; /&gt;&lt;/a&gt;
We've been working hard on an OPAM 1.0 release, and Thomas and Anil have been sweeping through the package tree to stabilise the repository via automated builds.
We also had a brilliant visit from &lt;a href=&quot;http://www.dicosmo.org/index.html.en&quot;&gt;Roberto Di Cosmo&lt;/a&gt; from &lt;a href=&quot;http://www.pps.univ-paris-diderot.fr&quot;&gt;PPS&lt;/a&gt;, who has contributed extensively to the open-source community over the years.  He gave a talk on the &lt;a href=&quot;http://upsilon.cc/~zack/research/publications/infsof2012-mpm.pdf&quot;&gt;challenges of handling large-scale versioning&lt;/a&gt; of packages from a mathematical perspective (particularly applied to Debian), which is very useful input for the ongoing OPAM work.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Mailing lists&lt;/b&gt;: A new &lt;a href=&quot;http://lists.ocaml.org/listinfo/opengl&quot;&gt;opengl@lists.ocaml.org&lt;/a&gt; was
set up for those interested in OpenGL and WebGL on OCaml, and discussion so far
has covered LabGL on the Raspberry Pi. There are also still plans to begin
working groups for build systems and parallelism but will be announced in due
course once the preparatory work has been completed.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Real World OCaml&lt;/b&gt;: The book is now on &lt;a href=&quot;http://www.realworldocaml.org&quot;&gt;alpha3&lt;/a&gt;,
where Part 1 is nearly complete.  New sections on installation and a more
expanded prologue have also been included in this version.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Redesign: &lt;/b&gt; As part of the &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/outreach.html#OCaml.org%20redesign&quot;&gt;redesign
work&lt;/a&gt;, and to showcase the kind of
additional functionality we'd like to create, Amir put together a set of
screencasts that talk though a wireframe demo of the new site.  These short
videos covered elements of design, the new documentation system and an overview
of how the continuous integration system would work.  You can read more and
experience the clickable demo via &lt;a href=&quot;http://amirchaudhry.com/wireframe-demos-for-ocamlorg&quot;&gt;Amir's blog post&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Systemsandcompilerprojects&quot;&gt; Systems and compiler projects&lt;/h3&gt;
&lt;p&gt;&lt;b&gt;Mirage&lt;/b&gt;: Anil gave two tech talks about &lt;a href=&quot;http://openmirage.org&quot;&gt;Mirage&lt;/a&gt; this month at Citrix and Microsoft Research, as practise talks for &lt;a href=&quot;http://asplos13.rice.edu&quot;&gt;ASPLOS 2013&lt;/a&gt;. Mirage itself is nearing a release, and &lt;a href=&quot;https://github.com/vbmithr&quot;&gt;Vincent Bernardoff&lt;/a&gt; has joined the Citrix engineering team to help drive it to release. He's been primarily focussed on the build frontend (dubbed &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/mirage.html#Mirari&quot;&gt;Mirari&lt;/a&gt;) to make Mirage applications easier to compile out-of-the-box.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;camlp4 redesign:&lt;/b&gt; There has been more discussion about the future of camlp4 and &lt;a href=&quot;http://www.lpw25.net/2013/02/05/camlp4-alternative-part-2.html&quot;&gt;Leo posted another summary&lt;/a&gt; on his thoughts for an alternative apporach to quotations.&lt;/p&gt;
&lt;p&gt;&lt;i&gt;Link roundup:&lt;/i&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;a href=&quot;http://www.lpw25.net/2013/02/05/camlp4-alternative-part-2.html&quot; class=&quot;icon-rss&quot;&gt;An alternative to camlp4 - Part 2&lt;/a&gt; &lt;em&gt;(Feb 5th)&lt;/em&gt;
 &lt;/li&gt;
&lt;/ul&gt;

   &lt;/div&gt;</content:encoded>
	<dc:date>2013-02-01T12:00:00+00:00</dc:date>
	<dc:creator>Anil Madhavapeddy</dc:creator>
</item>
<item rdf:about="http://lpw25.net/2013/01/23/camlp4-alternative-part-1">
	<title>Leo White: An alternative to camlp4 - Part 1</title>
	<link>http://lpw25.net/2013/01/23/camlp4-alternative-part-1.html</link>
	<content:encoded>&lt;p&gt;Since its creation camlp4 has proven to be a very useful tool. People have used
it to experiment with new features for OCaml and to provide interesting
meta-programming facilities. However, there is general agreement that camlp4 is
too powerful and complex for the applications that it is most commonly used for,
and there is a growing movement to provide a simpler alternative.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://lists.ocaml.org/listinfo/wg-camlp4&quot;&gt;wg-camlp4@lists.ocaml.org&lt;/a&gt;
mailing list has been created to discuss implementing this simpler
alternative. This blog post is a way of kick-starting the discussion on this
list, by explaining my thoughts on what needs to be done.&lt;/p&gt;

&lt;p&gt;Personally, I think that providing a real alternative to camlp4 involves two
phases. The first phase is to provide support for implementing the most popular
camlp4 extensions without camlp4. Since the people who have implemented these
extensions already require good knowledge of the OCaml grammar it is not
unreasonable to expect a similar level of expertise to use the alternative. This
phase can easily be implemented before the next OCaml release, and I will
discuss what I think that will involve in the remainder of this post.&lt;/p&gt;

&lt;p&gt;The second phase involves extending this support to allow general OCaml
programmers to write extensions, and to include such extensions within the
language itself rather than as part of a pre-processor. I will discuss my
thoughts on this phase in a later blog post.&lt;/p&gt;

&lt;h4 id=&quot;camlp4-in-the-wild&quot;&gt;Camlp4 in the wild&lt;/h4&gt;

&lt;p&gt;Camlp4 works by producing pre-processors that parse an OCaml file and then output
a syntax tree directly into the compiler. Extensions are written by extending
the default OCaml parser and converting any new syntax tree nodes into existing
OCaml nodes. Most of the complexity in camlp4 comes from its extensible
grammars, which gives camlp4 the ability to extend the OCaml syntax
arbitrarily. However, most applications do not need this ability. &lt;/p&gt;

&lt;p&gt;From an ad-hoc survey of camlp4 extensions in the OPAM repository, most of the
popular camlp4 extensions seem to fall into one of three categories: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
Type-conv style extensions such as 
&lt;a href=&quot;https://bitbucket.org/yminsky/ocaml-core/wiki/Home&quot;&gt;sexplib&lt;/a&gt;, 
&lt;a href=&quot;https://github.com/mirage/orm&quot;&gt;ORM&lt;/a&gt; and 
&lt;a href=&quot;https://github.com/mirage/dyntype&quot;&gt;dyntype&lt;/a&gt;. 
These extend the syntax to allow code such as:

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sexp_drop_default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sexp_drop_if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z_test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sexp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
Extensions using camlp4's quotations syntax such as 
&lt;a href=&quot;https://github.com/mirage/ocaml-cow&quot;&gt;COW&lt;/a&gt;. These look like:

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;world&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
Other syntax extensions that could be expressed using existing syntax or the
camlp4 quotation syntax. For example, 
&lt;a href=&quot;http://ocsigen.org/js_of_ocaml/&quot;&gt;js_of_ocaml&lt;/a&gt; provides a
&lt;code&gt;##&lt;/code&gt; operator for accessing javascript objects. This could easily be replaced by
a valid operator such as &lt;code&gt;%%&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By providing support for these specific kinds of extension, we can provide an
alternative to camlp4 for the majority of its applications.&lt;/p&gt;

&lt;h4 id=&quot;ast-transformers-attributes-and-quotations&quot;&gt;AST transformers, attributes and quotations&lt;/h4&gt;

&lt;p&gt;A much simpler alternative to allowing arbitrary syntax extensions is to use
&lt;em&gt;AST transformers&lt;/em&gt;, &lt;em&gt;attributes&lt;/em&gt; and &lt;em&gt;quotations&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;AST transformers are simply functions that perform transformations on the OCaml
syntax tree. These can already be implemented using the new
“&lt;a href=&quot;http://www.lexifi.com/blog/syntax-extensions-without-camlp4-lets-do-it&quot;&gt;-ppx&lt;/a&gt;”
command line option that has been included on the OCaml development trunk by
Alain Frisch. This option accepts a program as an argument, and pipes the syntax
tree through that program after parsing and before type checking.&lt;/p&gt;

&lt;p&gt;Attributes are places in the grammar where generic data can be attached to the
syntax tree. This data is simply ignored by the main OCaml compiler, but it can
used be AST transformers to control transformations. &lt;/p&gt;

&lt;p&gt;Quotations are any construct that is not lexed or parsed by the compiler. These
can be attributes, expressions, patterns etc. The contents of a quotation can be
lexed and parsed by an AST transformer and converted into a regular AST node.&lt;/p&gt;

&lt;p&gt;Before support for attributes and quotations can be added to the compiler
decisions need to be made about what kinds of attributes and quotations to
support. Personally I prefer quotation attributes to attributes that are parsed
by the compiler because they are more flexible. However there is no reason that
both kinds cannot be supported by the compiler using different syntax.&lt;/p&gt;

&lt;p&gt;I think that it is important to support at least the following kinds of attribute:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
Simple named quotations for expressions, patterns and type expressions:

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
Type constructor quotation attributes:

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
Type-conv style definition attributes:

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* some valid expression *)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
Annotating types with syntactically valid expressions:

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* some valid expression *)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once support for these attributes and quotations is added to OCaml I think that
the majority of camlp4 applications could be easily converted into AST
transformers.&lt;/p&gt;

&lt;p&gt;In order to make this transition easy, work must also be done to provide tools
for manipulating OCaml’s AST and parsing quotations. It would also be worthwhile
trying to normalise some of the stranger corners of the OCaml syntax tree. This
will make writing AST transformers simpler and more robust&lt;/p&gt;

&lt;p&gt;Finally, the “-ppx” option must be integrated into the many OCaml build
systems.&lt;/p&gt;

&lt;h4 id=&quot;join-the-discussion&quot;&gt;Join the discussion&lt;/h4&gt;

&lt;p&gt;The above suggestions are just the attributes and quotations that I think will
be necessary to provide a viable alternative to camlp4. However, I suspect that
they are not sufficient. It would be very useful to hear from anyone who has
written camlp4 extensions about what kind of extensions they have written, and
what they think would be necessary to support their extensions without
camlp4. So please join the
&lt;a href=&quot;http://lists.ocaml.org/listinfo/wg-camlp4&quot;&gt;wg-camlp4@lists.ocaml.org&lt;/a&gt; list and post
your thoughts.&lt;/p&gt;</content:encoded>
	<dc:date>2013-01-23T08:00:00+00:00</dc:date>
	<dc:creator>Leo White</dc:creator>
</item>
<item rdf:about="http://www.cl.cam.ac.uk/projects/ocamllabs/news/2013-01-01">
	<title>Monthly News: Jan 2013 news update</title>
	<link>http://www.cl.cam.ac.uk/projects/ocamllabs/news/index.html#Jan%202013</link>
	<content:encoded>&lt;div&gt;
      &lt;p&gt;There's a lot of interest in the work we're doing, and the number of collaborative &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/index.html&quot;&gt;projects&lt;/a&gt; is increasing fast. 
We held the first monthly meeting in the Computer Lab, where &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/people/avsm.html&quot;&gt;Anil&lt;/a&gt; provided
an overview of the &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/index.html&quot;&gt;research work&lt;/a&gt; that OCaml Labs is
starting. An interesting theme of the discussion that followed was
related to undergraduate teaching and how things like the &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/platform.html&quot;&gt;OCaml
Platform&lt;/a&gt; and infrastructure would make it easier for
students to get to grips with programming.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;For the evening after the meeting, &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/people/amirmc.html&quot;&gt;Amir&lt;/a&gt; set up 
an informal OCaml hacking/tutorial session in Cambridge.  Around 15 eager 
people attended the event in &lt;a href=&quot;http://makespace.org&quot;&gt;Makespace&lt;/a&gt; (a community 
workshop), with most of them being new to the language.  Anil introduced 
&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/outreach.html#Book%20review%20site&quot;&gt;Real World OCaml&lt;/a&gt; 
and shared the 
introductory chapters while Thomas provided help with OPAM.  This turned out 
to be a great test of the installation process for newcomers to OCaml, as 
well as the book's instructions. A number of issues came to light, partly 
related to a perfect storm of package issues, which everyone is keen to 
improve.  Despite these problems, attendees were very positive and were keen 
to see more gatherings like this in future.  When Amir asked for feedback, 
pretty much everyone commented on how great the pizza was.&lt;/p&gt;
&lt;h3 id=&quot;Platformprojects&quot;&gt; Platform projects&lt;/h3&gt;
&lt;p&gt;OCaml Labs also hosted its first visitor this month as &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/people/tg.html&quot;&gt;Thomas
Gazagnaire&lt;/a&gt;, the CTO of OCamlPro, spent three weeks in
Cambridge.  Much effort was put into preparing Mirage for release, discussions
about parallelism and the OCaml Platform, and anything where OPAM is a crucial
component.  Worth noting is that (at time of writing) the 
&lt;a href=&quot;https://github.com/OCamlPro/opam-repository&quot;&gt;opam-repository&lt;/a&gt; has now 
become the &lt;a href=&quot;https://github.com/languages/OCaml&quot;&gt;overall most forked OCaml project on Github&lt;/a&gt;.&lt;br /&gt;

The &lt;a href=&quot;http://lists.ocaml.org/pipermail/platform/&quot;&gt;Platform mailing list&lt;/a&gt; 
has also been formed for discussion regarding the OCaml Platform.  Anyone 
interested in the discussions about the platform, which will include 
development on OPAM, should join this list.&lt;/p&gt;
&lt;p&gt;Part of the Platform work involves creating a new 
&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/platform.html&quot;&gt;design for OCaml.org&lt;/a&gt;, which also 
&lt;a href=&quot;http://lists.ocaml.org/pipermail/infrastructure/2013-February/000194.html&quot;&gt;kicked-off this week&lt;/a&gt;.&lt;br /&gt;

Amir will keep people updated about progress via updates to the 
&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/outreach.html#OCaml.org%20redesign&quot;&gt;OCL website&lt;/a&gt;, 
&lt;a href=&quot;http://lists.ocaml.org/pipermail/infrastructure/&quot;&gt;Infrastructure mailing list&lt;/a&gt; and also by posting things to the 
&lt;a href=&quot;https://github.com/ocaml/ocaml.org/wiki&quot;&gt;OCaml.org Github wiki&lt;/a&gt;.  The 
current stage of work involves thinking of the types of pages OCaml.org 
requires, in order to refine the templates we need.  As part of this, we 
also commissioned a new logo for OCaml and although it's still under 
development, you can see the latest draft on the 
&lt;a href=&quot;https://github.com/ocaml/ocaml.org/wiki/Draft-OCaml-Logos&quot;&gt;OCaml.org wiki&lt;/a&gt;.
  Please send any feedback directly to Amir.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/t2-kickoff-2.jpg&quot;&gt;&lt;img src=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/t2-kickoff-2-thumb.jpg&quot; class=&quot;right&quot; width=&quot;130px&quot; /&gt;&lt;/a&gt;
The Real World OCaml book website was released as a 
&lt;a href=&quot;http://www.realworldocaml.org&quot;&gt;limited alpha&lt;/a&gt; earlier in the month, with 
the aim of getting early feedback and comments. Each paragraph of the online 
book has commenting functionality, using Github issues as a backend.  This 
means that each comment made on the book website creates a new issue on 
Github, which authors/commenters can track and discuss before editing the 
content.  So far there have been over 250 comments on the alpha, with half 
them being dealt with already.&lt;/p&gt;
&lt;p&gt;A new EU project also kicked-off called &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/t2.html&quot;&gt;Trilogy 2&lt;/a&gt;, which builds on the 
award-winning work from the original &lt;a href=&quot;http://www.trilogy-project.org&quot;&gt;Trilogy&lt;/a&gt; project.  OnApp (a member of Trilogy 2), will be providing the &lt;a href=&quot;http://lists.ocaml.org/pipermail/infrastructure/2013-February/000198.html&quot;&gt;cloud Infrastructure for ocaml.org&lt;/a&gt;, and Thomas and Anil will be expanding the Mirage project into distributed computing under this umbrella.  As befits an EU project, it kicked off with an especially nice dinner at &lt;a href=&quot;http://www.christs.cam.ac.uk&quot;&gt;Christ's College&lt;/a&gt;...&lt;/p&gt;
&lt;h3 id=&quot;Systemsresearch&quot;&gt; Systems research&lt;/h3&gt;
&lt;p&gt;&lt;b&gt;Mirage:&lt;/b&gt; This was formally proposed as an 
&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/mirage.html&quot;&gt;incubated Xen.org project&lt;/a&gt; and the proposal was put forward for 
&lt;a href=&quot;http://wiki.xen.org/wiki/Mirage_Incubation_Project_Proposal&quot;&gt;community review&lt;/a&gt;. There were many positive 
comments on the Xen mailing lists (along the lines of 
&lt;a href=&quot;http://lists.xen.org/archives/html/xen-devel/2013-01/msg01084.html&quot;&gt;&quot;Mirage is cool stuff&quot;&lt;/a&gt;)
and voting is currently underway by eligible members of the Xen community.
Assuming a positive outcome, incubation would give the Mirage project greater
visibility and access to resources.  This would accelerate progress towards an
alpha release in Q1/Q2 this year.  In 
addition to this, a proposal for an 
&lt;a href=&quot;http://www.oscon.com/oscon2013&quot;&gt;OSCON talk&lt;/a&gt; was also submitted and the camera-ready version of the ASPLOS paper is 
&lt;a href=&quot;http://anil.recoil.org/papers/2013-asplos-mirage.pdf&quot;&gt;now available&lt;/a&gt;.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Illuminate&lt;/b&gt;: A related research topic where Mirage could be useful is in embedded systems 
and the Internet of Things.  One specific use case is the 
&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/illuminate.html&quot;&gt;Illuminate Project&lt;/a&gt;, where Mirage can be used 
to create appliances running on the ARM microcontrollers alongside an LED 
lighting network.  Such a lighting system is now deployed in large parts of 
the Computer Laboratory and will form an excellent test-bed to explore these 
ideas further.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Signpost:&lt;/b&gt;: &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/t2-kickoff-1.jpg&quot;&gt;&lt;img src=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/t2-kickoff-1-thumb.jpg&quot; class=&quot;right&quot; width=&quot;130px&quot; /&gt;&lt;/a&gt;
Signpost is also achieving greater outreach with 
&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/people/crowcroft.html&quot;&gt;Jon Crowcroft&lt;/a&gt; discussing such technologies at a 
meeting in Dagstul on &lt;a href=&quot;http://www.dagstuhl.de/en/program/calendar/semhp/?semnr=13062&quot;&gt;Decentralized Systems for Privacy
Preservation&lt;/a&gt;.
Cambridge also hosted &lt;a href=&quot;http://en.wikipedia.org/wiki/Eric_Schmidt&quot;&gt;Eric Schmidt&lt;/a&gt;
from Google, where he is the Humanitas Visiting Professor in Media for 2013.
Eric delivered a &lt;a href=&quot;http://www.crassh.cam.ac.uk/events/2332/&quot;&gt;talk&lt;/a&gt; on the future
of conflict, combat and intervention.  Anil and Jon got an opportunity to
discuss Signposts with him for 20 minutes, which was an interesting clash of
opinions (we want decentralised identity, Google want it all to go through
them).  Either way, we're even more motivated to get the Signpost tech out to
the big bad world as soon as possible.  Meanwhile, Haris found his identical
twin brother in &lt;a href=&quot;http://en.wikipedia.org/wiki/St_John%27s_College,_Cambridge#The_Master.27s_Lodge_and_Garden&quot;&gt;St Johns Masters Lodge&lt;/a&gt;...&lt;/p&gt;
&lt;h3 id=&quot;Compilerprojects&quot;&gt; Compiler projects&lt;/h3&gt;
&lt;p&gt;Several mailing lists are in progress for various community-driven projects.
The first of these is a working group on the future of syntax extensions in 
OCaml (&lt;a href=&quot;http://lists.ocaml.org/pipermail/wg-camlp4&quot;&gt;wg-camlp4&lt;/a&gt;).  This group is 
chaired by &lt;a href=&quot;http://alain.frisch.fr&quot;&gt;Alain Frisch&lt;/a&gt; and Leo White and has 
generated a great deal of discussion in the last two weeks.  Leo is 
summarising his thoughts in a series of &lt;a href=&quot;http://www.lpw25.net&quot;&gt;blog posts&lt;/a&gt; 
as he goes.  Further working groups on parallelism in OCaml and build systems are under 
discussion and will be announced in due course.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;As well as all the research and development activity we've also been 
recruiting.  We've had several rounds of interviews and made a number of 
offers so hopefully we'll be announcing new members of the OCaml Labs team 
in the coming months.  In addition, we'd also like to mention that Leo 
successfully defended his PhD Thesis in January.  Finally, we'd like to 
welcome a new honorary member of OCaml Labs, Nathan Scott, born on 30th 
January.  Congratulations &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/people/djs.html&quot;&gt;Dave&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;i&gt;Link roundup:&lt;/i&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;a href=&quot;http://www.lpw25.net/2013/01/23/camlp4-alternative-part-1.html&quot; class=&quot;icon-rss&quot;&gt;An alternative to camlp4 - Part 1&lt;/a&gt; &lt;em&gt;(Jan 23rd)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;


   &lt;/div&gt;</content:encoded>
	<dc:date>2013-01-01T12:00:00+00:00</dc:date>
	<dc:creator>Anil Madhavapeddy</dc:creator>
</item>
<item rdf:about="http://www.cl.cam.ac.uk/projects/ocamllabs/news/2012-12-01">
	<title>Monthly News: Dec 2012 news update</title>
	<link>http://www.cl.cam.ac.uk/projects/ocamllabs/news/index.html#Dec%202012</link>
	<content:encoded>&lt;div&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/cam-snow.jpg&quot;&gt;&lt;img src=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/cam-snow-thumb.jpg&quot; class=&quot;right&quot; width=&quot;130px&quot; /&gt;&lt;/a&gt;
OCaml Labs kicked-off with an internal meeting of the Cambridge-based members,
who battled endless snow to make it to the meeting.
There are over 20 people involved just within the building and over 30
including those outside the University. We welcomed a few new members,
including Leo White (Postdoc), Raphael Proust (PhD student) and Stephen Dolan
(PhD student).  At this initial gathering Anil talked over some of the projects
that were already taking place in the Lab, as well as the new work that would
be supported by OCaml Labs.&lt;/p&gt;
&lt;p&gt;Significant progress was made on the research side too.
&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/mirage.html&quot;&gt;Mirage&lt;/a&gt; has had a flurry of new releases as we
prepare for a first public release, and we're in the final stages of being
officially incubated as a &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/mirage.html&quot;&gt;xen.org project&lt;/a&gt;.
&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/illuminate.html#Signpost%20prototype&quot;&gt;Signpost&lt;/a&gt; is also
taking shape, mainly due to the addition of DNSSEC to the
&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/illuminate.html#Signpost%20prototypew&quot;&gt;ocaml-dns&lt;/a&gt; implementation.
There's been industrial interest in the applications of Signpost and the team
is pursuing these for more use cases.&lt;/p&gt;
&lt;p&gt;We also began work on a new website for the &lt;a href=&quot;http://realworldocaml.org&quot;&gt;Real World
OCaml&lt;/a&gt;.  We took inspiration from our friends who wrote
Real World Haskell, and the site will have commenting functionality so that
people can suggest improvements before the book is finalised.  As part of this,
we also worked with a design firm to begin creating a &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/outreach.html#OCaml.org%20redesign&quot;&gt;new logo for the OCaml
language&lt;/a&gt;.&lt;br /&gt;

The logo will be placed into the
public domain for use by anyone.&lt;/p&gt;
&lt;p&gt;Last, but certainly not least, Ashish put the new &lt;a href=&quot;http://ocaml.org&quot;&gt;ocaml.org&lt;/a&gt;
website live, to much electronic &lt;a href=&quot;https://twitter.com/jakedonham/status/281170330700095488&quot;&gt;applause&lt;/a&gt;.
A great way to end 2012!&lt;/p&gt;

   &lt;/div&gt;</content:encoded>
	<dc:date>2012-12-01T12:00:00+00:00</dc:date>
	<dc:creator>Anil Madhavapeddy</dc:creator>
</item>
<item rdf:about="http://hh360.user.srcf.net/blog/2012/11/system-programming-in-ocaml-part-2/">
	<title>Heidi Howard: System programming in OCaml – Part 2</title>
	<link>http://hh360.user.srcf.net/blog/2012/11/system-programming-in-ocaml-part-2/</link>
	<content:encoded>&lt;p&gt;Now we are going to take a look at manipulating files in OCaml. We will be focusing on the Unix file system.&lt;/p&gt;
&lt;p&gt;In Unix the term &amp;#8220;file&amp;#8221; refers to a greater range of objects that you might expect. This includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;standard files like .txt, .html, .doc or .ml&lt;/li&gt;
&lt;li&gt;directories (or folders if your used to windows) like /photos or /music&lt;/li&gt;
&lt;li&gt;symbolic links (or shortcuts if your used to windows)&lt;/li&gt;
&lt;li&gt;special files to access devices i.e. files in /dev&lt;/li&gt;
&lt;li&gt;named pipe ( this is a named version of using | in the terminal )&lt;/li&gt;
&lt;li&gt;sockets&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All files are represented by an i-node, a data structure which holds the meta-data on the file. Directories are files that map filenames to i-nodes. The directories form a tree structure, where all files are directly or indirectly children of the root directory called &amp;#8216;/&amp;#8217;.&lt;/p&gt;
&lt;p&gt;A absolute path name of the file is one that begins at the root. A relative path name is one that begins in the current directory. Every directory has &amp;#8216;.&amp;#8217; and &amp;#8216;..&amp;#8217; which are symbolic links to the current and parent directories.&lt;/p&gt;
&lt;p&gt;OCaml makes use of the &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml/libref/Filename.html&quot;&gt;Filename module&lt;/a&gt; to help handle paths in a portable manner&lt;/p&gt;</content:encoded>
	<dc:date>2012-11-29T23:00:00+00:00</dc:date>
</item>
<item rdf:about="http://hh360.user.srcf.net/blog/2012/11/ocaml-2-html/">
	<title>Heidi Howard: Ocaml 2 HTML</title>
	<link>http://hh360.user.srcf.net/blog/2012/11/ocaml-2-html/</link>
	<content:encoded>&lt;div&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-r31qRagcDkA/ULZ_402U4NI/AAAAAAAAAMg/yEQ5QdhTGnM/s1600/images.jpeg&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;http://1.bp.blogspot.com/-r31qRagcDkA/ULZ_402U4NI/AAAAAAAAAMg/yEQ5QdhTGnM/s1600/images.jpeg&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;As I&amp;#8217;m often adding OCaml code to blog posts I really wanted to find an automatic way to add syntax highlighting. The first solution that I have found is &lt;a href=&quot;http://caml.inria.fr/cgi-bin/hump.en.cgi?contrib=61&quot;&gt;caml2html&lt;/a&gt; but I&amp;#8217;m still looking for something better &amp;#8230; suggestions welcome&lt;/p&gt;</content:encoded>
	<dc:date>2012-11-28T22:13:00+00:00</dc:date>
</item>
<item rdf:about="http://hh360.user.srcf.net/blog/2012/11/system-programming-in-ocaml-part-1/">
	<title>Heidi Howard: System programming in OCaml – Part 1</title>
	<link>http://hh360.user.srcf.net/blog/2012/11/system-programming-in-ocaml-part-1/</link>
	<content:encoded>&lt;p&gt;This series of articles will follow my journey through &amp;#8220;Unix system programming in OCaml&amp;#8221;, available as a pdf &lt;a href=&quot;http://ocamlunix.forge.ocamlcore.org/&quot;&gt;here&lt;/a&gt;. After this series, I hope to move onto a series on Mirage system programming in OCaml and working with Signposts (a framework for managing end-to-end connectivity between devices using DNS infrastructure for signalling)&lt;/p&gt;
&lt;h4&gt;Introducing the Sys and Unix&lt;/h4&gt;
&lt;div&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-1RDROc_BYpo/ULaAP6BBbLI/AAAAAAAAAMo/UmCCrs1WqOA/s1600/unix_plate.jpg&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;http://3.bp.blogspot.com/-1RDROc_BYpo/ULaAP6BBbLI/AAAAAAAAAMo/UmCCrs1WqOA/s320/unix_plate.jpg&quot; width=&quot;320&quot; height=&quot;162&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;The modules that give access to the system in OCaml are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sys &amp;#8211; functions common to all OS&amp;#8217;s that run OCaml&lt;/li&gt;
&lt;li&gt;Unix &amp;#8211; functions specific to unix&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To make use of these modules in some OCaml code, we can add open Sys or/and open Unix to the top of the OCaml program.&lt;/p&gt;
&lt;p&gt;NOTE that Unix and Sys can overwrite some of the functions in the Pervasive module, so to access a function from the Pervasive module you need to add Pervasives. in front of the function call.&lt;/p&gt;
&lt;p&gt;When using ocamlc to compile OCaml programs that made use of  Unix, you need to pass unix.cma to the compiler e.g.&lt;/p&gt;
&lt;p&gt;$ ocamlc unix.cma hello.ml -o hello&lt;/p&gt;
&lt;p&gt;The same is not true of sys.cma&lt;/p&gt;
&lt;h4&gt;PASSING INFORMATION TO YOUR PROGRAM&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-4dF_PbMKaCY/ULaAv9rtW5I/AAAAAAAAAMw/mO_Ksnyby4o/s1600/letter_tiles1.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;http://4.bp.blogspot.com/-4dF_PbMKaCY/ULaAv9rtW5I/AAAAAAAAAMw/mO_Ksnyby4o/s1600/letter_tiles1.png&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;Now we are going to consider 2 different ways of passing information from your terminal to your ocaml program&lt;/p&gt;
&lt;p&gt;1) Passing the information as arguments to the executable. For this we are going to use Sys.argv which will return a string array of arguments passed to the program. The first index of the argument array that we use here is 1, this is because the 0th element in the array is the command used to call the program. Consider the following simple example:&lt;/p&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;i&gt;open Sys;;&lt;br /&gt;
print_string argv.(1)&lt;/i&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;Now provided that at least one argument is passed to the program, this argument will be printed. We can now extend this program, to print the number of arguments and then exactly what the user will have just entered&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;i&gt;open Sys;;&lt;/i&gt;&lt;/div&gt;
&lt;p&gt;let args = Array.length argv;;&lt;br /&gt;
print_int args ;;&lt;br /&gt;
print_newline ();;&lt;br /&gt;
for i=0 to args-1 do&lt;br /&gt;
print_string argv.(i);&lt;br /&gt;
print_char &amp;#8216; &amp;#8216;;&lt;br /&gt;
done;&lt;/p&gt;
&lt;p&gt;2a ) Passing information using the environment variables, this can be fetched from within the OCaml programing using Sys.enviroment, this will return as array of environment variables&lt;/p&gt;
&lt;p&gt;open Unix;;&lt;/p&gt;
&lt;p&gt;let env = environment();;&lt;br /&gt;
for i=0 to (Array.length env) -1  do&lt;br /&gt;
print_string env.(i);&lt;br /&gt;
print_newline);&lt;br /&gt;
done;&lt;/p&gt;
&lt;p&gt;Don&amp;#8217;t forget then when you compile this, you need to add unix.cma to the command as we are making use of the Unix library&lt;/p&gt;
&lt;p&gt;2b ) We can also lookup the values of environment variables using the Sys.getenv (or Unix.getenv) functions that takes a variable name and returns the value associated with it&lt;/p&gt;
&lt;p&gt;&lt;i&gt;open Sys;;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;let var = argv.(1);;&lt;br /&gt;
print_string (getenv var)&lt;/p&gt;
&lt;h4&gt;Exceptions&lt;/h4&gt;
&lt;p&gt;Unless otherwise stated in the documentation, all function in the Unix module raise the exception Unix_error.&lt;/p&gt;
&lt;p&gt;&lt;i&gt;Exception Unix_error of error * string * string&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;The first argument is the error code, the second argument is the name of the system call that raised the error and third argument identifies the object on which the error was called.&lt;/p&gt;
&lt;p&gt;If an exception reaches the top-level then the program will halt. The Unix module provides a function for clearly describing exceptions. We can make 2a use this function as follows:&lt;br /&gt;
&lt;i&gt;&lt;br /&gt;
&lt;/i&gt;&lt;i&gt;open Unix;;&lt;/i&gt;&lt;br /&gt;
&lt;i&gt;&lt;br /&gt;
let prog () =  &lt;/i&gt;&lt;br /&gt;
&lt;i&gt;  let env = environment();;&lt;br /&gt;
for i=0 to (Array.length env) -1  do&lt;br /&gt;
print_string env.(i);&lt;br /&gt;
print_newline);&lt;br /&gt;
done;&lt;/i&gt;&lt;br /&gt;
&lt;i&gt; done;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i&gt; handle_unix_error prog ();;&lt;/i&gt;&lt;/p&gt;
&lt;div&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-kgybOBLFeGU/ULaBNfKRf8I/AAAAAAAAAM4/eVjnpihDSGw/s1600/289-rule-34-no-exceptions.jpg&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;http://4.bp.blogspot.com/-kgybOBLFeGU/ULaBNfKRf8I/AAAAAAAAAM4/eVjnpihDSGw/s640/289-rule-34-no-exceptions.jpg&quot; width=&quot;640&quot; height=&quot;508&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2012-11-28T22:10:00+00:00</dc:date>
</item>
<item rdf:about="http://www.cl.cam.ac.uk/projects/ocamllabs/news/2012-11-01">
	<title>Monthly News: Nov 2012 news update</title>
	<link>http://www.cl.cam.ac.uk/projects/ocamllabs/news/index.html#Nov%202012</link>
	<content:encoded>&lt;div&gt;
      &lt;p&gt;OCaml Labs finally opened its doors with announcements from
&lt;a href=&quot;https://ocaml.janestreet.com/?q=node/109&quot;&gt;Yaron&lt;/a&gt; and
&lt;a href=&quot;http://anil.recoil.org/2012/10/19/announcing-ocaml-labs.html&quot;&gt;Anil&lt;/a&gt;!  Although
much of the remainder of November was spent on administration and wiring up
machines for the forthcoming &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/platform.html#Machine%20Pool&quot;&gt;test cluster&lt;/a&gt;, we
also celebrated the acceptance of a paper on &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/mirage.html&quot;&gt;Mirage&lt;/a&gt;
to &lt;a href=&quot;http://anil.recoil.org/papers/2013-asplos-mirage.pdf&quot;&gt;ASPLOS 2013&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/caml-consortium-20121101.jpg&quot;&gt;&lt;img src=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/caml-consortium-20121101-thumb.jpg&quot; class=&quot;right&quot; width=&quot;130px&quot; /&gt;&lt;/a&gt;
We also had a very productive visit from &lt;a href=&quot;http://www.ocamlpro.com&quot;&gt;OCamlPro&lt;/a&gt;.
Fabrice, Thomas and Pierre came over to discuss the new
&lt;a href=&quot;http://opam.ocamlpro.com&quot;&gt;OPAM&lt;/a&gt; package manager and the plans for building an
OCaml Platform in 2013. This was in preparation for the subsequent Consortium
meeting of the industrial board of OCaml, where Anil was able to present (and
get approved) an overview of what &lt;a href=&quot;http://ocaml.org&quot;&gt;ocaml.org&lt;/a&gt; would become.
You can see the &lt;a href=&quot;http://anil.recoil.org/slides/OCaml-Consortium-2012-OCamlLabs.pdf&quot;&gt;slides of his talk online&lt;/a&gt;.  An
interesting thing to note is just how broad the set of OCaml language users
are: right the way from formal methods, to systems projects, and even web
developers.&lt;/p&gt;
&lt;p&gt;Since the Consortium meeting, the infrastructure behind ocaml.org is being
built out and there's already been helpful input via the
&lt;a href=&quot;http://lists.ocaml.org/listinfo/infrastructure&quot;&gt;infrastructure mailing list&lt;/a&gt;.  A continuous build system has been put together for internal testing, with
support from Citrix, and &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/news/#opam&quot;&gt;OPAM&lt;/a&gt; itself continues to mature and grow in
popularity.&lt;/p&gt;

   &lt;/div&gt;</content:encoded>
	<dc:date>2012-11-01T12:00:00+00:00</dc:date>
	<dc:creator>Anil Madhavapeddy</dc:creator>
</item>
<item rdf:about="http://anil.recoil.org/2012/10/19/announcing-ocaml-labs">
	<title>Anil Madhavapeddy: Announcing the OCaml Labs project</title>
	<link>http://anil.recoil.org/2012/10/19/announcing-ocaml-labs.html</link>
	<content:encoded>&lt;p&gt;I&amp;#8217;m very excited to announce &lt;em&gt;&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs&quot;&gt;OCaml Labs&lt;/a&gt;&lt;/em&gt;, the latest project to hit the Cambridge Computer Lab. As anyone that hangs out near me probably realises, I very much enjoy functional programming. My weapon of choice tends to be &lt;a href=&quot;http://www.ocaml-lang.org&quot;&gt;OCaml&lt;/a&gt;, as it condenses &lt;a href=&quot;http://events.inf.ed.ac.uk/Milner2012/X_Leroy-html5-mp4.html&quot;&gt;decades of research&lt;/a&gt; into a pragmatic blend of functional, imperative and object-oriented programming styles. What&amp;#8217;s perhaps less well known are the steady &lt;a href=&quot;http://www.ocaml-lang.org/companies.html&quot;&gt;inroads&lt;/a&gt; that OCaml has been making into mission-critical areas of industry. At &lt;a href=&quot;http://ocaml.janestreet.com&quot;&gt;Jane Street&lt;/a&gt;, billions of dollars of transactions are routed through a huge ML code-base that is designed to catch bugs &lt;a href=&quot;http://vimeo.com/14313378&quot;&gt;at compile-time&lt;/a&gt;. At &lt;a href=&quot;http://github.com/xen-org/xen-api&quot;&gt;Citrix&lt;/a&gt;, the Xen management toolstack that powers &lt;a href=&quot;http://blogs.citrix.com/2012/10/09/one-in-a-million/&quot;&gt;millions&lt;/a&gt; of hosts in the cloud is &lt;a href=&quot;http://anil.recoil.org/papers/2010-icfp-xen.pdf&quot;&gt;largely written in OCaml&lt;/a&gt;. Facebook does sophisticated &lt;a href=&quot;https://github.com/facebook/pfff/wiki/Main&quot;&gt;static analysis&lt;/a&gt; using OCaml over their vast PHP codebase to close security holes.&lt;/p&gt;

&lt;p&gt;The OCaml community is small but dedicated, but there is always more to do to improve the language and ecosystem. So, thanks to a generous platform grant from &lt;a href=&quot;http://ocaml.janestreet.com&quot;&gt;Jane Street&lt;/a&gt;, we are launching a program to help with the open-source development of OCaml from Cambridge.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/&quot;&gt;OCaml Labs&lt;/a&gt;&lt;/em&gt; are based in the &lt;a href=&quot;http://www.cl.cam.ac.uk&quot;&gt;Cambridge Computer Lab&lt;/a&gt; and led my myself, &lt;a href=&quot;http://www.cl.cam.ac.uk/~am21/&quot;&gt;Alan Mycroft&lt;/a&gt; and &lt;a href=&quot;http://www.cl.cam.ac.uk/~iml1/&quot;&gt;Ian Leslie&lt;/a&gt;. We&amp;#8217;re closely affiliated with other &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/collaboration.html&quot;&gt;groups&lt;/a&gt;, and will be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;developing the OCaml Platform, which will bundle the official OCaml compiler from INRIA with a tested set of community libraries that refreshed every six months.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;working with the core OCaml team at INRIA&amp;#8217;s &lt;a href=&quot;http://gallium.inria.fr/&quot;&gt;Gallium&lt;/a&gt; group on the compiler, and with commercial partners like &lt;a href=&quot;http://ocamlpro.com&quot;&gt;OCamlPro&lt;/a&gt; on tool development. OCamlPro are making some very impressive progress already with the &lt;a href=&quot;http://opam.ocamlpro.com&quot;&gt;OPAM&lt;/a&gt; packge manager and &lt;a href=&quot;http://www.typerex.org&quot;&gt;TypeRex&lt;/a&gt; IDE helper.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;supporting the online presence with more teaching material and content. Yaron, Jason and I are working hard on a &lt;a href=&quot;http://realworldocaml.org&quot;&gt;new book&lt;/a&gt; that will be published next year, and the OCaml Web team (led by &lt;a href=&quot;http://ashishagarwal.org&quot;&gt;Ashish&lt;/a&gt; and &lt;a href=&quot;https://plus.google.com/109604597514379193052/posts&quot;&gt;Christophe&lt;/a&gt;) have made great progress on a &lt;a href=&quot;http://www.ocaml-lang.org&quot;&gt;brand new website&lt;/a&gt; that we will move to the &lt;code&gt;ocaml.org&lt;/code&gt; domain soon.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;research_efforts&quot;&gt;Research efforts&lt;/h3&gt;

&lt;p&gt;Of course, it is difficult to hack on a language in a void, and we also &lt;em&gt;use&lt;/em&gt; OCaml heavily in our own research. The other half of OCaml Lab&amp;#8217;s goals are more disruptive (and riskier!):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The upcoming first beta release of &lt;a href=&quot;http://openmirage.org&quot;&gt;Mirage&lt;/a&gt;, which is an operating system designed for cloud and embedded environments, and is written almost entirely from the ground up in OCaml. The outputs of Mirage include a &lt;a href=&quot;http://www.openmirage.org/blog/breaking-up-is-easy-with-opam&quot;&gt;large number of libraries&lt;/a&gt; which are usable separately, such as pure implementations of TCP/IP, DNS, SSH, DHCP and HTTP. The Xen hackers, led by &lt;a href=&quot;http://dave.recoil.org&quot;&gt;David Scott&lt;/a&gt;, are out in force to integrate Mirage into their &lt;a href=&quot;http://www.xen.org/xensummit/xs12na_talks/T2.html&quot;&gt;next-generation&lt;/a&gt; platform. Meanwhile, Raphael Proust is busy eliminating the &lt;a href=&quot;http://anil.recoil.org/papers/drafts/2012-places-limel-draft1.pdf&quot;&gt;garbage collector&lt;/a&gt; with his cut-down &amp;#8220;LinearML&amp;#8221; variant.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Working with our collaborators at the &lt;a href=&quot;http://horizon.ac.uk&quot;&gt;Horizon Institute&lt;/a&gt; on privacy-preserving technologies such as &lt;a href=&quot;http://anil.recoil.org/papers/2012-sigcomm-signposts-demo.pdf&quot;&gt;Signposts&lt;/a&gt; which let you build and maintain your own personal clouds that operate &lt;a href=&quot;http://anil.recoil.org/papers/2011-icdcn-droplets.pdf&quot;&gt;autonomously&lt;/a&gt; from the central cloud. You can read more about our &lt;a href=&quot;http://www.cam.ac.uk/research/features/privacy-by-design/&quot;&gt;privacy-by-design&lt;/a&gt; philosophy too.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Extending OCaml to run on secure hardware platforms that doesn&amp;#8217;t compromise on performance, using the MIPS64-based &lt;a href=&quot;http://www.cl.cam.ac.uk/research/security/ctsrd/cheri.html&quot;&gt;capability processor&lt;/a&gt; that is being developed at at the Lab.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;The &lt;a href=&quot;http://www.trilogy-project.org&quot;&gt;Trilogy&lt;/a&gt; was a hugely successful EU-funded effort on future evolution of the Internet, and resulted in &lt;a href=&quot;http://trilogy-project.org/publications/standards-contributions.html&quot;&gt;numerous RFCs&lt;/a&gt; on subjects such as multipath-TCP. We&amp;#8217;re partipating in the follow-up (imaginatively dubbed &amp;#8220;Trilogy2&amp;#8221;), and look forward to working on more structured abstractions for programming large-scale networks.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;getting_involved&quot;&gt;Getting involved&lt;/h3&gt;

&lt;p&gt;So, how can you get involved? We are initially advertising three positions for full-time developers and researchers (&lt;a href=&quot;http://www.jobs.cam.ac.uk/job/-21662/&quot;&gt;junior&lt;/a&gt; and &lt;a href=&quot;http://www.jobs.cam.ac.uk/job/-21942/&quot;&gt;senior&lt;/a&gt;) to help us get started with the OCaml Platform and compiler development. These aren&amp;#8217;t conventional pure research jobs, and a successful candidate should enjoy the open-source development cycle (you retain your own copyright for your own projects). The Computer Lab offers a pretty unique environment: a friendly, non-hierarchical group in a beautiful city, and some of the best faculty and students you could hope to hang out with.&lt;/p&gt;

&lt;p&gt;And finally, there is a longer lead time on &lt;a href=&quot;http://www.cl.cam.ac.uk/admissions/phd/&quot;&gt;applying for PhDs&lt;/a&gt;, but this is a great time to get involved. When I started at the Lab in 2002, a little project called &lt;a href=&quot;http://xen.org&quot;&gt;Xen&lt;/a&gt; was just kicking off, and many of us had a wild (and oft great) time riding that wave. Get in touch with myself, &lt;a href=&quot;http://www.cl.cam.ac.uk/~am21/&quot;&gt;Alan&lt;/a&gt;, &lt;a href=&quot;http://www.cl.cam.ac.uk/~iml1/&quot;&gt;Ian&lt;/a&gt; or &lt;a href=&quot;http://www.cl.cam.ac.uk/~jac22/&quot;&gt;Jon&lt;/a&gt; soon if you are interested in applying! There&amp;#8217;s some more information available on the &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/collaboration.html&quot;&gt;OCaml Labs pages&lt;/a&gt; about options.&lt;/p&gt;</content:encoded>
	<dc:date>2012-10-18T23:00:00+00:00</dc:date>
</item>
<item rdf:about="http://openmirage.org/blog/breaking-up-is-easy-with-opam">
	<title>MirageOS: Breaking up is easy to do (with OPAM)</title>
	<link>http://openmirage.org/blog/breaking-up-is-easy-with-opam</link>
	<content:encoded>&lt;div&gt;
      &lt;p&gt;When we first started developing Mirage in 2009, we were rewriting huge chunks of operating system and runtime code in OCaml. This ranged from low-level device drivers to higher-level networking protocols such as TCP/IP or HTTP.  The changes weren't just straight rewrites of C code either, but also involved experimenting with interfaces such as iteratees and &lt;a href=&quot;http://openmirage.org/wiki/tutorial-lwt&quot;&gt;lightweight threading&lt;/a&gt; to take advantage of OCaml's static type system.  To make all of this easy to work with, we decided to lump everything into a &lt;a href=&quot;http://github.com/avsm/mirage&quot;&gt;single Git repository&lt;/a&gt; that would bootstrap the entire system with a single &lt;code&gt;make&lt;/code&gt; invocation.&lt;/p&gt;&lt;p&gt;Nowadays though, Mirage is self-hosting, the interfaces are settling down, the number of libraries are growing every day, and portions of it are being used in &lt;a href=&quot;http://openmirage.org/blog/xenstore-stub-domain&quot;&gt;the Xen Cloud Platform&lt;/a&gt;. So for the first developer release, we wanted to split up the monolithic repository into more manageable chunks, but still make it as easy as possible for the average OCaml developer to try out Mirage.&lt;/p&gt;&lt;p&gt;Thanks to much hard work from &lt;a href=&quot;http://gazagnaire.org&quot;&gt;Thomas&lt;/a&gt; and his colleagues at &lt;a href=&quot;http://ocamlpro.com&quot;&gt;OCamlPro&lt;/a&gt;, we now have &lt;a href=&quot;http://opam.ocamlpro.com&quot;&gt;OPAM&lt;/a&gt;: a fully-fledged package manager for Mirage!  OPAM is a source-based package manager that supports a growing number of community OCaml libraries.  More importantly for Mirage, it can also switch between multiple compiler installations, and so support cross-compiled runtimes and modified standard libraries.&lt;/p&gt;&lt;p&gt;OPAM includes compiler variants for Mirage-friendly environments for Xen and the UNIX &lt;code&gt;tuntap&lt;/code&gt; backends.  The &lt;a href=&quot;http://openmirage.org/wiki/install&quot;&gt;installation instructions&lt;/a&gt; now give you instructions on how to use OPAM, and the old monolithic repository is considered deprecated.  We're still working on full documentation for the first beta release, but all the repositories are on the &lt;a href=&quot;http://github.com/mirage&quot;&gt;Mirage organisation&lt;/a&gt; on Github, with some of the important ones being:&lt;/p&gt;&lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;http://github.com/mirage/mirage-platform&quot;&gt;mirage-platform&lt;/a&gt; has the core runtime for Xen and UNIX, implemented as the &lt;code&gt;OS&lt;/code&gt; module.&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;a href=&quot;http://github.com/mirage/mirage-net&quot;&gt;mirage-net&lt;/a&gt; has the TCP/IP networking stack.&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;a href=&quot;http://github.com/mirage/ocaml-cstruct&quot;&gt;ocaml-cstruct&lt;/a&gt; has the camlp4 extension to manipulate memory like C &lt;code&gt;struct&lt;/code&gt;s, but with type-safe accessors in OCaml.&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;a href=&quot;http://github.com/mirage/ocaml-xenstore&quot;&gt;ocaml-xenstore&lt;/a&gt; has a portable implementation of the Xenstore protocol to communicate with the Xen management stack from a VM (or even act as a &lt;a href=&quot;http://openmirage.org/blog/xenstore-stub-domain&quot;&gt;server in a stub domain&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;a href=&quot;http://github.com/mirage/ocaml-dns&quot;&gt;ocaml-dns&lt;/a&gt; is a pure OCaml implementation of the DNS protocol, including a server and stub resolver.&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;a href=&quot;http://github.com/mirage/ocaml-re&quot;&gt;ocaml-re&lt;/a&gt; is a pure OCaml version of several regular expression engines, including Perl compatibility.&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;a href=&quot;http://github.com/mirage/ocaml-uri&quot;&gt;ocaml-uri&lt;/a&gt; handles parsing the surprisingly complex URI strings.&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;a href=&quot;http://github.com/mirage/ocaml-cohttp&quot;&gt;ocaml-cohttp&lt;/a&gt; is a portable HTTP parser, with backends for Mirage, Lwt and Core/Async. This is a good example of how to factor out OS-specific concerns using the OCaml type system (and I plan to blog more about this soon).&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;a href=&quot;http://github.com/mirage/ocaml-cow&quot;&gt;ocaml-cow&lt;/a&gt; is a set of syntax extensions for JSON, CSS, XML and XHTML, which are explained &lt;a href=&quot;http://openmirage.org/wiki/cow&quot;&gt;here&lt;/a&gt;, and used by this site.&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;a href=&quot;http://github.com/mirage/dyntype&quot;&gt;ocaml-dyntype&lt;/a&gt; uses camlp4 to &lt;a href=&quot;http://anil.recoil.org/papers/2011-dynamics-ml.pdf&quot;&gt;generate dynamic types&lt;/a&gt; and values from OCaml type declarations.&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;a href=&quot;http://github.com/mirage/orm&quot;&gt;ocaml-orm&lt;/a&gt; auto-generates SQL scheme from OCaml types via Dyntype, and currently supports SQLite.&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;a href=&quot;http://github.com/mirage/ocaml-openflow&quot;&gt;ocaml-openflow&lt;/a&gt; implements an OCaml switch and controller for the Openflow protocol.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;&lt;p&gt;There are quite a few more that are still being hacked for release by the team, but we're getting there very fast now. We also have the Mirage ports of &lt;a href=&quot;http://github.com/avsm/ocaml-ssh&quot;&gt;SSH&lt;/a&gt; to integrate before the first release this year, and Haris has got some &lt;a href=&quot;http://github.com/mirage/ocaml-crypto-keys&quot;&gt;interesting DNSSEC&lt;/a&gt; code!  If you want to get involved, join the &lt;a href=&quot;http://openmirage.org/about&quot;&gt;mailing list&lt;/a&gt; or IRC channel!&lt;/p&gt; 
   &lt;/div&gt;</content:encoded>
	<dc:date>2012-10-17T17:30:00+00:00</dc:date>
	<dc:creator>Anil Madhavapeddy</dc:creator>
</item>
<item rdf:about="http://openmirage.org/blog/xenstore-stub-domain">
	<title>MirageOS: Building a &quot;xenstore stub domain&quot; with Mirage</title>
	<link>http://openmirage.org/blog/xenstore-stub-domain</link>
	<content:encoded>&lt;div&gt;
      &lt;p&gt;On all hosts running &lt;a href=&quot;http://www.xen.org/&quot;&gt;Xen&lt;/a&gt;, there is a critical service called &lt;a href=&quot;http://wiki.xen.org/wiki/XenStore&quot;&gt;xenstore&lt;/a&gt;. Xenstore is used to allow &lt;b&gt;untrusted&lt;/b&gt; user VMs to communicate with &lt;b&gt;trusted&lt;/b&gt; system VMs, so that&lt;/p&gt;&lt;ul&gt; &lt;li&gt; &lt;p&gt;virtual disk and network connections can be established&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;performance statistics and OS version information can be shared&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;VMs can be remotely power-cycled, suspended, resumed, snapshotted and migrated.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;&lt;p&gt;If the xenstore service fails then at best the host cannot be controlled (i.e. no VM start or shutdown) and at worst VM isolation is compromised since an untrusted VM will be able to gain unauthorised access to disks or networks. This blog post examines how to disaggregate xenstore from the monolithic domain 0, and run it as an independent &lt;a href=&quot;http://www.cl.cam.ac.uk/~dgm36/publications/2008-murray2008improving.pdf&quot;&gt;stub domain&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Recently in the Xen community, Daniel De Graaf and Alex Zeffertt have added support for &lt;a href=&quot;http://lists.xen.org/archives/html/xen-devel/2012-01/msg02349.html&quot;&gt;xenstore stub domains&lt;/a&gt; where the xenstore service is run directly as an OS kernel in its own isolated VM. In the world of Xen, a running VM is a &quot;domain&quot; and a &quot;stub&quot; implies a single-purpose OS image rather than a general-purpose machine. Previously if something bad happened in &quot;domain 0&quot; (the privileged general-purpose OS where xenstore traditionally runs) such as an out-of-memory event or a performance problem, then the critical xenstore process might become unusable or fail altogether. Instead if xenstore is run as a &quot;stub domain&quot; then it is immune to such problems in domain 0. In fact, it will even allow us to &lt;b&gt;reboot&lt;/b&gt; domain 0 in future (along with all other privileged domains) without incurring any VM downtime during the reset!&lt;/p&gt;&lt;p&gt;The new code in &lt;a href=&quot;http://xenbits.xensource.com/xen-unstable.hg&quot;&gt;xen-unstable.hg&lt;/a&gt; lays the necessary groundwork (Xen and domain 0 kernel changes) and ports the original C xenstored to run as a stub domain.&lt;/p&gt;&lt;p&gt;Meanwhile, thanks to &lt;a href=&quot;http://tab.snarc.org&quot;&gt;Vincent Hanquez&lt;/a&gt; and &lt;a href=&quot;http://gazagnaire.org&quot;&gt;Thomas Gazagnaire&lt;/a&gt;, we also have an &lt;a href=&quot;http://gazagnaire.org/pub/SSGM10.pdf&quot;&gt;OCaml implementation of xenstore&lt;/a&gt; which, as well as the offering memory-safety, also supports a high-performance transaction engine, necessary for surviving a stressful &quot;VM bootstorm&quot; event on a large server in the cloud. Vincent and Thomas' code is Linux/POSIX only.&lt;/p&gt;&lt;p&gt;Ideally we would have the best of both worlds:&lt;/p&gt;&lt;ul&gt; &lt;li&gt; &lt;p&gt;a fast, memory-safe xenstored written in OCaml,&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;running directly as a Xen stub domain i.e. as a specialised kernel image without Linux or POSIX&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;&lt;p&gt;We can now do both, using Mirage!  If you're saying, &quot;that sounds great! How do I do that?&quot; then read on...&lt;/p&gt;&lt;p&gt;&lt;b&gt;Step 1: remove dependency on POSIX/Linux&lt;/b&gt;&lt;/p&gt;&lt;p&gt;If you read through the existing OCaml xenstored code, it becomes obvious that the main uses of POSIX APIs are for communication with clients, both Unix sockets and for a special Xen inter-domain shared memory interface. It was a fairly painless process to extract the required socket-like IO signature and turn the bulk of the server into a &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual004.html&quot;&gt;functor&lt;/a&gt;. The IO signature ended up looking approximately like:&lt;/p&gt;&lt;div class=&quot;ocaml&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword4&quot;&gt;type&lt;/span&gt; t
&lt;span class=&quot;keyword4&quot;&gt;val&lt;/span&gt; read&lt;span class=&quot;keyword2&quot;&gt;:&lt;/span&gt; t -&lt;span class=&quot;keyword2&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword3&quot;&gt;string&lt;/span&gt; -&lt;span class=&quot;keyword2&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword3&quot;&gt;int&lt;/span&gt; -&lt;span class=&quot;keyword2&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword3&quot;&gt;int&lt;/span&gt; -&lt;span class=&quot;keyword2&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword3&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;keyword5&quot;&gt;Lwt.&lt;/span&gt;t
&lt;span class=&quot;keyword4&quot;&gt;val&lt;/span&gt; write&lt;span class=&quot;keyword2&quot;&gt;:&lt;/span&gt; t -&lt;span class=&quot;keyword2&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword3&quot;&gt;string&lt;/span&gt; -&lt;span class=&quot;keyword2&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword3&quot;&gt;int&lt;/span&gt; -&lt;span class=&quot;keyword2&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword3&quot;&gt;int&lt;/span&gt; -&lt;span class=&quot;keyword2&quot;&gt;&amp;gt;&lt;/span&gt; unit &lt;span class=&quot;keyword5&quot;&gt;Lwt.&lt;/span&gt;t
&lt;span class=&quot;keyword4&quot;&gt;val&lt;/span&gt; destroy&lt;span class=&quot;keyword2&quot;&gt;:&lt;/span&gt; t -&lt;span class=&quot;keyword2&quot;&gt;&amp;gt;&lt;/span&gt; unit &lt;span class=&quot;keyword5&quot;&gt;Lwt.&lt;/span&gt;t
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For now the dependency on &lt;a href=&quot;http://ocsigen.org/lwt/&quot;&gt;Lwt&lt;/a&gt; is explicit but in future I'll probably make it more abstract so we can use &lt;a href=&quot;https://ocaml.janestreet.com/?q=node/100&quot;&gt;Core Async&lt;/a&gt; too.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Step 2: add a Mirage Xen IO implementation&lt;/b&gt;&lt;/p&gt;&lt;p&gt;In a stub-domain all communication with other domains is via shared memory pages and &quot;event channels&quot;. Mirage already contains extensive support for using these primitives, and uses them to create fast network and block virtual device drivers. To extend the code to cover the Xenstore stub domain case, only a few tweaks were needed to add the &quot;server&quot; side of a xenstore ring communication, in addition to the &quot;client&quot; side which was already present.&lt;/p&gt;&lt;p&gt;In Xen, domains share memory by a system of explicit &quot;grants&quot;, where a client (called &quot;frontend&quot;) tells the hypervisor to allow a server (called &quot;backend&quot;) access to specific memory pages. Mirage already had code to create such grants, all that was missing was a few simple functions to receive grants from other domains.&lt;/p&gt;&lt;p&gt;These changes are all in the current &lt;a href=&quot;https://github.com/mirage/mirage-platform&quot;&gt;mirage-platform&lt;/a&gt; tree.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Step 3: add a Mirage Xen &quot;main&quot; module and Makefile&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The Mirage &quot;main&quot; module necessary for a stub domain looks pretty similar to the normal Unix userspace case except that it:&lt;/p&gt;&lt;ul&gt; &lt;li&gt; &lt;p&gt;arranges to log messages via the VM console (rather than a file or the network, since a disk or network device cannot be created without a working xenstore, and it's important not to introduce a bootstrap problem here)&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;instantiates the server functor with the shared memory inter-domain IO module.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;&lt;p&gt;The Makefile looks like a regular Makefile, invoking ocamlbuild. The whole lot is built with &lt;a href=&quot;http://oasis.forge.ocamlcore.org/&quot;&gt;OASIS&lt;/a&gt; with a small extension added by &lt;a href=&quot;http://anil.recoil.org/&quot;&gt;Anil&lt;/a&gt; to set a few options required for building Xen kernels rather than regular binaries.&lt;/p&gt;&lt;p&gt;... and it all works!&lt;/p&gt;&lt;p&gt;The code is in two separate repositories:&lt;/p&gt;&lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/djs55/ocaml-xenstore&quot;&gt;ocaml-xenstore&lt;/a&gt;: contains all the generic stuff&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/djs55/ocaml-xenstore-xen&quot;&gt;ocaml-xenstore-xen&lt;/a&gt;: contains the unix userspace and xen stub domain IO modules and &quot;main&quot; functions&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;(optional) To regenerate the OASIS file, grab the &lt;code&gt;add-xen&lt;/code&gt; branch from this &lt;a href=&quot;http://github.com/avsm/oasis&quot;&gt;OASIS fork&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;&lt;p&gt;&lt;b&gt;Example build instructions&lt;/b&gt;&lt;/p&gt;&lt;p&gt;If you want to try building it yourself, try the following on a modern 64-bit OS. I've tested these instructions on a fresh install of Debian Wheezy.&lt;/p&gt;&lt;p&gt;First install OCaml and the usual build tools:&lt;/p&gt;&lt;div class=&quot;ocaml&quot;&gt;&lt;pre&gt;&lt;code&gt;apt-get install ocaml build-essential git curl rsync
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then install the OCamlPro &lt;code&gt;opam&lt;/code&gt; package manager to simplify the installation of extra packages&lt;/p&gt;&lt;div class=&quot;ocaml&quot;&gt;&lt;pre&gt;&lt;code&gt;git clone git&lt;span class=&quot;keyword2&quot;&gt;:&lt;/span&gt;//github.com/OCamlPro/opam.git
cd opam
make
make install
cd ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Initialise OPAM with the default packages:&lt;/p&gt;&lt;div class=&quot;ocaml&quot;&gt;&lt;pre&gt;&lt;code&gt;opam --yes init
eval `opam config -env`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Add the &quot;mirage&quot; development package source (this step will not be needed once the package definitions are upstreamed)&lt;/p&gt;&lt;div class=&quot;ocaml&quot;&gt;&lt;pre&gt;&lt;code&gt;opam remote -add dev git&lt;span class=&quot;keyword2&quot;&gt;:&lt;/span&gt;//github.com/mirage/opam-repo-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Switch to the special &quot;mirage&quot; version of the OCaml compiler&lt;/p&gt;&lt;div class=&quot;ocaml&quot;&gt;&lt;pre&gt;&lt;code&gt;opam --yes switch -install &lt;span class=&quot;keyword8&quot;&gt;3&lt;/span&gt;.&lt;span class=&quot;keyword8&quot;&gt;12&lt;/span&gt;.&lt;span class=&quot;keyword8&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;keyword2&quot;&gt;+&lt;/span&gt;mirage-xen
opam --yes switch &lt;span class=&quot;keyword8&quot;&gt;3&lt;/span&gt;.&lt;span class=&quot;keyword8&quot;&gt;12&lt;/span&gt;.&lt;span class=&quot;keyword8&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;keyword2&quot;&gt;+&lt;/span&gt;mirage-xen
eval `opam config -env`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Install the generic Xenstore protocol libraries&lt;/p&gt;&lt;div class=&quot;ocaml&quot;&gt;&lt;pre&gt;&lt;code&gt;opam --yes install xenstore
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Install the Mirage development libraries&lt;/p&gt;&lt;div class=&quot;ocaml&quot;&gt;&lt;pre&gt;&lt;code&gt;opam --yes install mirage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If this fails with &quot;+ runtime/dietlibc/lib/atof.c:1: sorry, unimplemented: 64-bit mode not compiled in&quot; it means you need a 64-bit build environment. Next, clone the xen stubdom tree&lt;/p&gt;&lt;div class=&quot;ocaml&quot;&gt;&lt;pre&gt;&lt;code&gt;git clone git&lt;span class=&quot;keyword2&quot;&gt;:&lt;/span&gt;//github.com/djs55/ocaml-xenstore-xen
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Build the Xen stubdom&lt;/p&gt;&lt;div class=&quot;ocaml&quot;&gt;&lt;pre&gt;&lt;code&gt;cd ocaml-xenstore-xen
make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The binary now lives in &lt;code&gt;xen/_build/src/server_xen.xen&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Deploying on a Xen system&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Running a stub Xenstored is a little tricky because it depends on the latest and greatest Xen and Linux PVops kernel. In the future it'll become much easier (and probably the default) but for now you need the following:&lt;/p&gt;&lt;ul&gt; &lt;li&gt; &lt;p&gt;xen-4.2 with XSM (Xen Security Modules) turned on&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;A XSM/FLASK policy which allows the stubdom to call the &quot;domctl getdomaininfo&quot;. For the moment it's safe to skip this step with the caveat that xenstored will leak connections when domains die.&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;a Xen-4.2-compatible toolstack (either the bundled xl/libxl or xapi with &lt;a href=&quot;http://github.com/djs55/xen-api/tree/xen-4.2&quot;&gt;some patches&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;Linux-3.5 PVops domain 0 kernel&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;the domain builder binary &lt;code&gt;init-xenstore-domain&lt;/code&gt; from &lt;code&gt;xen-4.2/tools/xenstore&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;&lt;p&gt;To turn the stub xenstored on, you need to edit whichever &lt;code&gt;init.d&lt;/code&gt; script is currently starting xenstore and modify it to call&lt;/p&gt;&lt;div class=&quot;ocaml&quot;&gt;&lt;pre&gt;&lt;code&gt;init-xenstore-domain /path/&lt;span class=&quot;keyword1&quot;&gt;to&lt;/span&gt;/server_xen.xen &lt;span class=&quot;keyword8&quot;&gt;256&lt;/span&gt; flask_label
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; 
   &lt;/div&gt;</content:encoded>
	<dc:date>2012-09-12T00:00:00+00:00</dc:date>
	<dc:creator>Dave Scott</dc:creator>
</item>
<item rdf:about="http://anil.recoil.org/2012/07/31/the-functional-week">
	<title>Anil Madhavapeddy: Why you should go to ICFP 2012</title>
	<link>http://anil.recoil.org/2012/07/31/the-functional-week.html</link>
	<content:encoded>&lt;p&gt;Functional programming has been gaining popularity pretty rapidly recently. We&amp;#8217;ve got serious projects from big Internet shops (&lt;a href=&quot;http://cufp.org/videos/f-embracing-functional-programming-visual-studio-2010-luke-hoban-mic&quot;&gt;Microsoft&lt;/a&gt;, &lt;a href=&quot;http://cufp.org/videos/large-scale-internet-services-using-scala&quot;&gt;Twitter&lt;/a&gt; and &lt;a href=&quot;http://cufp.org/videos/functional-programming-facebook&quot;&gt;Facebook&lt;/a&gt;), to varied domains such as &lt;a href=&quot;http://cufp.org/videos/fourteen-days-haskell&quot;&gt;radio&lt;/a&gt;, &lt;a href=&quot;http://cufp.org/videos/functional-programming-freebase-warren-harris-metaweb&quot;&gt;knowledge
bases&lt;/a&gt;, &lt;a href=&quot;http://cufp.org/videos/discrete-event-simulation-using-erlang&quot;&gt;the energy
grid&lt;/a&gt;, &lt;a href=&quot;http://cufp.org/videos/theorem-based-derivation-aes-implementation&quot;&gt;cryptography&lt;/a&gt;, NoSQL &lt;a href=&quot;http://cufp.org/conference/sessions/2010/riak-core-building-distributed-applications-withou&quot;&gt;databases&lt;/a&gt; and &lt;a href=&quot;http://cufp.org/videos/ocaml-and-acunu-experience-report&quot;&gt;storage&lt;/a&gt;, intricate &lt;a href=&quot;http://cufp.org/videos/functional-mzscheme-dsls-game-development&quot;&gt;PS3 games&lt;/a&gt;, and even &lt;a href=&quot;http://cufp.org/videos/model-based-testing-autosar-automotive-components&quot;&gt;making
safer cars&lt;/a&gt;. Throughout all of this, one conference has been around since the very beginning: the &lt;a href=&quot;http://icfpconference.org/&quot;&gt;ACM SIGPLAN
International Conference on Functional Programming&lt;/a&gt;. The early days consisted of academics (some with fine &lt;a href=&quot;http://homepages.inf.ed.ac.uk/wadler/&quot;&gt;beards&lt;/a&gt; and &lt;a href=&quot;http://research.microsoft.com/en-us/people/simonpj/&quot;&gt;sandals&lt;/a&gt;) developing the tools and theories behind FP, and spawned the famous &lt;a href=&quot;http://en.wikipedia.org/wiki/ICFP_Programming_Contest&quot;&gt;ICFP Programming Contest&lt;/a&gt;. The modern ICFP, however, also caters to the practical industry practitioner at all levels of knowledge, and this blog post is meant to introduce you to what to expect this year.&lt;/p&gt;

&lt;p&gt;ICFP 2012 is a week-long &lt;a href=&quot;http://www.icfpconference.org/icfp2012/&quot;&gt;conference&lt;/a&gt; on September 9-15th, held in beautiful Copenhagen. The theory-oriented workshops are held just before the main event on Sunday, on topics such as &lt;a href=&quot;http://workshops.inf.ed.ac.uk/xldi2012/&quot;&gt;cross-model&lt;/a&gt;, &lt;a href=&quot;http://www.wgp-sigplan.org/2012&quot;&gt;generic&lt;/a&gt; and &lt;a href=&quot;http://hope2012.mpi-sws.org&quot;&gt;higher-order&lt;/a&gt; programming. The main conference lasts three days, with a &lt;a href=&quot;http://www.icfpconference.org/icfp2012/program.html&quot;&gt;combination&lt;/a&gt; of academic papers and experience reports that are formally published by the ACM (see my &lt;a href=&quot;http://anil.recoil.org/papers/2010-icfp-xen.pdf&quot;&gt;experience report&lt;/a&gt; or a &lt;a href=&quot;http://thomas.gazagnaire.org/pub/GH09.pdf&quot;&gt;Xenstored full paper&lt;/a&gt; for two Xen-related publications).&lt;/p&gt;

&lt;p&gt;The main conference finishes mid-week, and the focus switches to more informal, interactive workshops that are relevant to the FP practitioner. The &lt;a href=&quot;http://anil.recoil.org/feeds/atom-ocaml.xml#icfpreg&quot;&gt;registration system&lt;/a&gt; lets you buy a day pass and attend any combination, so here&amp;#8217;s a list that I&amp;#8217;ve come up, along with &amp;#8220;who&amp;#8221; it is intended for. Needless to say, these are my personal views (although I&amp;#8217;m co-chairing CUFP and the OCaml Workshop, and any mistakes there would be bad!).&lt;/p&gt;

&lt;h2 id=&quot;commercial_users_of_functional_programming_&quot;&gt;Commercial Users of Functional Programming (&lt;a href=&quot;http://cufp.org/conference/schedule&quot;&gt;CUFP&lt;/a&gt;)&lt;/h2&gt;

&lt;p&gt;CUFP has been going since &lt;a href=&quot;http://cufp.org/archive/2004/main.html&quot;&gt;2004&lt;/a&gt;, acting as a voice for commercial users of functional programming languages and technology. CUFP is the biggest workshop at ICFP and spread over &lt;a href=&quot;http://cufp.org/conference/schedule/2012&quot;&gt;the last three days&lt;/a&gt; of the conference week.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Never done any Functional Programming before&lt;/em&gt;: For the first time, CUFP offers day-long tutorials for complete beginners to functional programming. You can spend a full day learning the basics of &lt;a href=&quot;http://cufp.org/conference/sessions/2012/scala-primer-heiko-seeberger-typesafe&quot;&gt;Scala&lt;/a&gt; or two days on &lt;a href=&quot;http://cufp.org/conference/sessions/2012/introductory-haskell-concurrent-haskell-jeremy-gib&quot;&gt;Haskell&lt;/a&gt; (including concurrency and multicore). These tutorials are separate events with their own &lt;a href=&quot;http://anil.recoil.org/feeds/atom-ocaml.xml#icfpreg&quot;&gt;registrations&lt;/a&gt; so you can attend just them if you wish, and still meet the other attendees during the regular breaks and evening events.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;em&gt;Done some FP, and want to improve or learn a new language&lt;/em&gt;: There are half-day tutorials that are more focussed on specific topics: real-world &lt;a href=&quot;http://cufp.org/conference/sessions/2012/t1-real-world-ocaml-anil-madhavapeddy-university-c&quot;&gt;OCaml&lt;/a&gt; (by me and Yaron!), &lt;a href=&quot;http://cufp.org/conference/sessions/2012/t4-hands-real-world-clojure-lau-jensen-best-class-&quot;&gt;Clojure&lt;/a&gt; and &lt;a href=&quot;http://cufp.org/conference/sessions/2012/functional-concepts-real-world-f-tomas-petricek-un&quot;&gt;F#&lt;/a&gt;, and popular web frameworks in &lt;a href=&quot;http://cufp.org/conference/sessions/2012/t2-erlang-web-frameworks-steve-vinoski-basho-techn&quot;&gt;Erlang&lt;/a&gt; and &lt;a href=&quot;http://cufp.org/conference/sessions/2012/t3-haskell-lazy-web-developer-introduction-happsta&quot;&gt;Haskell&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;em&gt;There&amp;#8217;s safety in crowds&lt;/em&gt;: &lt;a href=&quot;http://anil.recoil.org/images/icfp2011-4.jpg&quot;&gt;&lt;img align=&quot;right&quot; width=&quot;120&quot; alt=&quot;Team Twitter talking about Scala at CUFP 2011&quot; src=&quot;http://anil.recoil.org/images/icfp2011-4-thumb.jpg&quot; /&gt;&lt;/a&gt;The final day of CUFP (on Saturday 15th) is a full day of experience reports from industry speakers who have applied FP techniques to their day-to-day work. These talks are not intended to be deeply technical, but instead reflect on the social and engineering challenges around integrating a new (and often risky) technology into an existing business. The sessions &lt;a href=&quot;http://cufp.org/conference/schedule&quot;&gt;this year&lt;/a&gt; are diverse, with talks from Citrix on client-side cloud computing, on building NoSQL databases, and a number of talks on biotech (&lt;a href=&quot;http://cufp.org/conference/sessions/2012/ashish-agarwal-nyu-functional-big-data-genomics&quot;&gt;bigdata&lt;/a&gt;, &lt;a href=&quot;http://cufp.org/conference/sessions/2012/adam-granicz-intellifactory-developing-f-bioinform&quot;&gt;visualisation&lt;/a&gt; and &lt;a href=&quot;http://cufp.org/conference/sessions/2012/stefan-wehr-factis-research-developing-medical-sof&quot;&gt;medical software&lt;/a&gt;), developing &lt;a href=&quot;http://cufp.org/conference/sessions/2012/sebastian-egner-entelios-functional-programs-conne&quot;&gt;real-time&lt;/a&gt; and &lt;a href=&quot;http://cufp.org/conference/sessions/2012/kevin-lynagh-keming-labs-clojure-ipad-analytics-da&quot;&gt;offline&lt;/a&gt; analytics for national power grids, and even using FP to write software that runs directly on &lt;a href=&quot;http://cufp.org/conference/sessions/2012/peter-braam-parallel-scientific-awesome-haskell-fp&quot;&gt;FPGAs&lt;/a&gt; (including directly on a new 10GBs switch from &lt;a href=&quot;http://aristanetworks.com&quot;&gt;Arista networks&lt;/a&gt;). We really try to make this talk session a balanced view of the upsides and downsides of using FP, and encourage speakers to relate what went &lt;em&gt;wrong&lt;/em&gt; as well as right in their experiences.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;em&gt;CTO/executive, aka &amp;#8220;schmoozing&amp;#8221;&lt;/em&gt;: A huge part of CUFP is the great networking between engineers and academics (with job-hunting grad students thrown into the mix). There are regular breaks which are full of animated conversations, and we are planning an industrial reception where vendors can show off their wares (either on Thursday or Friday) where you find commercial support, or recruit bright graduate students from top schools across the world. The breaks are also a chance to corner your favourite language hacker-professor and make them aware of your particular needs!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;#8217;m co-chairing CUFP this year along with &lt;a href=&quot;http://www.deinprogramm.de/sperber/&quot;&gt;Michael Sperber&lt;/a&gt;, so feel free to direct any questions you have about it to us, and see below for &lt;a href=&quot;http://anil.recoil.org/feeds/atom-ocaml.xml#icfpreg&quot;&gt;registration information&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;language_workshops&quot;&gt;Language Workshops&lt;/h2&gt;

&lt;p&gt;Some of the bigger communities have &lt;a href=&quot;http://www.icfpconference.org/icfp2012/affiliated.html&quot;&gt;day-long workshops&lt;/a&gt; which are a combination of short presentations and regular breaks for discussions. If you are using (or just considering the use of) these languages, then these are a good way to meet all the right people who could help you with your efforts.&lt;/p&gt;

&lt;h3 id=&quot;ocaml_and_ml&quot;&gt;OCaml and ML&lt;/h3&gt;

&lt;p&gt;I&amp;#8217;m co-chairing the first &lt;a href=&quot;http://oud.ocaml.org&quot;&gt;OCaml Users and Developers&lt;/a&gt; workshop on Friday (Sep 14th). This event has traditionally been run in Paris in &lt;a href=&quot;http://anil.recoil.org/feeds/coil.org/2011/04/15/ocaml-users-group.html&quot;&gt;past years&lt;/a&gt;, but we decided it was getting big enought to run alongside ICFP. The &lt;a href=&quot;http://cufp.org/conference/sessions/2012/peter-braam-parallel-scientific-awesome-haskell-fp&quot;&gt;talk schedule&lt;/a&gt; is a mix of experience reports and pratical new toolchain developments. There will be talks on all the latest development tools (memory profiling, concurrent programming), standard library efforts (&lt;a href=&quot;https://bitbucket.org/yminsky/ocaml-core&quot;&gt;Core&lt;/a&gt;, &lt;a href=&quot;http://github.com/OCamlPro/opam&quot;&gt;OPAM&lt;/a&gt; packaging), as well as experience reports (the &lt;a href=&quot;http://arakoon.org&quot;&gt;Arakoon k/v store&lt;/a&gt;, &lt;a href=&quot;http://www.xen.org/products/cloudxen.html&quot;&gt;Xen Cloud&lt;/a&gt;, and building &lt;a href=&quot;http://blog.ashimagroup.net/2011/04/22/exploring-the-moon-with-webgl-and-ocaml/&quot;&gt;3D WebGL engines for NASA&lt;/a&gt;, among others). The hot topic at this workshop is the emerging consensus on building a more integrated OCaml Platform that acts as a stable base for larger applications, and the state-of-the-world talks from Xavier Leroy, Yaron Minsky and Fabrice le Fessant will no doubt kick off heated discussions that will go on late into dinner (last year, we all ended up in a very fine Tokyo restaurant drinking sake and arguing about GADTs and the global financial crisis).&lt;/p&gt;

&lt;p&gt;OCaml is the most widely used variant of the &lt;a href=&quot;http://en.wikipedia.org/wiki/ML_(programming_language)&quot;&gt;ML family&lt;/a&gt;, and the &lt;a href=&quot;http://www.lexifi.com/ml2012/&quot;&gt;ML workshop&lt;/a&gt; on the day before (Sep 13) takes a broader view on the theory and implementations of ML. Talks here include the &lt;a href=&quot;http://www.lexifi.com/ml2012/abstract_coq.txt&quot;&gt;Coq theorem prover&lt;/a&gt;, efficient implementations of OCaml &lt;a href=&quot;http://www.lexifi.com/ml2012/abstract_9.txt&quot;&gt;running on the JVM&lt;/a&gt;, &lt;a href=&quot;http://www.lexifi.com/ml2012/abstract_10.txt&quot;&gt;multicore-ML&lt;/a&gt;, and experimental extensions to ML-style programming (&lt;a href=&quot;http://www.lexifi.com/ml2012/abstract_1.txt&quot;&gt;effect tracking&lt;/a&gt;, &lt;a href=&quot;http://www.lexifi.com/ml2012/abstract_3.txt&quot;&gt;model checking&lt;/a&gt;, &lt;a href=&quot;http://www.lexifi.com/ml2012/abstract_15.txt&quot;&gt;applicative functors&lt;/a&gt;, and &lt;a href=&quot;http://www.lexifi.com/ml2012/abstract_7.txt&quot;&gt;GADTs&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Both of these workshops are convenient to attend over a two-day period (Thu and Fri), and will give you a huge amount of information about the latest developments in the land of ML.&lt;/p&gt;

&lt;h3 id=&quot;haskell&quot;&gt;Haskell&lt;/h3&gt;

&lt;p&gt;The Haskell community has been growing &lt;a href=&quot;https://plus.google.com/115274377971493973150/posts/SK3urbQxcaf&quot;&gt;rather fast&lt;/a&gt; over the last few years, and so there are two separate days of talks.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://www.haskell.org/haskell-symposium/2012/&quot;&gt;Haskell Symposium&lt;/a&gt; has formal published proceedings, and consists of a diverse array of research work that has direct implications on the future of Haskell. My personal highlights include the &lt;a href=&quot;http://research.microsoft.com/en-us/um/people/simonpj/papers/ndp/haskell12-lippmeier.pdf&quot;&gt;parallel array fusion&lt;/a&gt; and vectorisation for data processing on modern hardware, the intriguing &amp;#8220;Wormhole&amp;#8221; effect-tracking FRP, and &lt;a href=&quot;http://www.haskell.org/ghc/docs/7.2.2/html/users_guide/safe-haskell.html&quot;&gt;Safe Haskell&lt;/a&gt; for practical information-flow tracking.&lt;/p&gt;

&lt;p&gt;The second day has the &lt;a href=&quot;http://www.haskell.org/haskellwiki/HaskellImplementorsWorkshop/2012&quot;&gt;Haskell Implementors Workshop&lt;/a&gt;, which is a more informal affair aimed at the day-to-day infrastructure and toolchain needs of Haskell. The schedule includes overview talks from the two Simons, and ongoing work on &lt;a href=&quot;http://www.haskell.org/haskellwiki/HaskellImplementorsWorkshop/2012/deVries&quot;&gt;distributed programming&lt;/a&gt; and &lt;a href=&quot;http://www.haskell.org/haskellwiki/HaskellImplementorsWorkshop/2012/Stutterheim&quot;&gt;Javascript compilation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So if you are after a broad overview of Haskell then attend the Symposium, and if you wish to join the Haskell Hogwarts and start compiler hacking, then the implementors workshop will have all the right people to help you out.&lt;/p&gt;

&lt;h3 id=&quot;erlang&quot;&gt;Erlang&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;http://www.cse.chalmers.se/~rjmh/EWCFP.html&quot;&gt;Erlang workshop&lt;/a&gt; at ICFP has been running for eleven years now, and tends to be a combination of big projects and work-in-progress reports. This year has the latest on porting Erlang to use &lt;a href=&quot;http://www.softlab.ntua.gr/~gtsiour/files/erllvm_pres-20111107.pdf&quot;&gt;LLVM&lt;/a&gt; for high-performance computing, as well as experience reports on scalability testing and the widely-used &lt;a href=&quot;http://wiki.basho.com&quot;&gt;Riak&lt;/a&gt; distributed database. Despite my prelediction towards static typing, Erlang is a language that I keep intending to make bigger use of, so I plan to drop into this session for sure.&lt;/p&gt;
&lt;table align=&quot;center&quot; width=&quot;90%&quot;&gt;
&lt;tr&gt;
&lt;td width=&quot;30%&quot; class=&quot;bimg&quot;&gt;&lt;a href=&quot;http://anil.recoil.org/images/icfp2011-1.jpg&quot;&gt;&lt;img border=&quot;0&quot; width=&quot;120&quot; src=&quot;http://anil.recoil.org/images/icfp2011-1-thumb.jpg&quot; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;i&gt;Last year we had to learn Japanese, the hardest functional language&lt;/i&gt;&lt;/td&gt;
&lt;td width=&quot;30%&quot; class=&quot;bimg&quot;&gt;&lt;a href=&quot;http://anil.recoil.org/images/icfp2011-2.jpg&quot;&gt;&lt;img border=&quot;0&quot; width=&quot;120&quot; src=&quot;http://anil.recoil.org/images/icfp2011-2-thumb.jpg&quot; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;i&gt;We also made a lot of new local friends&lt;/i&gt;&lt;/td&gt;
&lt;td width=&quot;30%&quot; class=&quot;bimg&quot;&gt;&lt;a href=&quot;http://anil.recoil.org/images/icfp2011-3.jpg&quot;&gt;&lt;img border=&quot;0&quot; width=&quot;120&quot; src=&quot;http://anil.recoil.org/images/icfp2011-3-thumb.jpg&quot; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;i&gt;Luckily, the weather made us feel at home though&lt;/i&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;&lt;a name=&quot;icfpreg&quot;&gt;&amp;nbsp;&lt;/a&gt;
&lt;h2 id=&quot;registration&quot;&gt;Registration&lt;/h2&gt;

&lt;p&gt;This has been a whirlwind tour of the ICFP week (or rather, me writing this down while planning my own schedule). The early registration deadline is &lt;em&gt;next week&lt;/em&gt; (Aug 9th), and the &lt;b&gt;&lt;a href=&quot;http://www.icfpconference.org/icfp2012/registration.html&quot;&gt;online registration&lt;/a&gt;&lt;/b&gt; has all the details of the full schedule and day prices. There is also &lt;a href=&quot;http://www.icfpconference.org/icfp2012/local.html&quot;&gt;local information&lt;/a&gt; about where to stay and visit in Copenhagen, if you want to take a late-summer break while making the trip.&lt;/p&gt;

&lt;p&gt;Something worth noting is that all of this is run under the auspices of the ACM by volunteers, which accounts for the somewhat chaotic spread of information across all the websites. We&amp;#8217;ve tried to demystify the CUFP process &lt;a href=&quot;http://cufp.org/cufp-2012-registration&quot;&gt;here&lt;/a&gt;, but &lt;em&gt;please&lt;/em&gt; get in touch with any of the organisers if you are confused and want some help. We always welcome volunteer offers too, and the first round of drinks is on me for anyone who helps out during the week!&lt;/p&gt;</content:encoded>
	<dc:date>2012-07-30T23:00:00+00:00</dc:date>
</item>
<item rdf:about="http://openmirage.org/blog/announcing-mirage-openflow">
	<title>MirageOS: Connected Cloud Control: OpenFlow in Mirage</title>
	<link>http://openmirage.org/blog/announcing-mirage-openflow</link>
	<content:encoded>&lt;div&gt;
      &lt;p&gt;[&lt;b&gt;N.B.  Due to continuing development, some of the details in this blog post are now out-of-date. It is archived here.&lt;/b&gt; ]&lt;/p&gt;&lt;p&gt;Something we've been working on for a little while now that we're pretty excited about is an &lt;a href=&quot;http://openflow.org/&quot;&gt;OpenFlow&lt;/a&gt; implementation for Mirage. For those who're not networking types, in short, OpenFlow is a protocol and framework for devolving network control to software running on platforms other than the network elements themselves. It consists of three main parts:&lt;/p&gt;&lt;ul&gt; &lt;li&gt; &lt;p&gt;a &lt;b&gt;controller&lt;/b&gt;, responsible for exercising control over the network;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;b&gt;switches&lt;/b&gt;, consisting of switching hardware, with flow tables that apply forwarding behaviours to matching packets; and&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;the &lt;b&gt;protocol&lt;/b&gt;, by which controllers and switches communicate.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;&lt;p&gt;For more -- and far clearer! -- explanations, see any of the many online OpenFlow resources such as &lt;a href=&quot;http://openflowhub.org&quot;&gt;OpenFlowHub&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Within Mirage we have an OpenFlow implementation in two parts: individual libraries that provide controller and switch functionality. Linking the switch library enables your application to become a software-based OpenFlow switch. Linking in the controller library enables your application to exercise direct control over OpenFlow network elements.&lt;/p&gt;&lt;p&gt;The controller is modelled after the &lt;a href=&quot;http://noxrepo.org/&quot;&gt;NOX&lt;/a&gt; open-source controller and currently provides only relatively low-level access to the OpenFlow primitives: a very cool thing to build on top of it would be a higher-level abstraction such as that provided by &lt;a href=&quot;http://haskell.cs.yale.edu/?page_id=376&quot;&gt;Nettle&lt;/a&gt; or &lt;a href=&quot;http://www.frenetic-lang.org/&quot;&gt;Frenetic&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The switch is primarily intended as an experimental platform -- it is hopefully easier to extend than some of the existing software switches while still being sufficiently high performance to be interesting!&lt;/p&gt;&lt;p&gt;By way of a sample of how it fits together, here's a skeleton for a simple controller application:&lt;/p&gt;&lt;div class=&quot;ocaml&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword4&quot;&gt;type&lt;/span&gt; mac_switch &lt;span class=&quot;keyword2&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword2&quot;&gt;{&lt;/span&gt;
  addr&lt;span class=&quot;keyword2&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;keyword5&quot;&gt;OP.&lt;/span&gt;eaddr&lt;span class=&quot;keyword2&quot;&gt;;&lt;/span&gt;
  switch&lt;span class=&quot;keyword2&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;keyword5&quot;&gt;OP.&lt;/span&gt;datapath_id&lt;span class=&quot;keyword2&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;keyword2&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;keyword4&quot;&gt;type&lt;/span&gt; switch_state &lt;span class=&quot;keyword2&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword2&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;keyword1&quot;&gt;mutable&lt;/span&gt; mac_cache&lt;span class=&quot;keyword2&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;keyword2&quot;&gt;(&lt;/span&gt;mac_switch, &lt;span class=&quot;keyword5&quot;&gt;OP.&lt;/span&gt;&lt;span class=&quot;keyword5&quot;&gt;Port.&lt;/span&gt;t&lt;span class=&quot;keyword2&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword5&quot;&gt;Hashtbl.&lt;/span&gt;t&lt;span class=&quot;keyword2&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;keyword1&quot;&gt;mutable&lt;/span&gt; dpid&lt;span class=&quot;keyword2&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;keyword5&quot;&gt;OP.&lt;/span&gt;datapath_id &lt;span class=&quot;keyword3&quot;&gt;list&lt;/span&gt;
&lt;span class=&quot;keyword2&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;keyword4&quot;&gt;let&lt;/span&gt; switch_data &lt;span class=&quot;keyword2&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword2&quot;&gt;{&lt;/span&gt;
  mac_cache &lt;span class=&quot;keyword2&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword5&quot;&gt;Hashtbl.&lt;/span&gt;create &lt;span class=&quot;keyword8&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;keyword2&quot;&gt;;&lt;/span&gt;
  dpid &lt;span class=&quot;keyword2&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword2&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;keyword2&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;keyword2&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;keyword2&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;keyword4&quot;&gt;let&lt;/span&gt; join_cb controller dpid evt &lt;span class=&quot;keyword2&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;keyword4&quot;&gt;let&lt;/span&gt; dp &lt;span class=&quot;keyword2&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword1&quot;&gt;match&lt;/span&gt; evt &lt;span class=&quot;keyword1&quot;&gt;with&lt;/span&gt;
      &lt;span class=&quot;keyword2&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;keyword5&quot;&gt;OE.Datapath_join &lt;/span&gt;c -&lt;span class=&quot;keyword2&quot;&gt;&amp;gt;&lt;/span&gt; c
      &lt;span class=&quot;keyword2&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;keyword8&quot;&gt;_&lt;/span&gt; -&lt;span class=&quot;keyword2&quot;&gt;&amp;gt;&lt;/span&gt; invalid_arg &lt;span class=&quot;keyword7&quot;&gt;&quot;bogus datapath_join&quot;&lt;/span&gt;
  &lt;span class=&quot;keyword4&quot;&gt;in&lt;/span&gt;
  switch_data.dpid &lt;span class=&quot;keyword2&quot;&gt;&amp;lt;&lt;/span&gt;- switch_data.dpid &lt;span class=&quot;keyword2&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;keyword2&quot;&gt;[&lt;/span&gt;dp&lt;span class=&quot;keyword2&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;keyword4&quot;&gt;let&lt;/span&gt; packet_in_cb controller dpid evt &lt;span class=&quot;keyword2&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;comments&quot;&gt;(* algorithm details omitted for space *)&lt;/span&gt;

&lt;span class=&quot;keyword4&quot;&gt;let&lt;/span&gt; init ctrl &lt;span class=&quot;keyword2&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;keyword5&quot;&gt;OC.&lt;/span&gt;register_cb ctrl &lt;span class=&quot;keyword5&quot;&gt;OE.DATAPATH_JOIN &lt;/span&gt;join_cb&lt;span class=&quot;keyword2&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;keyword5&quot;&gt;OC.&lt;/span&gt;register_cb ctrl &lt;span class=&quot;keyword5&quot;&gt;OE.PACKET_IN &lt;/span&gt;packet_in_cb

&lt;span class=&quot;keyword4&quot;&gt;let&lt;/span&gt; main &lt;span class=&quot;keyword2&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword2&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword2&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;keyword5&quot;&gt;Net.&lt;/span&gt;&lt;span class=&quot;keyword5&quot;&gt;Manager.&lt;/span&gt;create &lt;span class=&quot;keyword2&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword1&quot;&gt;fun&lt;/span&gt; mgr interface id -&lt;span class=&quot;keyword2&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;keyword4&quot;&gt;let&lt;/span&gt; port &lt;span class=&quot;keyword2&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword8&quot;&gt;6633&lt;/span&gt; &lt;span class=&quot;keyword4&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;keyword5&quot;&gt;OC.&lt;/span&gt;listen mgr &lt;span class=&quot;keyword2&quot;&gt;(&lt;/span&gt;None, port&lt;span class=&quot;keyword2&quot;&gt;)&lt;/span&gt; init
  &lt;span class=&quot;keyword2&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We've written up some of the gory details of the design, implementation and performance in a &lt;a href=&quot;http://openmirage.org/docs/iccsdn12-mirage.pdf&quot;&gt;short paper&lt;/a&gt; to the &lt;a href=&quot;http://www.ieee-icc.org/&quot;&gt;ICC&lt;/a&gt; &lt;a href=&quot;http://sdn12.mytestbed.net/&quot;&gt;Software Defined Networking&lt;/a&gt; workshop. Thanks to some sterling work by &lt;a href=&quot;http://www.cl.cam.ac.uk/~cr409/&quot;&gt;Haris&lt;/a&gt; and &lt;a href=&quot;mailto:balraj.singh@cl.cam.ac.uk&quot;&gt;Balraj&lt;/a&gt;, the headline numbers are pretty good though: the unoptimised Mirage controller implementation is only 30--40% lower performance than the highly optimised NOX &lt;b&gt;destiny-fast&lt;/b&gt; branch, which drops most of the programmability and flexibility of NOX; but is about &lt;b&gt;six times&lt;/b&gt; higher performance than the fully flexible current NOX release. The switch's performance  running as a domU virtual machine is indistinguishable from the current &lt;a href=&quot;http://openvswitch.org/&quot;&gt;Open vSwitch&lt;/a&gt; release.&lt;/p&gt;&lt;p&gt;For more details see &lt;a href=&quot;http://openmirage.org/docs/iccsdn12-mirage.pdf&quot;&gt;the paper&lt;/a&gt; or contact &lt;a href=&quot;mailto:mort@cantab.net&quot;&gt;Mort&lt;/a&gt;, &lt;a href=&quot;mailto:charalampos.rotsos@cl.cam.ac.uk&quot;&gt;Haris&lt;/a&gt; or &lt;a href=&quot;mailto:anil@recoil.org&quot;&gt;Anil&lt;/a&gt;. Please do get in touch if you've any comments or questions, or you do anything interesting with it!&lt;/p&gt; 
   &lt;/div&gt;</content:encoded>
	<dc:date>2012-02-29T11:10:00+00:00</dc:date>
	<dc:creator>Richard Mortier</dc:creator>
</item>
<item rdf:about="http://anil.recoil.org/2012/02/25/dreamplug-debian-and-ocaml">
	<title>Anil Madhavapeddy: Dreaming of an ARM OCaml</title>
	<link>http://anil.recoil.org/2012/02/25/dreamplug-debian-and-ocaml.html</link>
	<content:encoded>&lt;a href=&quot;http://www.flickr.com/photos/tlamer/5693063642/&quot; title=&quot;dreamplug by tlamer, on Flickr&quot;&gt;&lt;img align=&quot;right&quot; width=&quot;200&quot; alt=&quot;dreamplug&quot; src=&quot;http://farm6.staticflickr.com/5230/5693063642_47aa7c4c99.jpg&quot; height=&quot;134&quot; /&gt;&lt;/a&gt;
&lt;p&gt;I&amp;#8217;ve been meaning to play with &lt;a href=&quot;http://www.plugcomputer.org/&quot;&gt;Plug Computers&lt;/a&gt; for some time now, as I need a low-power embedded system around the house. I recently bought a &lt;a href=&quot;http://soekris.com/products/net6501.html&quot;&gt;Soekris Net6501&lt;/a&gt; (a pretty powerful Intel CPU, that even has VT support), but had annoying &lt;a href=&quot;http://marc.info/?l=soekris-tech&amp;m=132915532912206&amp;w=2&quot;&gt;issues&lt;/a&gt; getting it working reliably. I ordered an ARM-based &lt;a href=&quot;http://www.newit.co.uk/shop/products.php?cat=21&quot;&gt;Dreamplug&lt;/a&gt; as an alternative (and as a bonus, the Dreamplug is 6x cheaper than the Soekris!). Here are my notes on getting it to work.&lt;/p&gt;

&lt;p&gt;Requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Aside from the Dreamplug itself, make sure you order the optional JTAG module. This provides a serial console that is essential to getting any development done with it.&lt;/li&gt;

&lt;li&gt;I also grabbed the extra 16GB Class 10 SLC SD Card, to act as my home directory.&lt;/li&gt;

&lt;li&gt;You will also need another functional system running Debian (or a VM on your Mac; whatever is easiest). The JTAG drivers for the USB serial are easiest to get running on Linux.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Dreamplug arrived with a working installation, but running the absolutely ancient Debian Lenny. A dist-upgrade through to Wheezy led to bricking it almost immediately, and so I did a fresh installation from scratch.&lt;/p&gt;

&lt;p&gt;For a fresh installation, place a USB stick of suitable size (greater than 2GB is best) into your functional Debian installation. Then:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The Marvell bootloader boots from a VFAT partition, so you will need two partitions. The first should be a small &lt;code&gt;fat16&lt;/code&gt; (I picked 150MB) and the remainder an &lt;code&gt;ext3&lt;/code&gt; partition for Linux itself. There are good instructions available on the &lt;a href=&quot;https://trac.torproject.org/projects/tor/wiki/doc/DebianDreamPlug&quot;&gt;Tor/Dreamplug&lt;/a&gt; wiki which show you how to do this.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;I grabbed the latest kernel (at this time, 3.2.7) from &lt;a href=&quot;http://sheeva.with-linux.com/sheeva/3/3.2/3.2.7/&quot;&gt;with-linux&lt;/a&gt;, and installed it with the following commands (assuming your USB stick is &lt;code&gt;/dev/sdb&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;	&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo mount /dev/sdb1 /mnt
	&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo cp uImage /mnt
	&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo umount /mnt
	
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You now need to use &lt;code&gt;debootstrap&lt;/code&gt; to install a fresh root image. Because it is ARM and your main PC is probably an x86, you will need to setup the QEMU CPU emulator. An extremely cool feature of QEMU is that it can do &lt;a href=&quot;http://wiki.debian.org/QemuUserEmulation&quot;&gt;transparent emulation&lt;/a&gt; of foreign binaries, so you can chroot directly into the ARM filesystem and run commands as if they were x86. The &lt;code&gt;qemu-deboostrap&lt;/code&gt; command will take care of this for you, if you perform the steps below (again, assuming your USB stick is &lt;code&gt;/dev/sdb&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;	&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get install qemu-user-static debootstrap
	&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo mount /dev/sdb2 /mnt
	&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo mkdir -p /mnt/usr/bin
	&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo cp /usr/bin/qemu-arm-static /mnt/usr/bin/
	&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo qemu-debootstrap --arch&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;armel wheezy http://ftp.uk.debian.org/debian/
	
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Now grab the kernel modules from the same place as your uImage (for 3.2.7, from &lt;a href=&quot;http://sheeva.with-linux.com/sheeva/3/3.2/3.2.7/sheeva-3.2.7-Modules.tar.gz&quot;&gt;here&lt;/a&gt;). Then, chroot into your fresh installation and untar them.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;	&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /mnt
	&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo tar -zxvf ~/sheeva-3.2.7-Modules.tar.gz
	&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo chroot /mnt
	&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;depmod -a
	&lt;span class=&quot;c&quot;&gt;# edit /etc/network/interfaces&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# edit /etc/resolv.conf&lt;/span&gt;
	
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The wireless setup involves some extremely crap firmware which relentlessly kernel panicked for me, so I just disabled it by adding the following to &lt;code&gt;/etc/modprobe.d/dpwifiap.conf&lt;/code&gt;, as I only want wired access:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;	blacklist libertas
	blacklist libertas_sdio
	
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;From there on, put the USB stick into the Dreamplug, and follow the rest of the boot instructions from the &lt;a href=&quot;https://trac.torproject.org/projects/tor/wiki/doc/DebianDreamPlug&quot;&gt;Tor wiki&lt;/a&gt; to interact with the Marvell BIOS and boot from the USB stick. I copied the contents of the USB stick onto the internal MicroSD, and it all boots standalone now.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ocaml_on_arm&quot;&gt;OCaml on ARM&lt;/h2&gt;

&lt;p&gt;One of the reasons I wanted an ARM-based setup is to experiment with the OCaml native code generation. &lt;a href=&quot;http://www.home.unix-ag.org/bmeurer/index.html&quot;&gt;Benedikt Meurer&lt;/a&gt; has been doing some excellent work on &lt;a href=&quot;http://old.nabble.com/New-ARM-backend-merged-into-trunk-td33262083.html&quot;&gt;improving code generation&lt;/a&gt; for embedded systems, including support for 16-bit Thumb code, exception backtraces, and dynamic linking and profiling.&lt;/p&gt;

&lt;p&gt;Once Linux was up and running, compiling up the latest ocaml-trunk was straightforward.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;	&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get install build-essential git
	&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone http://github.com/OCamlPro/ocp-ocaml svn-trunk
	&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;ocp-ocaml
	&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./configure &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make world opt opt.opt install
	
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This compiles the bytecode and native code compilers, and then compiles them again using the native code generator. This takes a while to do on the poor little ARM CPU. Once that finished, I compiled up a few simple modules and they worked great! Since the trunk of OCaml is a development branch, you may run into a few packaging issues (use the very latest OASIS to regenerate any &lt;code&gt;setup.ml&lt;/code&gt;, and you will need a small patch until &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=5503&quot;&gt;PR 5503&lt;/a&gt; is applied).&lt;/p&gt;

&lt;p&gt;Incidentally, if anyone is interested in working on a &lt;a href=&quot;http://openmirage.org&quot;&gt;Mirage&lt;/a&gt; port to ARM as an internship in the &lt;a href=&quot;http://www.cl.cam.ac.uk/research/srg/netos/&quot;&gt;Cambridge Computer Lab&lt;/a&gt;, do get in touch with me&amp;#8230;&lt;/p&gt;</content:encoded>
	<dc:date>2012-02-25T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://openmirage.org/blog/an-outing-to-cufp">
	<title>MirageOS: An Outing to CUFP 2011</title>
	<link>http://openmirage.org/blog/an-outing-to-cufp</link>
	<content:encoded>&lt;div&gt;
      &lt;p&gt;The team signed up to do a tutorial at &lt;a href=&quot;http://cufp.org&quot;&gt;CUFP&lt;/a&gt; on the topic of &lt;a href=&quot;http://cufp.org/conference/sessions/2011/t3-building-functional-os&quot;&gt;Building a Functional OS&lt;/a&gt;, which meant zooming off to Tokyo!  This was the first public show of the project, and resulted in a furious &lt;a href=&quot;https://github.com/avsm/mirage/graphs/impact&quot;&gt;flurry of commits&lt;/a&gt; from the whole team to get it ready. The 45-strong crowd at the tutorial were really full of feedback, and particular thanks to &lt;a href=&quot;http://www.deinprogramm.de/sperber/&quot;&gt;Michael&lt;/a&gt; for organising the event, and &lt;a href=&quot;http://ocaml.janestreet.com/?q=blog/5&quot;&gt;Yaron&lt;/a&gt;, &lt;a href=&quot;http://monkey.org/~marius/&quot;&gt;Marius&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/#!/stevej&quot;&gt;Steve&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/wil&quot;&gt;Wil&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/#!/adoemon&quot;&gt;Adrian&lt;/a&gt; and the rest for shouting out questions regularly!&lt;/p&gt;&lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;b&gt;The tutorial&lt;/b&gt; is &lt;a href=&quot;http://github.com/avsm/mirage-tutorial&quot;&gt;a Mirage application&lt;/a&gt;, so you can clone it and view it locally through your web browser. The content is mirrored at &lt;a href=&quot;http://tutorial.openmirage.org&quot;&gt;tutorial.openmirage.org&lt;/a&gt;, although it does require cleanup to make it suitable to an online audience. The SVG integration is awkward and it only works on Chrome/Safari, so I will probably rewrite it using &lt;a href=&quot;http://imakewebthings.github.com/deck.js/&quot;&gt;deck.js&lt;/a&gt; soon. The tutorial is a good showcase of Mirage, as it compiles to Xen, UNIX (both kernel sockets and direct tuntap) with a RAMdisk or external filesystem, and is a good way to mess around with application synthesis (look at the &lt;code&gt;Makefile&lt;/code&gt; targets in &lt;code&gt;slides/&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;b&gt;Installation&lt;/b&gt;: &lt;a href=&quot;http://openmirage.org/wiki/install&quot;&gt;instructions&lt;/a&gt; have been simplified, and we now only require OCaml on the host and include everything else in-tree. Thomas has also made Emacs and Vim plugins that are compatible with the ocamlbuild layout.&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;b&gt;Lwt&lt;/b&gt;: a &lt;a href=&quot;http://openmirage.org/wiki/tutorial-lwt&quot;&gt;new tutorial&lt;/a&gt; which walks you through the cooperative threading library we use, along with exercises (all available in &lt;a href=&quot;http://github.com/avsm/mirage-tutorial&quot;&gt;mirage-tutorial&lt;/a&gt;). Raphael and Balraj are looking for feedback on this, so get in touch!&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;b&gt;Javascript&lt;/b&gt;: via &lt;a href=&quot;http://nodejs.org&quot;&gt;node.js&lt;/a&gt; did not work in time for the tutorial, as integrating I/O is a tangled web that will take some time to sort out. Raphael is working on this in a &lt;a href=&quot;https://github.com/raphael-proust/nodejs_of_ocaml&quot;&gt;separate tree&lt;/a&gt; for now.  As part of this effort though, he integrated a pure OCaml &lt;a href=&quot;http://openmirage.org/wiki/ocaml-regexp&quot;&gt;regular expression library&lt;/a&gt; that does not require C bindings, and is surprisingly fast.&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;b&gt;Devices&lt;/b&gt;: we can now synthesise binaries that share common code but have very different I/O interfaces. This is due to a new device manager, and David also heroically wrote a complete &lt;a href=&quot;http://github.com/avsm/mirage/tree/master/lib/fs&quot;&gt;FAT12/16/32 library&lt;/a&gt; that we demonstrated.  Yaron Minsky suggested a &lt;a href=&quot;https://gist.github.com/1245418&quot;&gt;different approach&lt;/a&gt; to the device manager using &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml/manual021.html#toc81&quot;&gt;first-class modules&lt;/a&gt; instead of objects, so I am experimentally trying this before writing documentation on it.&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;b&gt;TCP&lt;/b&gt;: the notorious Mirage stack is far more robust due to our resident networking guru Balraj hunting down last-minute bugs. Although it held together with sticky tape during the tutorial, he is now adding retransmission and congestion control to make it actually standards-compliant.  Still, if you dont have any packet loss, the &lt;a href=&quot;http://xen.openmirage.org/&quot;&gt;microkernel version&lt;/a&gt; of this website does actually serve pages.&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;b&gt;OpenFlow&lt;/b&gt;: is a new &lt;a href=&quot;http://www.openflow.org/wk/index.php/OpenFlow_v1.0&quot;&gt;standard&lt;/a&gt; for &lt;a href=&quot;http://networkheresy.wordpress.com/&quot;&gt;Software Defined Networking&lt;/a&gt;, and Haris and Mort have been hacking away at a complete implementation directly in Mirage!  We will be giving a tutorial on this at the &lt;a href=&quot;http://changeofelia.info.ucl.ac.be/&quot;&gt;OFELIA summer school&lt;/a&gt; in November (it is summer somewhere, I guess). The prospect of a high-speed microkernel switching fabric for the cloud, programmed in a functional style, is something I am really looking forward to seeing!&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;b&gt;Jane Street Core&lt;/b&gt;: preceeding us was Yaron's &lt;a href=&quot;http://cufp.org/conference/sessions/2011/t2-janestreets-ocaml-core-library&quot;&gt;Core&lt;/a&gt; tutorial. Since Mirage provides it own complete standard library, we can adopt portions of Core that do not require OS threads or UNIX-specific features.  I really like the idea that Mirage enforces a discipline on writing portable interfaces, as dependencies on OS-specific features do sneak in insiduously and make switching to different platforms very difficult (e.g. Windows support). Incidentally, Yaron's &lt;a href=&quot;http://queue.acm.org/detail.cfm?id=2038036&amp;ref=fullrss&quot;&gt;ACM Queue&lt;/a&gt; article is a great introduction to OCaml.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;&lt;p&gt;So as you can see, it has been a busy few months!  Much of the core of Mirage is settling down now, and we are writing a paper with detailed performance benchmarks of our various backends.  Keep an eye on the &lt;a href=&quot;https://github.com/avsm/mirage/issues?milestone=2&amp;state=open&quot;&gt;Github milestone&lt;/a&gt; for the preview release, join our &lt;a href=&quot;https://lists.cam.ac.uk/mailman/listinfo/cl-mirage&quot;&gt;new mailing list&lt;/a&gt;, or follow the newly sentient &lt;a href=&quot;http://twitter.com/openmirage&quot;&gt;openmirage on twitter&lt;/a&gt;!&lt;/p&gt; 
   &lt;/div&gt;</content:encoded>
	<dc:date>2011-09-29T11:10:00+00:00</dc:date>
	<dc:creator>Anil Madhavapeddy</dc:creator>
</item>

</rdf:RDF>
